{
  "hash": "5386cba11886a4abdd731e8711a312bb",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 4: Prototyping Modules for Shiny Application\"\ndate: \"09 Mar 2024\"\ndate-modified: \"last-modified\"\neditor: visual\ntoc-depth: 4\nexecute:\n  freeze: true #never re-render during project render\n  echo: true #if false, displays charts without codes\n  eval: true #if false, displays codes without charts\n  warning: false #dont display if there are any warnings\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: false\n---\n\n\n![](images/prototype.gif){fig-align=\"center\"}\n\n# 1 Overview\n\nInternational large-scale assessments, such as PISA, provide structured and static data. With the goal of exploring which factors have a higher relevance in predicting student performance, this post proposes the use of multiple linear regression and random forest approach to detect and analyse factors linked to academic performance.\n\nSpecifically, this post details the steps, packages, prototypes, including the detailed breakdown of codes used for UI and Server in R Shiny as part of the model building module in preparation for the final Shiny app.\n\n# 2 Loading Data and Packages\n\n## 2.1 Packages\n\nThe packages used as part of this exercise includes:\n\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+\n| Package                                                                                                                                                                                                                                                                                                                                                                                  | Description                                                         |\n+==========================================================================================================================================================================================================================================================================================================================================================================================+=====================================================================+\n| [**tidyverse**](https://www.tidyverse.org/)                                                                                                                                                                                                                                                                                                                                              | For data wrangling                                                  |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+\n| [**ggplot2**](https://ggplot2.tidyverse.org/)**, [patchwork](https://patchwork.data-imaginist.com/), [urbnthemes](https://urbaninstitute.github.io/urbnthemes/articles/introducing-urbnthemes.html)**                                                                                                                                                                                    | For creating plots                                                  |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+\n| [**reactable**](https://glin.github.io/reactable/)                                                                                                                                                                                                                                                                                                                                       | For dynamic data tables                                             |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+\n| [**ranger**](https://cran.r-project.org/web/packages/ranger/index.html), [**vip**](https://koalaverse.github.io/vip/articles/vip.html), [**rpart.plot**](https://cran.r-project.org/web/packages/rpart.plot/rpart.plot.pdf), [**caret**](https://topepo.github.io/caret/)**, [tidymodels](https://www.tidymodels.org/)**, [**gbm**](https://cran.r-project.org/web/packages/gbm/gbm.pdf) | For packages relating to modeling, regression, and machine learning |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+\n| [**performance**](https://easystats.github.io/performance/)                                                                                                                                                                                                                                                                                                                              | For assessment of regression models performance                     |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, \n               ggplot2, patchwork, urbnthemes, \n               reactable,\n               ranger, vip, rpart.plot, caret, tidymodels, gbm, \n               performance)\n```\n:::\n\n\n## 2.2 The PISA Survey Students Questionnaire\n\nThe code chunk below loads our dataset into R environment, in the form of a csv file created following minor data cleaning and wrangling documented [here](https://projectpisa.netlify.app/phase1/dataprep).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstu <- read_csv(\"data/stu_SG_rcd.csv\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6,606\nColumns: 25\n$ Loneliness         <chr> \"Disagree\", \"Disagree\", \"Disagree\", NA, \"Strongly D…\n$ ClassroomSafety    <chr> \"Agree\", \"Strongly Agree\", \"Agree\", \"Agree\", \"Stron…\n$ TeacherSupport     <chr> \"Most lesson\", \"Most lesson\", \"Most lesson\", \"Most …\n$ Gender             <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Female…\n$ Homework_Math      <chr> \"≤ 0.5hr\", \"1hr - 2hr\", \"0.5hr - 1hr\", \"1hr - 2hr\",…\n$ Homework_Reading   <chr> \"≤ 0.5hr\", \"0.5hr - 1hr\", \"1hr - 2hr\", \"≤ 0.5hr\", \"…\n$ Homework_Science   <chr> \"0.5hr - 1hr\", \"1hr - 2hr\", \"1hr - 2hr\", \"0.5hr - 1…\n$ SchoolType         <chr> \"Public\", \"Public\", \"Public\", \"Public\", \"Public\", \"…\n$ ParentsEducation   <chr> \"Tertiary\", \"Post-Secondary\", \"Secondary\", \"Post-Se…\n$ Immigration        <chr> \"Native\", \"Native\", \"Native\", \"Native\", \"Native\", \"…\n$ HomeLanguage       <chr> \"English\", \"English\", \"Others\", \"Others\", \"English\"…\n$ Sibling            <chr> \"≥3\", \"≥3\", \"1\", \"≥3\", \"≥3\", \"2\", \"1\", \"1\", \"2\", \"≥…\n$ Aircon             <chr> \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\"…\n$ Helper             <chr> \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Vehicle            <chr> \"1\", \"0\", \"1\", \"0\", \"1\", \"1\", \"1\", \"0\", \"2\", \"2\", \"…\n$ Books              <chr> \">500\", \"26 - 100\", \"26 - 100\", \"11 - 25\", \"1 - 10\"…\n$ Exercise           <dbl> 1, 4, 2, 5, 9, 1, 2, 0, 3, 5, 1, 2, 5, 2, 4, 0, 2, …\n$ OwnRoom            <chr> \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\",…\n$ FamilyCommitment   <dbl> 10, 2, 0, 10, 5, 5, 7, 0, 0, 4, 2, 2, 10, 0, 10, 0,…\n$ Preference_Math    <chr> \"Disagree\", \"Strongly Agree\", \"Agree\", \"Disagree\", …\n$ Preference_Reading <chr> \"Agree\", \"Agree\", \"Disagree\", \"Agree\", \"Strongly Ag…\n$ Preference_Science <chr> \"Agree\", \"Agree\", \"Agree\", \"Agree\", \"Strongly Agree…\n$ Math               <dbl> 605.2533, 689.9528, 676.7768, 401.0528, 436.1151, 5…\n$ Reading            <dbl> 667.4296, 627.6078, 582.9252, 361.3969, 475.6763, 4…\n$ Science            <dbl> 639.7873, 672.0703, 660.0384, 343.6425, 479.2390, 4…\n```\n:::\n:::\n\n\n# 3 Outline\n\nThe flowchart below details the features for this model building module.\n\n\n```{mermaid}\n%%| fig-width: 8\n%%| echo: false\n\nflowchart TD\n    C[Building Predictive Model]-.->C1[Decision Tree]\n    C-.-> C2[Random Forest]\n    C-.-> C3[Gradient Boosting]\n    C1-.->F[3. Visual Model Diagnostics]\n    C2-.->F\n    C3-.->F\n    F -->E[4. Statistical Model Evaluation]\n    E-->D[5. Variable Importance]\n```\n\n\n## 3.1 Storyboard\n\nAt the initial stage of the model building module, users would be able customise various options for each of the 3 predictive models offered.\n\n[**Decision Tree**]{.underline}\n\n![](images/dt.png){fig-align=\"center\"}\n\n[**Random Forest**]{.underline}\n\n![](images/rf.png){fig-align=\"center\"}\n\n[**Gradient Boosting**]{.underline}\n\n![](images/gb.png){fig-align=\"center\"}\n\nOptions for customisations are available on the left side of the app, these options are used to train the model. The right displays the performance of the model including model fit and variable importance, as well as the performance evaluation metrics using the model on the test data. We perform a detailed walkthrough of the interactivity and customisation features for each model, including descriptions of the SHINY UI and Server in Sections 5-7.\n\nBut first, in the subsequent parts of this section, we briefly outline the rationale behind visualisations and measurements.\n\n## 3.2 Visual Model Diagnostic\n\nAfter training the models, we can use it to predict scores for the test data we held back using `predict()`. Then we can compare these predictions to the actual values to evaluate how well (or not) the models are working. We can get a better indication by visualising a scatter plot that compares the predictions to the actual scores and residuals.\n\n1.  **Predicted vs Actual:** This is a scatter plot that helps you visualise the performance of a regression model. The x-axis represents the actual values, and the y-axis represents the predicted values. Ideally, if the predictions are perfect, the points will lie along a straight line with a slope of 1. We'll also overlay a trend line to get a general sense for how well the predicted values align with the true values.\n\n2.  **Residuals vs Actual:** A scatter plot of residuals (vertical axis) in function of the observed (horizontal axis) values of the dependent variable. For a \"perfect\" predictive model, we would expect the horizontal line at zero. For a \"good\" model, we would like to see a symmetric scatter of points around the horizontal line at zero, indicating random deviations of predictions from the observed values.\n\n## 3.3 Statistical Model Evaluation\n\nWe can quantify the residuals by calculating a number of commonly used evaluation metrics, with a focus on the following:\n\n-   Root Mean Square Error (RMSE): The square root of the MSE. This yields an absolute metric in the same unit as the response variable (in this case, scores). The smaller the value, the better the model (in a simplistic sense, it represents the average scores by which the predictions are wrong).\n\n-   $R^2$: describes the strength of a model fit. In essence, this metric represents how much of the variance between predicted and actual label values the model is able to explain.\n\n-   Mean Absolute Error (MAE): It is measured as the average absolute difference between the predicted values and the actual values and is used to assess the effectiveness of a regression model.\n\n\n::: {.cell}\n\n:::\n\n\n# 4 Model Building\n\nThe general outline of a predictive analysis is as follows:\n\n-   Test-train split the available data using `createDataPartition()`\n-   Specify possible tuning parameters for method using `expand.grid()`\n-   Use resampling to find the \"best model\" by choosing the values of the tuning parameters\n    -   `trainControl()` will specify the resampling scheme\n    -   `train()` is the workhorse of caret. It takes the following information then trains (tunes) the requested model:\n        -   `form`, a formula, such as `y ~ .`\n            -   This specifies the response and which predictors (or transformations of) should be used.\n        -   `data`, the data used for training\n        -   `trControl` which specifies the resampling scheme, that is, how cross-validation should be performed to find the best values of the tuning parameters\n        -   `preProcess` which allows for specification of data pre-processing such as centering and scaling\n        -   `method`, a statistical learning method from a long list of availible models\n    -   `tuneGrid` which specifies the tuning parameters to train over\n-   Use chosen model to make predictions using `predict()`\n\n## 4.1 Data Preparation for Regression\n\nTo train the model, we start with a data sample containing the independent/explanatory variables as well as known values for the subject scores. We'll then split this data sample into two subsets:\n\n-   A *training* dataset to which we'll apply an algorithm that determines a function encapsulating the relationship between the independent variables and the known $y$ values.\n\n-   A *test* dataset that we can use to evaluate the model by using it to generate predictions for the label and comparing them to the actual known $y$ values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Data for Model Building ##\n\n# Remove missing cases & convert variables to factor datatype our dataset\nstu <- stu %>% \n  na.omit() %>% \n  mutate(across(1:22, as.factor))\n\ndata <- stu %>% \n  dplyr::select(c(1:22, \"Math\")) #<< input$var, input$mb_target to change according to user selection\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the seed before splitting the data\nset.seed(1234)\n\n# Split the data into training and test\nindex <- createDataPartition(data$Math, #<< input$mb_target\n                             p = 0.8, #<< input$rf_partition\n                             list = FALSE) \n\ntraindata <- data[index, ]\ntestdata  <- data[-index, ]\n```\n:::\n\n\n+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+----------------------------------------------+\n| Function/Object                   | Feature                                                                                                                              | UI                                                                                                                    | Server                                       |\n+===================================+======================================================================================================================================+=======================================================================================================================+==============================================+\n| ***data*** **for model building** | Select subject                                                                                                                       | Within ***sidebarPanel***():                                                                                          | mb_data \\<- eventReactive(input\\$mb_action,\\ |\n|                                   |                                                                                                                                      |                                                                                                                       | {stu %\\>%\\                                   |\n|                                   |                                                                                                                                      | selectInput(\\                                                                                                         | select(input\\$mb_vars \\| mb_target)})        |\n|                                   |                                                                                                                                      | inputId = \"mb_target\",\\                                                                                               |                                              |\n|                                   |                                                                                                                                      | label = \"Subject\",\\                                                                                                   |                                              |\n|                                   |                                                                                                                                      | choices = c(\"Math\", \"Reading\", \"Science\")                                                                             |                                              |\n+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+----------------------------------------------+\n|                                   | Checkbox for variable selection; [**sortable**](https://rstudio.github.io/sortable/) package allows drag-and-drop to order variables | Within ***sidebarPanel***():                                                                                          | mb_data \\<- eventReactive(input\\$mb_action,\\ |\n|                                   |                                                                                                                                      |                                                                                                                       | {stu %\\>%\\                                   |\n|                                   |                                                                                                                                      | [***sortableCheckboxGroupInput***](https://yang-tang.github.io/shinyjqui/reference/sortableCheckboxGroupInput.html)(\\ | select(input\\$mb_vars \\| mb_target)})        |\n|                                   |                                                                                                                                      | inputId = \"mb_vars\",\\                                                                                                 |                                              |\n|                                   |                                                                                                                                      | label = \"Variables to show:\",\\                                                                                        |                                              |\n|                                   |                                                                                                                                      | choices = colnames(*stu*\\[,1:22\\]),\\                                                                                  |                                              |\n|                                   |                                                                                                                                      | selected = input\\$variables\\                                                                                          |                                              |\n|                                   |                                                                                                                                      | )                                                                                                                     |                                              |\n+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+----------------------------------------------+\n|                                   | Select partition size                                                                                                                | Within ***mainPanel***() \\> tabsetPanel() \\> ***sliderInput***(\\                                                      | mb_index \\<- eventReactive(\\                 |\n|                                   |                                                                                                                                      | inputId = \"mb_partition\",\\                                                                                            | input\\$mb_action, {\\                         |\n|                                   |                                                                                                                                      | label = \"Train-Test Partition Ratio:\",\\                                                                               | createDataPartition(\\                        |\n|                                   |                                                                                                                                      | min = 0.5,\\                                                                                                           | data()*\\[, input\\$mb_target\\]*,\\             |\n|                                   |                                                                                                                                      | max = 0.95,\\                                                                                                          | p = input\\$mb_partition,\\                    |\n|                                   |                                                                                                                                      | value = c(0.8)))                                                                                                      | list = FALSE)\\                               |\n|                                   |                                                                                                                                      |                                                                                                                       | })                                           |\n|                                   |                                                                                                                                      |                                                                                                                       |                                              |\n|                                   |                                                                                                                                      |                                                                                                                       | mb_traindata \\<- eventReactive(\\             |\n|                                   |                                                                                                                                      |                                                                                                                       | input\\$mb_action, {\\                         |\n|                                   |                                                                                                                                      |                                                                                                                       | data()\\[mb_index(),\\]\\                       |\n|                                   |                                                                                                                                      |                                                                                                                       | })                                           |\n|                                   |                                                                                                                                      |                                                                                                                       |                                              |\n|                                   |                                                                                                                                      |                                                                                                                       | mb_testdata \\<- eventReactive(\\              |\n|                                   |                                                                                                                                      |                                                                                                                       | input\\$mb_action, {\\                         |\n|                                   |                                                                                                                                      |                                                                                                                       | mb_dataset()\\[-mb_index(),\\]\\                |\n|                                   |                                                                                                                                      |                                                                                                                       | })                                           |\n+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+----------------------------------------------+\n\n# 5 Decision Tree\n\n## 5.1 The Model's First Run\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Specifying training choices ##\n\n# Resampling Options\ndt_fitcontrol <- trainControl(method = \"cv\", # input$dt_resamplingmethod\n                           number = 10, # input$dt_resamplecnt\n                           repeats = NA) # input$dt_repeats\n```\n:::\n\n\n-   `method`: Refers to the resampling method, such as `boot`, `cv` (cross validation), `repeatedcv`\n-   `number`: *K-fold*, the number of times resampling should be done for methods that require resample eg `cv` and `boost`\n-   `repeats`: Applies only to repeated *K-fold* cross-validation. Suppose that `method = \"repeatedcv\"`, `number = 10` and `repeats = 3`, then three separate 10-fold cross-validations are used as the resampling scheme.\n\nThe decision tree has two adjustable parameters: complexity parameter (*CP*) and tune length (*TL*). CP tells the algorithm to stop when the measure does not improve by this factor. TL tells how many instances to use for training. I'll let the model look for the best CP tuning parameter with `tuneLength` to get close using the initial model, then fine-tune with `tuneGrid` at a later stage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndtmodel <- train(Math ~ ., \n                 data = traindata,\n                 method = \"rpart\",\n                 tuneLength = 4, #input$dt_tunelength\n                 trControl = dt_fitcontrol\n)\n\ndtmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCART \n\n4128 samples\n  22 predictor\n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 3716, 3715, 3715, 3715, 3714, 3715, ... \nResampling results across tuning parameters:\n\n  cp          RMSE      Rsquared    MAE     \n  0.01850079  93.47881  0.10840404  75.55322\n  0.02168293  94.03535  0.09713273  76.17916\n  0.02170645  94.03535  0.09713273  76.17916\n  0.07902291  97.76751  0.05523462  79.69776\n\nRMSE was used to select the optimal model using the smallest value.\nThe final value used for the model was cp = 0.01850079.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrpart.plot(dtmodel$finalModel,\n           box.palette=\"GnBu\",\n           branch.lty=3, \n           shadow.col=\"gray\", \n           nn=TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThe boxes show the node predicted value (mean) and the proportion of observations that are in the node (or child nodes).\n\n+--------------------+---------------------------------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| Function           | Feature                                                                         | UI                                                                             | Server                                                                      |\n+====================+=================================================================================+================================================================================+=============================================================================+\n| **trainControl()** | Select resampling method, resampling count and repeat.                          | numericInput(inputId = \"dt_cvkfold_number\",\\                                   | Within ***mainPanel***() \\> tabsetPanel() \\>\\                               |\n|                    |                                                                                 | label = \"K-fold:\",\\                                                            |                                                                             |\n|                    |                                                                                 | min = 3,\\                                                                      | [For Cross Validation]{.underline}\\                                         |\n|                    |                                                                                 | max = 50,\\                                                                     | dt_resamplecv_kfoldnum \\<- eventReactive(input\\$mb_action, {\\               |\n|                    |                                                                                 | value = 10)                                                                    | trainControl(\\                                                              |\n|                    |                                                                                 |                                                                                | method = \"cv\",\\                                                             |\n|                    |                                                                                 | numericInput(inputId = \"dt_repeatkfold_number\",\\                               | number = input\\$dt_cvkfold_number)\\                                         |\n|                    |                                                                                 | label = \"K-fold:\",\\                                                            | })                                                                          |\n|                    |                                                                                 | min = 3,\\                                                                      |                                                                             |\n|                    |                                                                                 | max = 50,\\                                                                     | [For Repeated Cross Validation\\                                             |\n|                    |                                                                                 | value = 10)                                                                    | ]{.underline}dt_resamplercv_kfoldnum \\<- eventReactive(input\\$mb_action, {\\ |\n|                    |                                                                                 |                                                                                | trainControl(\\                                                              |\n|                    |                                                                                 | numericInput(inputId = \"dt_repeatkfold_repeat\", label = \"Number of Repeats:\",\\ | method = \"cv\",\\                                                             |\n|                    |                                                                                 | min = 3,\\                                                                      | number = input\\$dt_repeatkfold_number)\\                                     |\n|                    |                                                                                 | max = 10,\\                                                                     | })                                                                          |\n|                    |                                                                                 | value = 3)                                                                     |                                                                             |\n|                    |                                                                                 |                                                                                | dt_repeatnum \\<- eventReactive(\\                                            |\n|                    |                                                                                 |                                                                                | input\\$mb_action, {\\                                                        |\n|                    |                                                                                 |                                                                                | trainControl(\\                                                              |\n|                    |                                                                                 |                                                                                | method = \"repeatedcv\",\\                                                     |\n|                    |                                                                                 |                                                                                | number = input\\$dt_repeatkfold_number,\\                                     |\n|                    |                                                                                 |                                                                                | repeats = input\\$dt_repeatkfold_repeat)\\                                    |\n|                    |                                                                                 |                                                                                | })                                                                          |\n+--------------------+---------------------------------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| **train()**        | Set initial tune length                                                         | numericInput(inputId = \"dt_tunelength\", label = \"Set Initial Tune Length:\",\\   | dtmodel \\<- eventReactive(\\                                                 |\n|                    |                                                                                 | min = 2,\\                                                                      | train(Math \\~ .,\\                                                           |\n|                    |                                                                                 | max = 10,\\                                                                     | data = mb_traindata,\\                                                       |\n|                    |                                                                                 | value = 4)                                                                     | method = \"rpart\",\\                                                          |\n|                    |                                                                                 |                                                                                | tuneLength = input\\$dt_tunelength\\                                          |\n|                    |                                                                                 |                                                                                | trControl = dt_fitcontrol\\                                                  |\n|                    |                                                                                 |                                                                                | )                                                                           |\n+--------------------+---------------------------------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| **rpart.plotO**    | Show plots when selections are completed and 'Build Model' option is triggered. | plotOutput(\"dt_rpartplot\")                                                     | dt_rpartplot \\<- eventReactive(\\                                            |\n|                    |                                                                                 |                                                                                | input\\$mb_action, {\\                                                        |\n|                    |                                                                                 |                                                                                | *rpart.plot()\\                                                              |\n|                    |                                                                                 |                                                                                | *})\\                                                                        |\n|                    |                                                                                 |                                                                                | \\                                                                           |\n|                    |                                                                                 |                                                                                | output\\$dt_rpartplot \\<-\\                                                   |\n|                    |                                                                                 |                                                                                | renderPlot({\\                                                               |\n|                    |                                                                                 |                                                                                | dt_rpartplot\\                                                               |\n|                    |                                                                                 |                                                                                | })                                                                          |\n+--------------------+---------------------------------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[10,20,35,35\\]\"}\n\n## 5.2 Visual Model Diagnostics\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_dt <- bind_cols(\n   Actual = testdata$Math, \n   Predicted = predict(dtmodel, newdata = testdata),\n   Residuals = predict(dtmodel, newdata = testdata) - testdata$Math\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_predvsactual <- \n   ggplot(data = predict_dt,\n          aes(x = Actual, y = Predicted)) +\n   geom_point(alpha = 0.2, color = \"grey40\") +\n   geom_smooth(method = \"loess\", formula = \"y ~ x\", color=\"#dfb2e9\") +\n   geom_abline(intercept = 0, slope = 1, linetype = 2, color = \"#20948b\", size = 0.8) +\n   labs(title = \"Predicted vs Actual\") +\n   theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\ndt_residvsactual <- \n   ggplot(data = predict_dt,\n          aes(x = Actual, y = Residuals)) +\n   geom_point(alpha = 0.2, color = \"grey40\") +\n   geom_smooth(method = \"loess\", formula = \"y ~ x\", color=\"#dfb2e9\") +\n   geom_hline(yintercept = 0, linetype = 2, color = \"#20948b\", size = 0.8) +\n   labs(title = \"Residuals vs Predicted\") +\n   theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\ndt_predvsactual + dt_residvsactual + \n  plot_layout(guides = \"collect\") +\n  plot_layout(widths=c(1,1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n+----------------------+----------------------------------------------------------------------------------------------+------------------------------------+--------------------------------------------------------------------+\n| Function             | Feature                                                                                      | UI                                 | Server                                                             |\n+======================+==============================================================================================+====================================+====================================================================+\n| **predict()**        | Option to allow users to choose if they want to visualise results using train or test data.\\ | radioButtons(\\                     | predictdt_model \\<- eventReactive(\\                                |\n|                      | \\                                                                                            | inputId = \"traintest\",\\            | *input\\$mb_action*, {\\                                             |\n|                      | Predict data when selections are completed and 'Build Model' option is triggered.            | label = \"Display Results Using:\",\\ | predict(*dtmodel()*,\\                                              |\n|                      |                                                                                              | choices = c(\"Train\", \"Test\"),\\     | newdata = if (input\\$*traintest* == \"Test\", { *testdata()* }*,\\    |\n|                      |                                                                                              | selected = \"Test\"))                | else { traindata() }*)\\                                            |\n|                      |                                                                                              |                                    | })                                                                 |\n+----------------------+----------------------------------------------------------------------------------------------+------------------------------------+--------------------------------------------------------------------+\n| **bind_cols**        | Creating a new dataframe containing actual, predicted, and residuals for visualisation.      | \\-                                 | predict_dt \\<- eventReactive(\\                                     |\n|                      |                                                                                              |                                    | input\\$mb_action, {\\                                               |\n|                      |                                                                                              |                                    | Actual = *testdata()\\$input\\$mb_target*,\\                          |\n|                      |                                                                                              |                                    | Predicted = *predictdt_model()*,\\                                  |\n|                      |                                                                                              |                                    | Residuals = *predictdt_model()* - *testdata()\\$input\\$mb_target*)\\ |\n|                      |                                                                                              |                                    | })                                                                 |\n+----------------------+----------------------------------------------------------------------------------------------+------------------------------------+--------------------------------------------------------------------+\n| **Diagnostic plots** | Refresh plots when selections are completed and 'Build Model' option is triggered.           | tabbox() \\> tabPanel() \\>\\         | [Plot Predicted vs Actual\\                                         |\n|                      |                                                                                              | plotOutput(\"dt_predvsactual\\_\")\\   | ]{.underline}dt_predvsactual \\<- eventReactive(\\                   |\n|                      |                                                                                              | \\                                  | input\\$mb_action, {\\                                               |\n|                      |                                                                                              | tabPanel() \\>\\                     | *ggplot(...)\\                                                      |\n|                      |                                                                                              | plotOutput(\"dt_residvsactual\\_\")   | *})\\                                                               |\n|                      |                                                                                              |                                    | \\                                                                  |\n|                      |                                                                                              |                                    | output\\$dt_predvsactual\\_ \\<-\\                                     |\n|                      |                                                                                              |                                    | renderPlot({\\                                                      |\n|                      |                                                                                              |                                    | dt_predvsactual\\                                                   |\n|                      |                                                                                              |                                    | })                                                                 |\n|                      |                                                                                              |                                    |                                                                    |\n|                      |                                                                                              |                                    | [Plot Residuals vs Actual]{.underline}                             |\n|                      |                                                                                              |                                    |                                                                    |\n|                      |                                                                                              |                                    | dt_residvsactual \\<- eventReactive(\\                               |\n|                      |                                                                                              |                                    | input\\$dt_action, {\\                                               |\n|                      |                                                                                              |                                    | *ggplot(...)\\                                                      |\n|                      |                                                                                              |                                    | *})\\                                                               |\n|                      |                                                                                              |                                    | \\                                                                  |\n|                      |                                                                                              |                                    | output\\$dt_residvsactual\\_ \\<-\\                                    |\n|                      |                                                                                              |                                    | renderPlot({\\                                                      |\n|                      |                                                                                              |                                    | dt_residvsactual})                                                 |\n+----------------------+----------------------------------------------------------------------------------------------+------------------------------------+--------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[10,20,35,35\\]\"}\n\n## 5.3 Statistical Model Evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_rmse <- RMSE(pred = predict_dt$Predicted, obs = predict_dt$Actual)\ndt_rsq <- R2(pred = predict_dt$Predicted, obs = predict_dt$Actual)\ndt_mae <- MAE(pred = predict_dt$Predicted, obs = predict_dt$Actual)\n\ndt_rmse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90.52466\n```\n:::\n\n```{.r .cell-code}\ndt_rsq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1319645\n```\n:::\n\n```{.r .cell-code}\ndt_mae\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 73.3128\n```\n:::\n:::\n\n\n+---------------+--------------------------------------------------------------------------------------------------------------------+---------------------------------------------+-----------------------------------------------------------------+\n| **Function**  | **Function**                                                                                                       | **UI**                                      | **Server**                                                      |\n+---------------+--------------------------------------------------------------------------------------------------------------------+---------------------------------------------+-----------------------------------------------------------------+\n| **predict()** | Test data results to be updated when response and explanatory variables are selected and 'Build Model' is clicked. |                                             | [Calculate RMSE]{.underline}                                    |\n|               |                                                                                                                    |                                             |                                                                 |\n|               |                                                                                                                    |                                             | predict_dt \\<- eventReactive(\\                                  |\n|               |                                                                                                                    |                                             | input\\$mb_action, {\\                                            |\n|               |                                                                                                                    |                                             | bind_cols(\\                                                     |\n|               |                                                                                                                    |                                             | Actual = stu_test_rf*()\\$input\\$mb_target*,\\                    |\n|               |                                                                                                                    |                                             | Predicted = predict(*stu_rf()*,\\                                |\n|               |                                                                                                                    |                                             | newdata = *stu_test_rf()*), Residuals = predict(*stu_rf()*,\\    |\n|               |                                                                                                                    |                                             | newdata = *stu_test_rf()* - *stu_test_rf()\\$input\\$mb_target*)\\ |\n|               |                                                                                                                    |                                             | })                                                              |\n|               |                                                                                                                    |                                             |                                                                 |\n|               |                                                                                                                    |                                             | predict_rf_rmse \\<- eventReactive(\\                             |\n|               |                                                                                                                    |                                             | input\\$mb_action, { caret::RMSE(\\                               |\n|               |                                                                                                                    |                                             | pred = *predict_dt()\\$Predicted*,\\                              |\n|               |                                                                                                                    |                                             | obs = *predict_dt()\\$Actual*)\\                                  |\n|               |                                                                                                                    |                                             | })                                                              |\n+---------------+--------------------------------------------------------------------------------------------------------------------+---------------------------------------------+-----------------------------------------------------------------+\n| **RMSE()**    | Metrics displayed to be updated when response and explanatory variables are selected and 'Build Model' is clicked. | Within mainPanel():                         | [Display results, eg RMSE]{.underline}                          |\n|               |                                                                                                                    |                                             |                                                                 |\n|               |                                                                                                                    | fluidRow( div(\\                             | rf_display_RMSE = function(){\\                                  |\n|               |                                                                                                                    | ***valueBoxOutput***(\"dt_rmse\", width = 3)) | output\\$dt_rmse = ***renderValueBox***(\\                        |\n|               |                                                                                                                    |                                             | valueBox(\\                                                      |\n|               |                                                                                                                    |                                             | value = *predict_dt_rmse()*)\\                                   |\n|               |                                                                                                                    |                                             | )}                                                              |\n|               |                                                                                                                    |                                             |                                                                 |\n|               |                                                                                                                    |                                             | observeEvent(input\\$mb_action, *dt_display_RMSE()*)             |\n+---------------+--------------------------------------------------------------------------------------------------------------------+---------------------------------------------+-----------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[10,20,35,35\\]\"}\n\n## 5.4 Parameter Tuning\n\n### 5.4.1 Complexity Parameter\n\nUpon receiving the results of our initial decision tree model, user can further refine the model based on the complexity parameter plot. Diagnosis plots, tree visualisation, statistical results should be updated based on the revised model.\n\nTo prune a tree, we want the cp value (with a simpler tree) that minimises the xerror.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtmodel$bestTune\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          cp\n1 0.01850079\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f5f5f5\")\n\ndt_cp_plot <- plot(dtmodel)\ndt_cp_plot\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n+-----------------------+---------------------------------------------------------------------------------+---------------------------------------------------------+-----------------------------------------------------------------------+\n| Function              | Feature                                                                         | UI                                                      | Server                                                                |\n+=======================+=================================================================================+=========================================================+=======================================================================+\n| **rpart.plotO**       | Show plots when selections are completed and 'Build Model' option is triggered. | plotOutput(\"dt_cp_plot\\_\")                              | dt_cp_plot\\<- eventReactive(\\                                         |\n|                       |                                                                                 |                                                         | input\\$mb_action, {\\                                                  |\n|                       |                                                                                 |                                                         | *plot(dtmodel())\\                                                     |\n|                       |                                                                                 |                                                         | *})\\                                                                  |\n|                       |                                                                                 |                                                         | \\                                                                     |\n|                       |                                                                                 |                                                         | output\\$dt_cp_plot\\_\\<-\\                                              |\n|                       |                                                                                 |                                                         | renderPlot({\\                                                         |\n|                       |                                                                                 |                                                         | dt_cp_plot()\\                                                         |\n|                       |                                                                                 |                                                         | })                                                                    |\n+-----------------------+---------------------------------------------------------------------------------+---------------------------------------------------------+-----------------------------------------------------------------------+\n| **dtmodel\\$bestTune** | Display the best CP value                                                       | fluidRow(\\                                              | [Calculate bestTune]{.underline}\\                                     |\n|                       |                                                                                 | div(\\                                                   | dt_bestTune \\<- eventReactive(input\\$mb_action, {*dtmode()\\$bestTune\\ |\n|                       |                                                                                 | ***valueBoxOutput***(\"dt_display_bestTune\", width = 3)) | *})\\                                                                  |\n|                       |                                                                                 |                                                         | \\                                                                     |\n|                       |                                                                                 |                                                         | [Display bestTune]{.underline}\\                                       |\n|                       |                                                                                 |                                                         | rf_display_bestTune = function(){\\                                    |\n|                       |                                                                                 |                                                         | output\\$dt_bestTune\\_ = ***renderValueBox***(\\                        |\n|                       |                                                                                 |                                                         | valueBox(\\                                                            |\n|                       |                                                                                 |                                                         | value = *dt_bestTune()*)\\                                             |\n|                       |                                                                                 |                                                         | )}                                                                    |\n|                       |                                                                                 |                                                         |                                                                       |\n|                       |                                                                                 |                                                         | observeEvent(input\\$mb_action, *dt_display_bestTune()*)               |\n+-----------------------+---------------------------------------------------------------------------------+---------------------------------------------------------+-----------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[10,20,35,35\\]\"}\n\n### 5.4.2 Refreshing Results\n\nRather than overwriting the previous results using the same set of codes, the pruned model uses a separate set of codes as the model below uses `tuneGrid` instead of the initial `tuneLength` for calibration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndtmodel_pruned <- train(Math ~ ., \n                 data = traindata,\n                 method = \"rpart\",\n                 tuneGrid = expand.grid(cp = seq(from = 0.01, to = 0.02, by = 0.001)), #input$dt_cp\n                 trControl = dt_fitcontrol\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrpart.plot(dtmodel_pruned$finalModel,\n           box.palette=\"GnBu\",\n           branch.lty=3, \n           shadow.col=\"gray\", \n           nn=TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_dtpruned <- bind_cols(\n   Actual = testdata$Math, \n   Predicted = predict(dtmodel_pruned, newdata = testdata),\n   Residuals = predict(dtmodel_pruned, newdata = testdata) - testdata$Math\n)\n\ndtpruned_rmse <- RMSE(pred = predict_dtpruned$Predicted, obs = predict_dtpruned$Actual)\ndtpruned_rsq <- R2(pred = predict_dtpruned$Predicted, obs = predict_dtpruned$Actual)\ndtpruned_mae <- MAE(pred = predict_dtpruned$Predicted, obs = predict_dtpruned$Actual)\n\ndtpruned_rmse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 88.95871\n```\n:::\n\n```{.r .cell-code}\ndtpruned_rsq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1620932\n```\n:::\n\n```{.r .cell-code}\ndtpruned_mae\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72.37935\n```\n:::\n:::\n\n\n# 6 Random Forest\n\n## 6.1 The Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Specifying training choices ##\n\n# Set seed\nset.seed(1234)\n\n\n# Resampling Options\nrf_fitcontrol <- trainControl(method = \"cv\", # input$rf_resamplingmethod\n                           number = 5, # input$rf_resamplecnt\n                           repeats = NA)  # input$rf_repeats\n```\n:::\n\n\nThis model has 3 tuning parameters:\n\n-   `mtry`: gives the number of variables randomly sampled at each split, defaulted as the (rounded-down) value of the square-root of the number of predictors\n-   `splitrule`: Splitting rule.\n-   `min_n`: Minimum node size. Controls the complexity of the trees. Smaller node size allows for deeper, more complex trees and smaller node results in shallower trees. This is another bias-vairnace tradeoff where deeper trees introduce more vairance (risk of overfitting) and shallower trees introduce more bias (risk of not fully capturing unique patterns and relationsips in the data).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Tuning Parameters ##\n\ntgrid <- expand.grid(\n  mtry = sqrt(ncol(traindata)),\n  splitrule = \"variance\", # input$rf_splitrule: \"variance\", \"extratrees\", \"maxstat\" or \"beta\" with default \"variance\" for regression\n  min.node.size = 10 # input$rf_minnodesize: Default 5 for regression\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrfmodel <- train(form = Math ~ .,\n                 data = traindata,\n                 method = \"ranger\",\n                 trControl = rf_fitcontrol,\n                 num.trees = 50, # input$treenum\n                 importance = \"permutation\", # input$rf_varimpmode: none, impurity, permutation\n                 local.importance = TRUE,\n                 tuneGrid = tgrid\n                 )\n\n\nrfmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest \n\n4128 samples\n  22 predictor\n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 3302, 3302, 3302, 3303, 3303 \nResampling results:\n\n  RMSE      Rsquared   MAE     \n  81.51302  0.3702309  65.88471\n\nTuning parameter 'mtry' was held constant at a value of 4.795832\n\nTuning parameter 'splitrule' was held constant at a value of variance\n\nTuning parameter 'min.node.size' was held constant at a value of 10\n```\n:::\n:::\n\n\n+--------------------+--------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| Function           | Feature                                                | UI                                                                             | Server                                                                      |\n+====================+========================================================+================================================================================+=============================================================================+\n| **trainControl()** | Select resampling method, resampling count and repeat. | numericInput(inputId = \"rf_cvkfold_number\",\\                                   | Within ***mainPanel***() \\> tabsetPanel() \\>                                |\n|                    |                                                        | label = \"K-fold:\",\\                                                            |                                                                             |\n|                    |                                                        | min = 3,\\                                                                      | [For Cross Validation]{.underline}\\                                         |\n|                    |                                                        | max = 50,\\                                                                     | rf_resamplecv_kfoldnum \\<- eventReactive(input\\$mb_action, {\\               |\n|                    |                                                        | value = 10)                                                                    | trainControl(\\                                                              |\n|                    |                                                        |                                                                                | method = \"cv\",\\                                                             |\n|                    |                                                        | numericInput(inputId = \"rf_repeatkfold_number\",\\                               | number = input\\$rf_cvkfold_number)\\                                         |\n|                    |                                                        | label = \"K-fold:\",\\                                                            | })                                                                          |\n|                    |                                                        | min = 3,\\                                                                      |                                                                             |\n|                    |                                                        | max = 50,\\                                                                     | [For Repeated Cross Validation\\                                             |\n|                    |                                                        | value = 10)                                                                    | ]{.underline}rf_resamplercv_kfoldnum \\<- eventReactive(input\\$mb_action, {\\ |\n|                    |                                                        |                                                                                | trainControl(\\                                                              |\n|                    |                                                        | numericInput(inputId = \"rf_repeatkfold_repeat\", label = \"Number of Repeats:\",\\ | method = \"cv\",\\                                                             |\n|                    |                                                        | min = 3,\\                                                                      | number = input\\$rf_repeatkfold_number)\\                                     |\n|                    |                                                        | max = 10,\\                                                                     | })                                                                          |\n|                    |                                                        | value = 3)                                                                     |                                                                             |\n|                    |                                                        |                                                                                | rf_repeatnum \\<- eventReactive(\\                                            |\n|                    |                                                        |                                                                                | input\\$mb_action, {\\                                                        |\n|                    |                                                        |                                                                                | trainControl(\\                                                              |\n|                    |                                                        |                                                                                | method = \"repeatedcv\",\\                                                     |\n|                    |                                                        |                                                                                | number = input\\$rf_repeatkfold_number,\\                                     |\n|                    |                                                        |                                                                                | repeats = input\\$dt_repeatkfold_repeat)\\                                    |\n|                    |                                                        |                                                                                | })                                                                          |\n+--------------------+--------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| **expand.grid()**  | Select split rule                                      | selectInput(inputId = \"rf_splitrule\\_\",\\                                       | tgrid \\<- eventReaction(input\\$mb_action, {\\                                |\n|                    |                                                        | label = \"Select Split Rule:\",\\                                                 | expand.grid(\\                                                               |\n|                    |                                                        | choices = c(\"Variance\" = \"variance\",\\                                          | mtry = sqrt(ncol(traindata)),\\                                              |\n|                    |                                                        | \"Extra Trees\" = \"extratrees\",\\                                                 | splitrule = *input\\$rf_splitrule*.\\                                         |\n|                    |                                                        | \"Max Stat\" = \"maxstat\")                                                        | min.node.size = *input\\$rf_minnodesize*)}                                   |\n|                    |                                                        |                                                                                |                                                                             |\n|                    |                                                        | sliderInput(inputId = \"rf_minnodesize\", label = \"Minimum Node Size:\",\\         |                                                                             |\n|                    |                                                        | min = 2,\\                                                                      |                                                                             |\n|                    |                                                        | max = 50,\\                                                                     |                                                                             |\n|                    |                                                        | value = 5),                                                                    |                                                                             |\n+--------------------+--------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| **train()**        | Select number of trees and variable importance         | sliderInput(inputId = \"rf_tree_num\\_\",\\                                        | rfmodel \\<- eventReactive(\\                                                 |\n|                    |                                                        | label = \"Number of Trees:\",\\                                                   | input\\$mb_action, {\\                                                        |\n|                    |                                                        | min = 5,\\                                                                      | train(form = Math \\~ .,\\                                                    |\n|                    |                                                        | max = 500,\\                                                                    | data = traindata(),\\                                                        |\n|                    |                                                        | value = 50)                                                                    | method = \"ranger\",\\                                                         |\n|                    |                                                        |                                                                                | trControl = fitcontrol(),\\                                                  |\n|                    |                                                        | radioButtons(inputId = \"rf_varimpmode\\_\",\\                                     | num.trees = *input\\$rf_tree_num,*\\                                          |\n|                    |                                                        | label = \"Variable Importance Measure:\",\\                                       | importance =\\                                                               |\n|                    |                                                        | choices = c(\"Gini Importance\" = \"impurity\",\\                                   | *input\\$rf_varimpmode*,\\                                                    |\n|                    |                                                        | \"Permutation Importance\" = \"permutation\"),selected = \"impurity\"))              | tuneGrid = *tgrid()*)\\                                                      |\n|                    |                                                        |                                                                                | })                                                                          |\n+--------------------+--------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[10,20,35,35\\]\"}\n\n## 6.2 Visual Model Diagnostic\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrfmodel$bestTune\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mtry splitrule min.node.size\n1 4.795832  variance            10\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_rf <- bind_cols(\n   Actual = testdata$Math, \n   Predicted = predict(rfmodel, newdata = testdata),\n   Residuals = predict(rfmodel, newdata = testdata) - testdata$Math\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_predvsactual <- \n   ggplot(data = predict_rf,\n          aes(x = Actual, y = Predicted)) +\n   geom_point(alpha = 0.2, color = \"grey40\") +\n   geom_smooth(method = \"loess\", formula = \"y ~ x\", color=\"#dfb2e9\") +\n   geom_abline(intercept = 0, slope = 1, linetype = 2, color = \"#20948b\", size = 0.8) +\n   labs(title = \"Predicted vs Actual\") +\n   theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\nrf_residvsactual <- \n   ggplot(data = predict_rf,\n          aes(x = Actual, y = Residuals)) +\n   geom_point(alpha = 0.2, color = \"grey40\") +\n   geom_smooth(method = \"loess\", formula = \"y ~ x\", color=\"#dfb2e9\") +\n   geom_hline(yintercept = 0, linetype = 2, color = \"#20948b\", size = 0.8) +\n   labs(title = \"Residuals vs Predicted\") +\n   theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\nrf_predvsactual + rf_residvsactual +\n  plot_layout(guides = \"collect\") +\n  plot_layout(widths=c(1,1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## 6.3 Statistical Model Evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_rmse <- RMSE(pred = predict_rf$Predicted, obs = predict_rf$Actual)\nrf_rsq <- R2(pred = predict_rf$Predicted, obs = predict_rf$Actual)\nrf_mae <- MAE(pred = predict_rf$Predicted, obs = predict_rf$Actual)\n\nrf_rmse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 79.73068\n```\n:::\n\n```{.r .cell-code}\nrf_rsq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3649717\n```\n:::\n\n```{.r .cell-code}\nrf_mae\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 64.68923\n```\n:::\n:::\n\n\n## 6.4 Variable Importance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvip::vip(rfmodel, num_features = 40, bar = FALSE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n+------------------------+----------------------------------------------------------------------------------------------------+--------------------------------+-----------------------------------+\n| Function               | Feature                                                                                            | UI                             | Server                            |\n+========================+====================================================================================================+================================+===================================+\n| **plot(vip(rfmodel))** | Show variable importance plot when selections are completed and 'Build Model' option is triggered. | plotOutput(\"rf_varimp_plot\\_\") | rf_varimp_plot\\<- eventReactive(\\ |\n|                        |                                                                                                    |                                | input\\$mb_action, {\\              |\n|                        |                                                                                                    |                                | *plot(vip(rfmodel()))\\            |\n|                        |                                                                                                    |                                | *})\\                              |\n|                        |                                                                                                    |                                | \\                                 |\n|                        |                                                                                                    |                                | output\\$rf_varimp_plot\\_\\<-\\      |\n|                        |                                                                                                    |                                | renderPlot({\\                     |\n|                        |                                                                                                    |                                | rf_varimp_plot\\_()\\               |\n|                        |                                                                                                    |                                | })                                |\n+------------------------+----------------------------------------------------------------------------------------------------+--------------------------------+-----------------------------------+\n\n: {tbl-colwidths=\"\\[10,20,35,35\\]\"}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n# 7 Gradient Boosting\n\n## 7.1 The Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Specifying training choices ##\n\n# Resampling Options\ngb_fitcontrol <- trainControl(method = \"cv\", # input$gb_resamplingmethod - \n                           number = 5, # input$gb_resamplecnt\n                           repeats = NA) # input$gb_repeats\n\n# Tuning Grid\ngbm_grid <- expand.grid(interaction.depth = c(1:3), \n                       n.trees = (1:30) * 10, #input$gb_treenumrange\n                       shrinkage = c(0.01,0.05,0.1), #input$gb_shrinkage\n                       n.minobsinnode = 20) #input$gb_minnodesize\n```\n:::\n\n\n`gbm` has the following tuneable hyperparameters:\n\n-   `n.trees`: number of boosting iterations\n\n-   `interaction.depth`: maximum tree depth\n\n-   `shrinkage`: the learning rate or shrinkage parameter\n\n-   `n.minobsinnode`: minimum terminal node size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngbmodel <- train(Math ~ .,\n                 data = traindata,\n                 trControl = gb_fitcontrol,\n                 method = \"gbm\",\n                 #tuneLength = 5,\n                 verbose = FALSE,\n                 tuneGrid = gbm_grid)\n\ngbmodel                 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStochastic Gradient Boosting \n\n4128 samples\n  22 predictor\n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 3302, 3302, 3302, 3303, 3303 \nResampling results across tuning parameters:\n\n  shrinkage  interaction.depth  n.trees  RMSE      Rsquared    MAE     \n  0.01       1                   10      98.07437  0.08807327  80.10251\n  0.01       1                   20      97.47337  0.09837644  79.60063\n  0.01       1                   30      96.95464  0.11240227  79.15383\n  0.01       1                   40      96.47760  0.12387731  78.74312\n  0.01       1                   50      96.05209  0.12941446  78.37400\n  0.01       1                   60      95.66458  0.13854867  78.03350\n  0.01       1                   70      95.27882  0.14782104  77.70261\n  0.01       1                   80      94.91735  0.15469400  77.40343\n  0.01       1                   90      94.57435  0.16277897  77.10424\n  0.01       1                  100      94.25871  0.17163798  76.83391\n  0.01       1                  110      93.94660  0.17928220  76.56867\n  0.01       1                  120      93.63760  0.18580648  76.31046\n  0.01       1                  130      93.34836  0.19275638  76.06107\n  0.01       1                  140      93.07684  0.19898002  75.82486\n  0.01       1                  150      92.81228  0.20337459  75.58922\n  0.01       1                  160      92.54999  0.20790547  75.37088\n  0.01       1                  170      92.29821  0.21127670  75.15427\n  0.01       1                  180      92.05088  0.21552821  74.94150\n  0.01       1                  190      91.80570  0.21870589  74.72731\n  0.01       1                  200      91.57332  0.22275672  74.52781\n  0.01       1                  210      91.34174  0.22665841  74.33075\n  0.01       1                  220      91.12777  0.23003506  74.14185\n  0.01       1                  230      90.90290  0.23440175  73.96480\n  0.01       1                  240      90.68914  0.23788453  73.78525\n  0.01       1                  250      90.48454  0.24116808  73.61419\n  0.01       1                  260      90.28870  0.24445253  73.44199\n  0.01       1                  270      90.09323  0.24722753  73.26827\n  0.01       1                  280      89.89734  0.25062649  73.10342\n  0.01       1                  290      89.70812  0.25332527  72.94930\n  0.01       1                  300      89.51855  0.25622314  72.78415\n  0.01       2                   10      97.85408  0.12506935  79.92329\n  0.01       2                   20      97.03806  0.13678664  79.24364\n  0.01       2                   30      96.29675  0.15368410  78.61501\n  0.01       2                   40      95.60733  0.16195956  78.01551\n  0.01       2                   50      94.96305  0.17388729  77.45499\n  0.01       2                   60      94.36754  0.18596794  76.93899\n  0.01       2                   70      93.80114  0.19521061  76.44077\n  0.01       2                   80      93.26322  0.20580554  75.97575\n  0.01       2                   90      92.75095  0.21486261  75.53792\n  0.01       2                  100      92.27297  0.22078182  75.11798\n  0.01       2                  110      91.80668  0.22982514  74.72519\n  0.01       2                  120      91.38660  0.23609634  74.36417\n  0.01       2                  130      90.97806  0.24282204  74.01753\n  0.01       2                  140      90.57978  0.24950864  73.67478\n  0.01       2                  150      90.20610  0.25581321  73.35255\n  0.01       2                  160      89.82500  0.26164640  73.02039\n  0.01       2                  170      89.47598  0.26616059  72.72208\n  0.01       2                  180      89.14603  0.27126257  72.43282\n  0.01       2                  190      88.80890  0.27465231  72.14420\n  0.01       2                  200      88.48956  0.27919360  71.87116\n  0.01       2                  210      88.18930  0.28253957  71.60932\n  0.01       2                  220      87.88918  0.28645385  71.34393\n  0.01       2                  230      87.60511  0.28989493  71.08759\n  0.01       2                  240      87.31776  0.29384077  70.83851\n  0.01       2                  250      87.03824  0.29753661  70.59798\n  0.01       2                  260      86.76807  0.30095767  70.35736\n  0.01       2                  270      86.53175  0.30319152  70.14746\n  0.01       2                  280      86.27476  0.30638862  69.93033\n  0.01       2                  290      86.04242  0.30874301  69.73613\n  0.01       2                  300      85.80870  0.31149532  69.53281\n  0.01       3                   10      97.65289  0.14960096  79.74603\n  0.01       3                   20      96.64265  0.16807110  78.89666\n  0.01       3                   30      95.73026  0.18150324  78.11568\n  0.01       3                   40      94.88177  0.19382676  77.39182\n  0.01       3                   50      94.09136  0.20645447  76.70890\n  0.01       3                   60      93.35374  0.21779972  76.08925\n  0.01       3                   70      92.65442  0.22870970  75.48126\n  0.01       3                   80      91.99956  0.23804060  74.91808\n  0.01       3                   90      91.42811  0.24615966  74.41347\n  0.01       3                  100      90.83450  0.25505722  73.91413\n  0.01       3                  110      90.29643  0.26304858  73.45809\n  0.01       3                  120      89.77997  0.26903502  73.00959\n  0.01       3                  130      89.29077  0.27534481  72.58005\n  0.01       3                  140      88.84377  0.28160966  72.18900\n  0.01       3                  150      88.39183  0.28703274  71.78884\n  0.01       3                  160      87.98785  0.29089402  71.43089\n  0.01       3                  170      87.60693  0.29500983  71.10154\n  0.01       3                  180      87.22942  0.29877495  70.76656\n  0.01       3                  190      86.87568  0.30252972  70.46417\n  0.01       3                  200      86.54159  0.30535605  70.17978\n  0.01       3                  210      86.20927  0.30891773  69.89784\n  0.01       3                  220      85.91032  0.31122926  69.63923\n  0.01       3                  230      85.59678  0.31463461  69.37184\n  0.01       3                  240      85.30758  0.31729579  69.11501\n  0.01       3                  250      85.03869  0.32030848  68.87883\n  0.01       3                  260      84.78236  0.32254791  68.64805\n  0.01       3                  270      84.50046  0.32573321  68.41538\n  0.01       3                  280      84.24296  0.32856029  68.19304\n  0.01       3                  290      84.00417  0.33091240  67.98462\n  0.01       3                  300      83.76684  0.33323781  67.78292\n  0.05       1                   10      95.97882  0.13571032  78.32889\n  0.05       1                   20      94.18100  0.16578059  76.75062\n  0.05       1                   30      92.73170  0.20032480  75.52777\n  0.05       1                   40      91.50834  0.22011376  74.46553\n  0.05       1                   50      90.39323  0.24003429  73.50423\n  0.05       1                   60      89.41020  0.25730554  72.67480\n  0.05       1                   70      88.53850  0.26952613  71.93411\n  0.05       1                   80      87.75038  0.27847170  71.22353\n  0.05       1                   90      87.00229  0.28996618  70.57505\n  0.05       1                  100      86.35322  0.29639436  69.99980\n  0.05       1                  110      85.80306  0.30077372  69.53564\n  0.05       1                  120      85.24639  0.30800467  69.02923\n  0.05       1                  130      84.75909  0.31194020  68.59600\n  0.05       1                  140      84.33724  0.31652272  68.21635\n  0.05       1                  150      83.93929  0.31943121  67.85140\n  0.05       1                  160      83.57027  0.32443001  67.50888\n  0.05       1                  170      83.22041  0.32833700  67.18428\n  0.05       1                  180      82.89057  0.33171106  66.89517\n  0.05       1                  190      82.56585  0.33611445  66.63971\n  0.05       1                  200      82.27697  0.33912891  66.36940\n  0.05       1                  210      82.00223  0.34253855  66.13702\n  0.05       1                  220      81.73293  0.34646780  65.90660\n  0.05       1                  230      81.45004  0.35020681  65.65595\n  0.05       1                  240      81.24370  0.35221571  65.46808\n  0.05       1                  250      81.00020  0.35500218  65.25591\n  0.05       1                  260      80.77792  0.35717237  65.06977\n  0.05       1                  270      80.56683  0.35985758  64.87200\n  0.05       1                  280      80.38259  0.36152481  64.70732\n  0.05       1                  290      80.17659  0.36374485  64.51273\n  0.05       1                  300      79.98499  0.36618056  64.35458\n  0.05       2                   10      94.95278  0.16698885  77.41967\n  0.05       2                   20      92.27729  0.21402108  75.11895\n  0.05       2                   30      90.20381  0.24842161  73.34509\n  0.05       2                   40      88.47204  0.27347481  71.84796\n  0.05       2                   50      86.95989  0.29655274  70.53147\n  0.05       2                   60      85.72351  0.30989220  69.46308\n  0.05       2                   70      84.70950  0.31945543  68.57755\n  0.05       2                   80      83.80031  0.32943810  67.74830\n  0.05       2                   90      83.02953  0.33709703  67.07857\n  0.05       2                  100      82.33278  0.34489168  66.47121\n  0.05       2                  110      81.76843  0.34956210  65.93273\n  0.05       2                  120      81.21519  0.35581867  65.45524\n  0.05       2                  130      80.69198  0.36218344  65.00392\n  0.05       2                  140      80.24044  0.36708752  64.59499\n  0.05       2                  150      79.84892  0.37101997  64.23833\n  0.05       2                  160      79.49319  0.37483541  63.91021\n  0.05       2                  170      79.15312  0.37809736  63.59861\n  0.05       2                  180      78.88087  0.38081188  63.34291\n  0.05       2                  190      78.60422  0.38391909  63.12938\n  0.05       2                  200      78.34730  0.38637147  62.89873\n  0.05       2                  210      78.10883  0.38890434  62.68628\n  0.05       2                  220      77.91352  0.39053235  62.52633\n  0.05       2                  230      77.73878  0.39187175  62.35417\n  0.05       2                  240      77.53966  0.39428180  62.16204\n  0.05       2                  250      77.40506  0.39535889  62.02569\n  0.05       2                  260      77.27961  0.39647647  61.91770\n  0.05       2                  270      77.14085  0.39785577  61.79482\n  0.05       2                  280      76.98501  0.39975684  61.64927\n  0.05       2                  290      76.88416  0.40069247  61.56208\n  0.05       2                  300      76.74610  0.40226666  61.43407\n  0.05       3                   10      94.01492  0.19872389  76.68482\n  0.05       3                   20      90.82915  0.25180426  73.88158\n  0.05       3                   30      88.44588  0.28005833  71.78434\n  0.05       3                   40      86.43782  0.30406597  70.09591\n  0.05       3                   50      84.88794  0.31945854  68.73829\n  0.05       3                   60      83.64186  0.33267504  67.66038\n  0.05       3                   70      82.59737  0.34413926  66.73941\n  0.05       3                   80      81.74714  0.35269819  65.98383\n  0.05       3                   90      80.98226  0.36046713  65.30144\n  0.05       3                  100      80.30055  0.36800864  64.69420\n  0.05       3                  110      79.76705  0.37331882  64.18151\n  0.05       3                  120      79.29949  0.37777282  63.75388\n  0.05       3                  130      78.85565  0.38191169  63.36995\n  0.05       3                  140      78.45196  0.38575748  63.00638\n  0.05       3                  150      78.10554  0.38967263  62.69749\n  0.05       3                  160      77.81387  0.39250582  62.40214\n  0.05       3                  170      77.54240  0.39519184  62.16754\n  0.05       3                  180      77.35331  0.39673575  61.97162\n  0.05       3                  190      77.12768  0.39897681  61.76505\n  0.05       3                  200      76.89778  0.40163817  61.59683\n  0.05       3                  210      76.71475  0.40352904  61.43454\n  0.05       3                  220      76.55980  0.40501194  61.28956\n  0.05       3                  230      76.46657  0.40572905  61.18810\n  0.05       3                  240      76.41666  0.40578754  61.12262\n  0.05       3                  250      76.31605  0.40676328  61.01621\n  0.05       3                  260      76.24119  0.40761051  60.93768\n  0.05       3                  270      76.14560  0.40873535  60.85589\n  0.05       3                  280      76.07823  0.40940361  60.78782\n  0.05       3                  290      76.00919  0.41015805  60.73399\n  0.05       3                  300      75.96494  0.41063121  60.68277\n  0.10       1                   10      94.24137  0.17152272  76.84841\n  0.10       1                   20      91.48856  0.22205615  74.51657\n  0.10       1                   30      89.46812  0.25250672  72.73112\n  0.10       1                   40      87.73580  0.28147122  71.17974\n  0.10       1                   50      86.36685  0.29319174  70.01463\n  0.10       1                   60      85.27466  0.30390353  69.06852\n  0.10       1                   70      84.30898  0.31452875  68.19493\n  0.10       1                   80      83.53196  0.32372634  67.51371\n  0.10       1                   90      82.83092  0.33156668  66.89783\n  0.10       1                  100      82.22985  0.33787256  66.34362\n  0.10       1                  110      81.68324  0.34540571  65.86358\n  0.10       1                  120      81.18066  0.35228088  65.42467\n  0.10       1                  130      80.72093  0.35742987  65.00676\n  0.10       1                  140      80.32755  0.36103060  64.66083\n  0.10       1                  150      79.97723  0.36522667  64.34163\n  0.10       1                  160      79.61847  0.36963144  64.04553\n  0.10       1                  170      79.29837  0.37323486  63.78171\n  0.10       1                  180      78.94606  0.37771138  63.46961\n  0.10       1                  190      78.67907  0.38021031  63.24651\n  0.10       1                  200      78.40913  0.38326301  62.99866\n  0.10       1                  210      78.26306  0.38428988  62.86045\n  0.10       1                  220      78.06412  0.38595601  62.68695\n  0.10       1                  230      77.85685  0.38821266  62.49034\n  0.10       1                  240      77.68196  0.38995929  62.34230\n  0.10       1                  250      77.54713  0.39139327  62.20854\n  0.10       1                  260      77.38875  0.39327551  62.05736\n  0.10       1                  270      77.26407  0.39431559  61.96480\n  0.10       1                  280      77.09994  0.39640931  61.83475\n  0.10       1                  290      76.93714  0.39844026  61.71628\n  0.10       1                  300      76.85006  0.39920562  61.61207\n  0.10       2                   10      92.32949  0.20237222  75.14618\n  0.10       2                   20      88.44999  0.26630912  71.74947\n  0.10       2                   30      85.70067  0.30105732  69.35750\n  0.10       2                   40      83.75614  0.32514332  67.68092\n  0.10       2                   50      82.44245  0.33786786  66.48371\n  0.10       2                   60      81.27957  0.35163030  65.47904\n  0.10       2                   70      80.32363  0.36169034  64.52802\n  0.10       2                   80      79.56126  0.37142500  63.86437\n  0.10       2                   90      78.88436  0.37917565  63.23174\n  0.10       2                  100      78.31357  0.38541272  62.75720\n  0.10       2                  110      77.84984  0.39036179  62.36940\n  0.10       2                  120      77.52629  0.39335021  62.10216\n  0.10       2                  130      77.23999  0.39578285  61.78017\n  0.10       2                  140      76.97051  0.39910005  61.51633\n  0.10       2                  150      76.74547  0.40131035  61.32818\n  0.10       2                  160      76.63992  0.40192681  61.25774\n  0.10       2                  170      76.45390  0.40413547  61.09049\n  0.10       2                  180      76.24797  0.40698751  60.92352\n  0.10       2                  190      76.12717  0.40843692  60.80555\n  0.10       2                  200      75.96513  0.41056349  60.66165\n  0.10       2                  210      75.80602  0.41274511  60.52385\n  0.10       2                  220      75.78953  0.41280568  60.50379\n  0.10       2                  230      75.72661  0.41368432  60.46989\n  0.10       2                  240      75.64284  0.41464775  60.37121\n  0.10       2                  250      75.60265  0.41510284  60.34489\n  0.10       2                  260      75.59967  0.41520537  60.35214\n  0.10       2                  270      75.55522  0.41578011  60.32500\n  0.10       2                  280      75.51729  0.41645782  60.25077\n  0.10       2                  290      75.45147  0.41737259  60.19631\n  0.10       2                  300      75.42840  0.41783639  60.17867\n  0.10       3                   10      90.59487  0.24568477  73.65767\n  0.10       3                   20      86.45190  0.29872801  70.04020\n  0.10       3                   30      83.85892  0.32594660  67.75108\n  0.10       3                   40      81.88799  0.34687041  65.98706\n  0.10       3                   50      80.41664  0.36418986  64.72323\n  0.10       3                   60      79.40199  0.37432872  63.87092\n  0.10       3                   70      78.56593  0.38295780  63.06346\n  0.10       3                   80      77.95754  0.38902290  62.52649\n  0.10       3                   90      77.46853  0.39371077  62.06633\n  0.10       3                  100      77.07772  0.39804654  61.77035\n  0.10       3                  110      76.78899  0.40110933  61.51070\n  0.10       3                  120      76.42021  0.40566412  61.17856\n  0.10       3                  130      76.21696  0.40775382  60.99491\n  0.10       3                  140      76.07339  0.40926076  60.85219\n  0.10       3                  150      75.99669  0.40985781  60.75686\n  0.10       3                  160      75.89422  0.41102841  60.63304\n  0.10       3                  170      75.88549  0.41099052  60.61250\n  0.10       3                  180      75.84437  0.41163309  60.57048\n  0.10       3                  190      75.78781  0.41228321  60.51710\n  0.10       3                  200      75.81115  0.41192641  60.49989\n  0.10       3                  210      75.75023  0.41287005  60.46941\n  0.10       3                  220      75.72512  0.41304944  60.47410\n  0.10       3                  230      75.69897  0.41352552  60.44124\n  0.10       3                  240      75.63794  0.41454761  60.40699\n  0.10       3                  250      75.65046  0.41433864  60.41336\n  0.10       3                  260      75.66742  0.41413395  60.37567\n  0.10       3                  270      75.67511  0.41398488  60.41305\n  0.10       3                  280      75.66432  0.41408897  60.41182\n  0.10       3                  290      75.67822  0.41390260  60.40965\n  0.10       3                  300      75.62938  0.41471396  60.36917\n\nTuning parameter 'n.minobsinnode' was held constant at a value of 20\nRMSE was used to select the optimal model using the smallest value.\nThe final values used for the model were n.trees = 300, interaction.depth =\n 2, shrinkage = 0.1 and n.minobsinnode = 20.\n```\n:::\n:::\n\n\n+--------------------+--------------------------------------------------------+-------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| Function           | Feature                                                | UI                                                                                  | Server                                                                      |\n+====================+========================================================+=====================================================================================+=============================================================================+\n| **trainControl()** | Select resampling method, resampling count and repeat. | numericInput(inputId = \"gb_cvkfold_number\",\\                                        | Within ***mainPanel***() \\> tabsetPanel() \\>                                |\n|                    |                                                        | label = \"K-fold:\",\\                                                                 |                                                                             |\n|                    |                                                        | min = 3,\\                                                                           | [For Cross Validation]{.underline}\\                                         |\n|                    |                                                        | max = 50,\\                                                                          | gb_resamplecv_kfoldnum \\<- eventReactive(input\\$mb_action, {\\               |\n|                    |                                                        | value = 10),                                                                        | trainControl(\\                                                              |\n|                    |                                                        |                                                                                     | method = \"cv\",\\                                                             |\n|                    |                                                        | numericInput(inputId = \"gb_repeatkfold_number\",\\                                    | number = input\\$gb_cvkfold_number)\\                                         |\n|                    |                                                        | label = \"K-fold:\",\\                                                                 | })                                                                          |\n|                    |                                                        | min = 3,\\                                                                           |                                                                             |\n|                    |                                                        | max = 50,\\                                                                          | [For Repeated Cross Validation\\                                             |\n|                    |                                                        | value = 10),                                                                        | ]{.underline}gb_resamplercv_kfoldnum \\<- eventReactive(input\\$mb_action, {\\ |\n|                    |                                                        |                                                                                     | trainControl(\\                                                              |\n|                    |                                                        | numericInput(inputId = \"gb_repeatkfold_repeat\", label = \"Number of Trees:\",\\        | method = \"cv\",\\                                                             |\n|                    |                                                        | min = 1,\\                                                                           | number = input\\$gb_repeatkfold_number)\\                                     |\n|                    |                                                        | max = 300,\\                                                                         | })                                                                          |\n|                    |                                                        | value = c(10, 30))                                                                  |                                                                             |\n|                    |                                                        |                                                                                     | gb_repeatnum \\<- eventReactive(\\                                            |\n|                    |                                                        |                                                                                     | input\\$mb_action, {\\                                                        |\n|                    |                                                        |                                                                                     | trainControl(\\                                                              |\n|                    |                                                        |                                                                                     | method = \"repeatedcv\",\\                                                     |\n|                    |                                                        |                                                                                     | number = input\\$gb_repeatkfold_number,\\                                     |\n|                    |                                                        |                                                                                     | repeats = input\\$gb_repeatkfold_repeat)\\                                    |\n|                    |                                                        |                                                                                     | })                                                                          |\n+--------------------+--------------------------------------------------------+-------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| **expand.grid()**  | Select tuning parameters                               | [Slider with Range]{.underline}\\                                                    | gb_tgrid \\<- eventReaction(input\\$mb_action, {\\                             |\n|                    |                                                        | sliderInput(inputId = \"*gb_interactiondepth\\_*\",\\                                   | expand.grid(\\                                                               |\n|                    |                                                        | label = \"Number of Boosting Iterations:\",\\                                          | interaction.depth = *input\\$gb_interactiondepth*,\\                          |\n|                    |                                                        | min = 1,\\                                                                           | n.trees = *input\\$gb_treenumrange*,\\                                        |\n|                    |                                                        | max = 5,\\                                                                           | shrinkage = *input\\$gb_shrinkage*,\\                                         |\n|                    |                                                        | value = c(1:3)))                                                                    | min.node.size = i*nput\\$gb_minnodesize*)}                                   |\n|                    |                                                        |                                                                                     |                                                                             |\n|                    |                                                        | sliderInput(inputId = \"*gb_treenumrange\\_*\",\\                                       |                                                                             |\n|                    |                                                        | label = \"Number of Trees:\",\\                                                        |                                                                             |\n|                    |                                                        | min = 10,\\                                                                          |                                                                             |\n|                    |                                                        | max = 500,\\                                                                         |                                                                             |\n|                    |                                                        | value = c(10:30)))                                                                  |                                                                             |\n|                    |                                                        |                                                                                     |                                                                             |\n|                    |                                                        | [Slider with 1 Input\\                                                               |                                                                             |\n|                    |                                                        | ]{.underline}sliderInput(inputId = \"gb_minnodesize\", label = \"Minimum Node Size:\",\\ |                                                                             |\n|                    |                                                        | min = 2,\\                                                                           |                                                                             |\n|                    |                                                        | max = 50,\\                                                                          |                                                                             |\n|                    |                                                        | value = 5),                                                                         |                                                                             |\n|                    |                                                        |                                                                                     |                                                                             |\n|                    |                                                        | [Numeric Input]{.underline}\\                                                        |                                                                             |\n|                    |                                                        | numericInput(inputId = \"*gb_shrinkage\\_*\",\\                                         |                                                                             |\n|                    |                                                        | label = \"Learning Rate:\",\\                                                          |                                                                             |\n|                    |                                                        | min = 0,\\                                                                           |                                                                             |\n|                    |                                                        | max = 1.0,\\                                                                         |                                                                             |\n|                    |                                                        | value = 0.01)                                                                       |                                                                             |\n+--------------------+--------------------------------------------------------+-------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n| **train()**        | Select initial tune length                             | numericInput(inputId = \"*rf_tunelength*\", label = \"Set Initial Tune Length:\",\\      | rfmodel \\<- eventReactive(\\                                                 |\n|                    |                                                        | min = 2,\\                                                                           | input\\$mb_action, {\\                                                        |\n|                    |                                                        | max = 10,\\                                                                          | train(form = *input\\$target*\\~ .,\\                                          |\n|                    |                                                        | value = 4)                                                                          | data = *traindata()*,\\                                                      |\n|                    |                                                        |                                                                                     | method = \"gbm\",\\                                                            |\n|                    |                                                        |                                                                                     | verbose = FALSE,\\                                                           |\n|                    |                                                        |                                                                                     | trControl = *gb_fitcontrol()*,\\                                             |\n|                    |                                                        |                                                                                     | tuneLength = *input\\$rf_tunelength*,\\                                       |\n|                    |                                                        |                                                                                     | tuneGrid = *gb_tgrid()*)\\                                                   |\n|                    |                                                        |                                                                                     | })                                                                          |\n+--------------------+--------------------------------------------------------+-------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[10,20,35,35\\]\"}\n\n## 7.2 Visual Model Diagnostic\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbmodel$bestTune\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    n.trees interaction.depth shrinkage n.minobsinnode\n240     300                 2       0.1             20\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(gbmodel)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_gb <- bind_cols(\n  Actual = testdata$Math,\n  Predicted = predict(gbmodel, newdata = testdata),\n  Residuals = predict(gbmodel, newdata = testdata) - testdata$Math)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngb_predvsactual <- \n   ggplot(data = predict_gb,\n          aes(x = Actual, y = Predicted)) +\n   geom_point(alpha = 0.2, color = \"grey40\") +\n   geom_smooth(method = \"loess\", formula = \"y ~ x\", color=\"#dfb2e9\") +\n   geom_abline(intercept = 0, slope = 1, linetype = 2, color = \"#20948b\", size = 0.8) +\n   labs(title = \"Predicted vs Actual\") +\n   theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\ngb_residvsactual <- \n   ggplot(data = predict_gb,\n          aes(x = Actual, y = Residuals)) +\n   geom_point(alpha = 0.2, color = \"grey40\") +\n   geom_smooth(method = \"loess\", formula = \"y ~ x\", color=\"#dfb2e9\") +\n   geom_hline(yintercept = 0, linetype = 2, color = \"#20948b\", size = 0.8) +\n   labs(title = \"Residuals vs Predicted\") +\n   theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\ngb_predvsactual + gb_residvsactual + \n  plot_layout(guides = \"collect\") +\n  plot_layout(widths=c(1,1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## 7.3 Statistical Model Evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngb_rmse <- RMSE(pred = predict_gb$Predicted, obs = predict_gb$Actual)\ngb_rsq <- R2(pred = predict_gb$Predicted, obs = predict_gb$Actual)\ngb_mae <- MAE(pred = predict_gb$Predicted, obs = predict_gb$Actual)\n\ngb_rmse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 75.59326\n```\n:::\n\n```{.r .cell-code}\ngb_rsq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3951649\n```\n:::\n\n```{.r .cell-code}\ngb_mae\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60.85604\n```\n:::\n:::\n\n\n## 7.4 Variable Importance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvip::vip(gbmodel, num_features = 40, bar = FALSE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex04_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n# 8 Final Thoughts\n\nThe three predictive models offer users different methods for regression analysis to explore the factors influencing subject scores. The customisability of our app allows users to visualise the impact of each parameter on the model's performance and enables them to fine-tune it to arrive at the best predictive model.\n\nAdditionally, if time and capability permit, I would consider the addition of a summary page to this module. This summary page could provide a side-by-side comparison of performance metrics, showcasing the strengths and weaknesses of each model. Such a comparison would empower users to make informed decisions about which model best suits their needs for predicting student scores. This feature would enhance the user experience and provide a comprehensive overview, ensuring users can confidently select the most effective model.\n",
    "supporting": [
      "Take-home_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}