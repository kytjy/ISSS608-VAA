{
  "hash": "3b4c1a2c008a3decda1b525d95440e6a",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 4a: Visualising Distribution\"\ndate: \"21 Jan 2024\"\ndate-modified: \"last-modified\"\neditor: visual\ntoc-depth: 4\nexecute:\n  freeze: true #never re-render during project render\n  echo: true #if false, displays charts without codes\n  eval: true #if false, displays codes without charts\n  warning: false #dont display if there are any warnings\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: false\n---\n\n\n![](images/4a.PNG){fig-align=\"center\"}\n\n# 1 Learning Outcome\n\nVisualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n# 2 Getting Started\n\n::: panel-tabset\n## Installing and loading libraries\n\nUse the pacman package to check, install and launch the following R packages:\n\n-   tidyverse, a family of R packages for data science process,\n\n-   ggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\n\n-   ggdist for visualising distribution and uncertainty,\n\n-   geomtextpath and ggtext for plots labels and annotations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, knitr,\n               geomtextpath, ggtext, nord\n               )\n```\n:::\n\n\n## Importing Data\n\nIn this section, *Exam_data.csv* provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.\n\nThe code chunk below `read_csv()` of **readr** package is used to import *Exam_data.csv* data file into R and save it as an tibble data frame called `exam_data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\nThere are 322 observations across 7 attributes.\n\n## Understanding the Data\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 322\nColumns: 7\n$ ID      <chr> \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   <chr> \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    <chr> \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH <dbl> 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   <dbl> 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE <dbl> 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n```\n:::\n\n```{.r .cell-code}\nsummary(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n```\n:::\n:::\n\n\n## Converting data types\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- c(\"CLASS\", \"GENDER\", \"RACE\")\n\nexam <- exam %>% \n  mutate(across(col, as.factor)) %>% \n  mutate(ID = as.character(ID))\n```\n:::\n\n:::\n\n# 3 Visualising Distribution with Ridgeline Plot\n\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n::: {.thunderbox .thunder data-latex=\"thunder\"}\n-   Ridgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\n\n-   It works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n:::\n\n## 3.1 Plotting ridgeline graph: ggridges method\n\nThere are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using [ggridges](https://wilkelab.org/ggridges/) package.\n\nggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`.\n\n### 3.1.1 `geom_density_ridges`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(\n    #panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### 3.1.2 geom_textdensity\n\nThe attempt to recreate the original plot with [`geom_textdensity`](https://www.rdocumentation.org/packages/geomtextpath/versions/0.1.1/topics/geom_textdensity) from the **geom_textpath** did not go all too well as the function does not take in a y value (i.e. it couldn't arrange the plots along the y-axis. Rather, it was only able to lay out plots along a straight line). It looked much better when there are less groups.\n\n`geom_texthline` and `geom_textvline` can also be used to plot reference lines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_3classes <- filter(exam, CLASS ==c(\"3A\", \"3E\", \"3I\"))\nmean_english <- mean(exam$ENGLISH)\n\nggplot(exam_3classes, aes(x = ENGLISH, \n                 colour = CLASS, \n                 label = CLASS,\n                )) +\n  geom_textdensity(\n                   size = 6, \n                   fontface = 2, \n                   hjust = 0.3, \n                   vjust = 0.1,\n                   #linetype= 2 << For dotted line\n                   ) +\n  geom_textvline(aes(xintercept = mean_english, \n                     label = paste0(\"Mean Score = \", round(mean_english, 0))),\n                 color = \"steelblue4\",\n                 linetype = \"dotted\",\n                 linewidth = .5,\n                 hjust = 0.6,\n                 size = 3) +\n  scale_x_continuous(\n    expand = c(0, 0)\n  ) +  \n  theme_ridges()+\n  labs(x = \"English Scores\",\n       y = \"\",\n       title=\"Higher median English scores among <span style='color: #f8766d;'>3A</span> students.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.y = element_markdown(),\n    plot.title = element_markdown(hjust=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n    )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## 3.2 Varying fill colors along the x axis\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    color='#8da3ca',\n    linewidth=1.05) +\n  scale_color_continuous_sequential('Purple-Blue')+\n  scale_fill_continuous_sequential('Purple-Blue', name='displ')+\n  scale_x_continuous(\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  labs(x = \"English Score\",\n       y = \"\",\n       title=\"Colour transition from light to dark as scores improve.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### 3.3 **Mapping the probabilities directly onto colour**\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()+\n  labs(x = \"English\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    #legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### 3.4 **Ridgeline plots with quantile lines**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()+\n  labs(x = \"English\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()+\n  labs(x = \"English\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n# 4 Visualising Distribution with Raincloud Plot\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a \"raincloud\". The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by **ggdist** and ggplot2 packages.\n\n## 4.1 Plotting a Half Eye graph\n\nFirst, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.\n\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  labs(x = \"\",\n       y = \"English\\nScore\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## 4.2 Adding the boxplot with `geom_boxplot()`\n\nNext, we will add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09) of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  labs(x = \"\",\n       y = \"English\\nScore\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## 4.3 Adding the Dot Plots with `stat_dots()`\n\nNext, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = \"left\" to indicate we want it on the left-hand side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2) +\n  labs(x = \"\",\n       y = \"English\\nScore\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 4.4 Finishing touch\n\nLastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  labs(x = \"\",\n       y = \"English Score\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )  +\n\n  coord_flip() \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n# 5 Raincloud plot with `geom_density_ridges()`\n\n## 5.1 \\|-shaped jitters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = RACE, \n           color=RACE, \n           #fill=RACE\n           )) +\n  theme_ridges()+\n  geom_density_ridges(jittered_points=TRUE,\n                      position='raincloud',\n                      alpha = 0.7,\n                      scale=0.9,\n                      point_shape = '|',\n                      point_size = 3,\n                      ) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  scale_color_nord('victory_bonds')+\n  scale_fill_nord('victory_bonds')+\n  labs(x = \"English Score\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.x = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 5.2 With\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = RACE,\n       color= RACE,\n       fill= RACE)) +\n  theme_ridges()+\n  geom_density_ridges(jittered_points=TRUE,\n                      aes(point_color=RACE),\n                      alpha = 0.7,\n                      point_size = 1.5,\n                      ) +\n  scale_fill_discrete_qualitative('Set 3')+\n  scale_color_discrete_qualitative('Dark 3')+\n\n\n  labs(x = \"English Score\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.x = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# 5 Tips\n\n::: {.thunderbox .thunder data-latex=\"thunder\"}\n**Controlling Parameters**\n\n`scale`: Larger scale = higher ridgeplots = more overlaps `rel_min_height`: Default = 0. Lines with height below this cutoff will be removed.\n:::\n\n# 6 Reference\n\n-   Kam, T.S. (2023). [Programming Interactive Data Visualisation with R](https://r4va.netlify.app/chap03).\n",
    "supporting": [
      "Hands-on_Ex04a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}