{
  "hash": "8522eb3a6fd3bd7d1bafa3fad2f590c3",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 3b: Programming Animated Statistical Graphics with R\"\ndate: \"01 Jan 2024\"\ndate-modified: \"last-modified\"\neditor: visual\ntoc-depth: 4\nexecute:\n  freeze: auto\n  echo: true #if false, displays charts without codes\n  eval: true #if false, displays codes without charts\n  warning: false #dont display if there are any warnings\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n    code-block-bg: \"#ECEBEB\"\n---\n\n\n![](Images/placeholder.PNG){fig-align=\"center\"}\n\n# 1 Overview\n\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to create animated data visualisation by using **gganimate** and **plotly r** packages. At the same time, we will also learn how to:\n\n\\(i\\) reshape data by using **tidyr** package, and\n\n\\(ii\\) process, wrangle and transform data by using **dplyr** package.\n\n## 1.1 Basic concepts of animation\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n![](https://r4va.netlify.app/chap04/img/image1.jpg)\n\n## 1.2 Terminology\n\nBefore we dive into the steps for creating an animated statistical graph, it's important to understand some of the key concepts and terminology related to this type of visualization.\n\n1.  **Frame**: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\n\n2.  **Animation Attributes**: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n# 2 Getting Started\n\n::: panel-tabset\n## Installing and loading libraries\n\nWe will use p_load from pacman package to check, install and load the following R packages:\n\n| Package                                                             | Description                                                                                                                                                                                          |\n|---------------------------------|---------------------------------------|\n| [**plotly**](https://plotly.com/r/)                                 | R library for plotting interactive statistical graphs.                                                                                                                                               |\n| [**gganimate**](https://gganimate.com/)                             | An ggplot extension for creating animated statistical graphs                                                                                                                                         |\n| [**gifski**](https://cran.r-project.org/web/packages/gifski/)       | Converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame. |\n| [**gapminder**](https://cran.r-project.org/web/packages/gapminder/) | An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.                                                                                                  |\n| [**tidyverse**](https://www.tidyverse.org/)                         | A family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.                                              |\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, gifski, gapminder, \n               plotly, gganimate, tidyverse)\n```\n:::\n\n\n## Importing Data\n\nIn this hands-on exercise, the *Data* worksheet from *GlobalPopulation* Excel workbook will be used.\n\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#col <- c('Country', 'Continent')\n\n#globalPop <- read_xls('data/GlobalPopulation.xls',\n#                      sheet='Data') %>% \n#  mutate_each_(funs(factor(.)), col) %>%\n#  mutate(Year = as.integer(Year))\n```\n:::\n\n\n-   [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of **readxl** package is used to import the Excel worksheet.\n\n-   `mutate_each_()` of dplyr package is used to convert all character data type into factor.\n\n    -   This line applies the **`factor()`** function to each column specified in the **`col`** argument. Character to factor. It takes column indices or column names in strings format as inputs, and returns a data frame with new columns for each column in the input data frame, where each new column is the result of applying the specified function to the corresponding column in the input data frame.\n\n    -   The **`fun`** argument specifies the function to apply to each column, and **`factor(.)`** is a way to specify the **`factor`** works as an argument.\n\n-   `mutate` of dplyr package is used to convert data values of Year field into integer.\n\n    -   as.character(x), as.integer(x), as.numeric(x), as.factor(x) (for categorical data)\n\n## Understanding the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#glimpse(globalPop)\n```\n:::\n\n:::\n\n# 3 Animated Data Visualisation: gganimate methods\n\n[**gganimate**](https://gganimate.com/) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\n-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.\n\n-   `view_*()` defines how the positional scales should change along the animation.\n\n-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.\n\n-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.\n\n-   `ease_aes()` defines how different aesthetics should be eased during transitions.\n\n## 3.1 Building a static population bubble plot\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static [bubble plot](https://r-graph-gallery.com/bubble-chart.html). A bubble plot is created when a third numeric variable is assigned to `size` argument inside a ggplot with geom_point.\n\n\n::: {.cell}\n\n:::\n\n\n-   The **`scale_size(range= c(2,12))`** sets the range of point sizes to be used in the plot to between 2 and 12.\n\n-   `Population` is mapped to `size` aes in `ggplot`, thus this range parameter controls the min nad max size of the points.\n\n## 3.2 Building the animated bubble plot\n\nIn the code chunk below,\n\n-   [`transition_time()`](https://gganimate.com/reference/transition_time.html) of **gganimate** is used to create transition through distinct states in time (i.e.Â Year).\n\n-   [ease_aes()](https://gganimate.com/reference/ease_aes.html) is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n::: {.cell}\n\n:::\n\n\n# 4 Animated Data Visualisation: plotly\n\nIn **Plotly R** package, both [ggplotly()](https://plotly.com/ggplot2/animations/) and `plot_ly()` support key frame animations through the `frame` argument/aesthetic. They also support an `ids` argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n## 4.1 Building an animated bubble plot: ggplotly() method\n\n-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called *gg*.\n\n-   `ggplotly()` is then used to convert the R graphic object into an animated svg object.\n\n## 4.2 Building an animated bubble plot: plot_ly() method\n\n# 5 References\n\n-   Kam, T.S. (2023). [Programming Animated Statistical Graphics with R](https://r4va.netlify.app/chap04).\n\n-   [Getting Started](https://gganimate.com/articles/gganimate.html)\n\n-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.\n\n-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).\n\n-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)\n",
    "supporting": [
      "Hands-on_Ex03b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}