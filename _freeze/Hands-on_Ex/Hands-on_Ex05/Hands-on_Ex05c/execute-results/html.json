{
  "hash": "2d18091a1f10618b8f5b09e667b741c0",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data\"\ndate: \"03 Feb 2024\"\ndate-modified: \"last-modified\"\neditor: visual\ntoc-depth: 4\nexecute:\n  freeze: true #never re-render during project render\n  echo: true #if false, displays charts without codes\n  eval: true #if false, displays codes without charts\n  warning: false #dont display if there are any warnings\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: false\n---\n\n\n![](image/corrgram.PNG){fig-align=\"center\"}\n\n# 1 Overview\n\nHeatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rows and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\n\nIn this hands-on exercise, we will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data.\n\n# 2 Getting Starting\n\n::: panel-tabset\n## Installing & Launching R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(seriation, dendextend, heatmaply, \n               tidyverse, ggridges)\n```\n:::\n\n\n## Importing Data\n\nIn this hands-on exercise, the data of [World Happiness 2018 report](https://worldhappiness.report/ed/2018/) will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called **WHData-2018.csv**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwh <- read_csv(\"data/WHData-2018.csv\")\n```\n:::\n\n\nThe output is a tibble data frame called **wh**, with 156 observations (rows) across 12 variables (columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(wh)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 156\nColumns: 12\n$ Country                        <chr> \"Albania\", \"Bosnia and Herzegovina\", \"B…\n$ Region                         <chr> \"Central and Eastern Europe\", \"Central …\n$ `Happiness score`              <dbl> 4.586, 5.129, 4.933, 5.321, 6.711, 5.73…\n$ `Whisker-high`                 <dbl> 4.695, 5.224, 5.022, 5.398, 6.783, 5.81…\n$ `Whisker-low`                  <dbl> 4.477, 5.035, 4.844, 5.244, 6.639, 5.66…\n$ Dystopia                       <dbl> 1.462, 1.883, 1.219, 1.769, 2.494, 1.45…\n$ `GDP per capita`               <dbl> 0.916, 0.915, 1.054, 1.115, 1.233, 1.20…\n$ `Social support`               <dbl> 0.817, 1.078, 1.515, 1.161, 1.489, 1.53…\n$ `Healthy life expectancy`      <dbl> 0.790, 0.758, 0.712, 0.737, 0.854, 0.73…\n$ `Freedom to make life choices` <dbl> 0.419, 0.280, 0.359, 0.380, 0.543, 0.55…\n$ Generosity                     <dbl> 0.149, 0.216, 0.064, 0.120, 0.064, 0.08…\n$ `Perceptions of corruption`    <dbl> 0.032, 0.000, 0.009, 0.039, 0.034, 0.17…\n```\n:::\n:::\n\n## Understanding the Variables\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate Median and Mean values for plotting normal curve\nmed_hs <- median(wh$`Happiness score`)\nmean_hs <- mean(wh$`Happiness score`)\nstd_hs <- sd(wh$`Happiness score`)\n\nggplot(\n    wh, \n    aes(x = `Happiness score`)\n  ) +\n  geom_density(\n    color = \"#d18a7d\",\n    fill = \"#d18a7d\",\n    \n  # Adjust bandwidth to reduce smoothness of density plot to reveal variations\n    adjust = .2,\n    alpha = .6\n  ) +\n  # Plot normal curve\n  stat_function(\n    fun = dnorm,\n    args = list(mean = mean_hs,\n                sd = std_hs),\n    col = \"#65666a\",\n    size = .6\n  ) +\n  labs(\n    title = \"Uneven Distribution of Happiness Scores\",\n    subtitle = \"Median joviality score is close to Mean score, but distribution density reveals multiple peaks and troughs\",\n    x = \"Happiness Score\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05c_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Data Preparation\n\n### Step 1: Changing Row Names\n\nNext, we need to change the rows by country name instead of row number by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow.names(wh) <- wh$Country\n```\n:::\n\n\n### Step 2: Transforming the data frame into a matrix\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\n\nThe code chunk below will be used to transform **wh** data frame into a data matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh) #Transforms categorial variable into numerical representations.\n```\n:::\n\n:::\n\n# 3 Static Heatmap\n\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\n-   [heatmap()](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/heatmap) of R stats package for simple heatmaps.\n\n-   [heatmap.2()](https://www.rdocumentation.org/packages/gplots/versions/3.0.1.1/topics/heatmap.2) of **gplots** R package for enhanced heatmaps.\n\n-   [pheatmap()](https://www.rdocumentation.org/packages/pheatmap/versions/1.0.12/topics/pheatmap) of [**pheatmap**](https://www.rdocumentation.org/packages/pheatmap/versions/1.0.12) R package. **pheatmap** package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\n\n-   [**ComplexHeatmap**](https://bioconductor.org/packages/release/bioc/html/ComplexHeatmap.html) package of **R/Bioconductor** package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). Full reference guide of the package is available [here](https://jokergoo.github.io/ComplexHeatmap-reference/book/).\n\n-   [**superheat**](https://cran.r-project.org/web/packages/superheat/) package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available [here](https://rlbarter.github.io/superheat/).\n\n# 4 `heatmap()` of R Stats\n\n:::panel-tabset\n\n## Basic Heatmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f5f5f5\")\n\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05c_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.thunderbox .thunder data-latex=\"thunder\"}\n\n**Notes from Code Chunk**\n\nBy default, `heatmap()` plots a cluster heatmap. The arguments `Rowv=NA` and `Colv=NA` are used to switch off the option of plotting the row and column dendrograms.\n\n:::\n\n## Cluster Heatmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f5f5f5\")\n\nwh_heatmap <- heatmap(wh_matrix)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05c_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: {.thunderbox .thunder data-latex=\"thunder\"}\n\n**Notes from Code Chunk**\n-     The order of both rows and columns is different compare to the native **wh_matrix**. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\n**Insights**\n-   Here, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\n\n:::\n\n\n\n\n## Normalised Heatmap\n\n\n::: {.cell}\n\n:::\n\n\n\n:::\n\n# 8 Reference\n\n-   Kam, T.S. (2023). [Visual Correlation Analysis](https://r4va.netlify.app/chap14).\n",
    "supporting": [
      "Hands-on_Ex05c_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}