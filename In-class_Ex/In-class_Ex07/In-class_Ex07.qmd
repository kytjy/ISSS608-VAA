---
title: "In-class Exercise 7: tmaps (WIP)"
date: "09 Mar 2024"
date-modified: "last-modified"
editor: visual
toc-depth: 4
execute:
  freeze: true #never re-render during project render
  echo: true #if false, displays charts without codes
  eval: true #if false, displays codes without charts
  warning: false #dont display if there are any warnings
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: false
---

![](images/placeholder.PNG){fig-align="center"}

# 1 Packages

| Package                                              | Description                                                                                    |
|----------------|--------------------------------------------------------|
| [**sf**](https://r-spatial.github.io/sf/)            | For spatial manipulation                                                                       |
| [**terra**](https://github.com/rspatial/terra)       | Methods for spatial data analysis with vector (points, lines, polygons) and raster (grid) data |
| [**gstat**](https://github.com/r-spatial/gstat)      | For spatial and spatio-temporal geostatistical modelling, prediction and simulation            |
| [**tmap**](https://r-tmap.github.io/tmap/)           | For thematic maps                                                                              |
| [**viridis**](https://sjmgarnier.github.io/viridis/) | A series of color maps that are designed to improve graph readability                          |
| [**tidyverse**](https://www.tidyverse.org/)          | Because we love tidy data!                                                                     |

```{r}
pacman::p_load(sf, terra, gstat, tmap, viridis, tidyverse, knitr)
```

# 2 The Rainfall Data

```{r}
rfstations <- read_csv("data/aspatial/RainfallStation.csv")
```

Our latitude should be close to 0 from Singapore as we are near the equator.

The bit of code below performs data import, data extraction and data manipulation altogether.

```{r}
rfdata <-  read_csv("data/aspatial/DAILYDATA_202402.csv")  %>% 
  select(c(1,5)) %>% 
  group_by(Station) %>% 
  summarise(MONTHSUM = sum(`Daily Rainfall Total (mm)`)) %>% 
  ungroup()
```

```{r}
glimpse(rfdata)
```

# 3 Combining Aspatial and Geospatial Data

The code chunk below performs a left join of the aspatial rainfall data with the geospatial rainfall stations data. The `join by` field is automatically detected.

```{r}
rfdata <- rfdata %>% 
  left_join(rfstations)
```

`crs = 4326` because data is in decimal degree, to tell sf that data is in WGS. Must be in **longitude, latitude**.

```{r}
rfdata_sf <- st_as_sf(rfdata,
                      coords = c("Longitude", "Latitude"),
                      crs = 4326) %>% 
  st_transform(crs = 3414)

```

Projection is transformed/converted using formula to different projection units. From decimal degrees to meters to we can easily measure length, width, etc.

```{r}
rfdata_sf %>%  kable()
```

```{r}
mpsz2019 <- st_read(dsn = "data/geospatial", #destination
                    layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414)
```

```{r}
mpsz2019 %>%kable()
```

```{r}
tmap_options(check.and.fix = TRUE)

tmap_mode("view")

tm_basemap("OpenStreetMap") +
tm_shape(mpsz2019) +
  tm_borders() + #to only plot the borders
tm_shape(rfdata_sf) + #simple feature data
  tm_dots(col = 'MONTHSUM') #coloured by monthly total rainfall

tmap_mode("plot")
```

![](images/grid.png){fig-align="center"}

$$height =  (ymax - ymin) / 50 $$

```{r}
#| eval: false 

grid <- terra::rast(mps2019,
                     nrows = 690,
                     ncols = 1075)

xy <- terra::xyFromCell(grid,
                        1:ncell(grid))
```

```{r}
#| eval: false 

res <- gstat(formula = MONTHSUM ~ 1,
             locations = rfdata_sf,
             nmax = 5,
             set = list(idp = 0))

resp <- predict(res, coop)
resp$x <- st_coordinates(resp)[,1]
resp$y <- st_coordinates(resp)
```
