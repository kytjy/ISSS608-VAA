---
title: "In-class Exercise 9: Modelling, Visualising and Analysing Network Data with R"
date: "16 Mar 2024"
date-modified: "last-modified"
editor: visual
toc-depth: 4
execute:
  freeze: true #never re-render during project render
  echo: true #if false, displays charts without codes
  eval: true #if false, displays codes without charts
  warning: false #dont display if there are any warnings
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: false
---

# 1 Getting Started

::: panel-tabset
## Installing and Launching R Packages

-   Network data modelling and visualisation packages: **igraph**, **tidygraph**, **ggraph** and **visNetwork**. **igraph** is already part of **tidygraph**.
-   Data/time wrangling: **tidyverse**, **clock**, **lubridate**

```{r}
pacman::p_load(tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts,
               knitr)
```

## The Data

-   **Edges** data: *GAStech-email_edges.csv* which consists of two weeks of 9063 emails correspondances between 55 employees.
-   **Nodes** data: *GAStech_email_nodes.csv* which consist of the names, department and title of the 55 employees.

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```
## Checking the Data

```{r}
glimpse(GAStech_edges)
```

:::

# 2 Data Manipulation

## 2.1 Converting Data Types

SentDate is in character field. `dmy()` converts this variable into the appropriate date format. `wday()` helps extracts the day, where `label=TRUE` and `abbr=FALSE` provides abbreviated day names.

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

Checking the changes: 

```{r}
glimpse(GAStech_edges)
```
## 2.2 Relevant Subset

`filter()` to select only work-related emails, removes where source = target (ie emailing yourself!), and where frequency of communication is >1.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>% 
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```
# 3 Preparing Network Data

```{r}
GAStech_graph<- tbl_graph(nodes=GAStech_nodes,
                          edges = GAStech_edges_aggregated,
                          directed = TRUE)
```

Check that the observations and node counts reconcile to the source files.

```{r}
GAStech_graph
```

# 4 Visualising Network Data

```{r}
ggraph(GAStech_graph) +  #<<< GAStech_graph is a tbl_graph object
  geom_edge_link0(edge_colour = "#c7c8cc", #<< global aesthetics
                  ) +
  geom_node_point(shape = 21,
                  color = "black",
                  stroke = 1) +
  theme(legend.position = "bottom",
        legend.background = element_rect(fill="#f5f5f5"),
        plot.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5"))
```
:::panel-tabset

## `add_layout_()` = Gem

```{r}
g <- ggraph(GAStech_graph, 
            layout='gem') +
  geom_edge_link(edge_colour = "#c7c8cc") + 
  geom_node_point(aes())

g + 
  theme_graph() +
     theme(legend.position = "none",
        legend.background = element_rect(fill="#f5f5f5", color = "#f5f5f5"),
        plot.background = element_rect(fill="#f5f5f5", color ="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5", color ="#f5f5f5"))
```

## Nicely with coloured nodes

```{r}
g <- ggraph(GAStech_graph, 
            layout='nicely') + 
  geom_edge_link(edge_colour = "#c7c8cc") + 
  geom_node_point(aes(colour=Department), 
                      size =3)

g + 
  theme_graph() +
  theme(legend.position = "bottom",
        legend.background = element_rect(fill="#f5f5f5", color = "#f5f5f5"),
        plot.background = element_rect(fill="#f5f5f5", color ="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5", color ="#f5f5f5"))  
```

## Introducing aesthetics for edge links

`scale_edge_width` to introduce range of width.

```{r}
g <- ggraph(GAStech_graph, 
            layout='nicely') + 
  geom_edge_link(aes(width=Weight), 
                     alpha= 0.1) +  #<< thickness by weight and change alpha
  scale_edge_width(range = c(0.1, 5)) +  #<< control max size of edge , else my plot is ugly
  geom_node_point(aes(colour=Department), 
                      size =3)

g + 
  theme_graph() +
  theme(legend.position = "right",
        legend.background = element_rect(fill="#f5f5f5", color = "#f5f5f5"),
        plot.background = element_rect(fill="#f5f5f5", color ="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5", color ="#f5f5f5"))  
```

## Creating Facets

```{r}
set_graph_style()   #<< using this command provide plot settings for next few plots

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + 
  facet_edges(~Weekday) +
   theme(legend.position = "right",
        legend.background = element_rect(fill="#f5f5f5", color = "#f5f5f5"),
        plot.background = element_rect(fill="#f5f5f5", color ="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5", color ="#f5f5f5")) 
```


:::

