[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_bar",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.1 geom_bar",
    "text": "7.1 geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data = exam_data, \n       aes(x = reorder(RACE, RACE, function(x)-length(x)))) +\n    geom_bar()+\n    ylim(0, 220) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n    labs(x = \"Race\",\n         y = \"No. of\\nStudents\",\n         title = \"Number of Students by Race\") + \n    theme_grey() +\n    theme(\n      axis.title.y = element_text(hjust=1, angle=0),\n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_dotplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.2 geom_dotplot",
    "text": "7.2 geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks= NULL) +     \n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_histogram",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.3 geom_histogram",
    "text": "7.3 geom_histogram\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(binwidth=10,color='white') +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.4 Modifying a geometric object by changing geom()",
    "text": "7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20\nfill argument is used to shade the histogram with color\ncolor argument is used to change the outline colour of the bars\ngeom_vline is used to add mean and median lines\nannotate is used to include descriptions for each line\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) + \n    geom_histogram(bins=20, \n                   color=\"grey30\", \n                   fill=\"#E1C8C4\") +\n    labs(x = \"Math Score\",\n         y = \"No. of Pupils\",\n         title = \"Distribution of Math Scores\") + \n    geom_vline(aes(xintercept=median(exam_data$MATHS, na.rm=T)),\n               color=\"#595DE5\", linewidth=1, linetype=\"dashed\") + \n    # Add line annotations\n    annotate(\n      \"text\", \n      x = 82, \n      y = 50,\n      label = paste(\"Median =\", round(median(exam_data$MATHS, na.rm=T), 3)),\n      color = \"#595DE5\",\n      size = 3.5\n    ) +\n    geom_vline(aes(xintercept=mean(exam_data$MATHS, na.rm=T)),\n               colour=\"red\", linewidth=1, linetype=\"dashed\") + \n      # Add line annotations\n    annotate(\n      \"text\", \n      x = 60, \n      y = 42,\n      label = paste(\"Mean =\", round(mean(exam_data$MATHS, na.rm=T), 3)),\n      color = \"red\",\n      size = 3.5\n    ) +\n    theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\nChanged no. of binsUsing binwidthBin alignment using boundary & center\n\n\n\n\nShow the code\n# Original\nb_p1 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"20 bins\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n# Changed\nb_p2 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=30, \n                 boundary = 100,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"30 bins\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n# format plot layout\nb_p1 + b_p2\n\n\n\n\n\n\n\n\n\nShow the code\n# Original\nbw_p1 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"20 bins\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))  \n\n# Changed\nbw_p2 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(#bins=20, \n                 boundary = 100,\n                 binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"Binwidth 5 = 19 bins\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n# format plot layout\nbw_p1 + bw_p2\n\n\n\n\n\n\n\nBe mindful of the boundaries of the bins and whether a point will fall into the left or right bin if it is on a boundary.\n\n\nShow the code\n# Original\nbb_p1 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"Bin alignment using boundary\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n  \n# Changed\nbb_p2 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20, \n                 center = 50,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"Bin alignment using center\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n# format plot layout\nbb_p1 + bb_p2\n\n\n\n\n\nNote: Don’t use both boundary and center for bin alignment. Just pick one.\n\n\n\n\nbins: default bin number is 30 in ggplot2\nboundary: bin position specifier\nbinwidth: bin breaks automatically based on a specific binwidth; can be used to specify the endpoint of any bin or center to specify the center of any bin"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.5 Modifying a geometric object by changing aes()",
    "text": "7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of *aesthetic()*.\nscale_fill_manual() allow you to specify your own set of mappings from levels in the data to aesthetic values.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill = GENDER)) +\n         geom_histogram(bins =20,\n                        color='grey40')+\n  scale_fill_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_density",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.6 geom_density",
    "text": "7.6 geom_density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot, where y = relative frequency / binwidth.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density(color='#7F948F')+\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\nChanges: - color within geom_density needs to be removed. - added fill and color within aes() - scale_color_manual() for changing line color - scale_fill_manual() for changing area fill colors.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill = GENDER,\n           color=GENDER)) +\n  geom_density(size=2, \n               alpha=0.6)+\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n  scale_fill_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n    labs(x = \"Maths Score\",\n       y = \"Density\",\n       title = \"Density of Maths Score by Gender\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_boxplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.7 geom_boxplot",
    "text": "7.7 geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nWe can also incorporate facet_wrap() to create boxplots of math scores for each class that is separated by gender.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_violin",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.8 geom_violin",
    "text": "7.8 geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_point",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.9 geom_point",
    "text": "7.9 geom_point\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point(), grouped by gender.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= ENGLISH,\n           color = GENDER)) +\n  geom_point() +\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\")) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nTo add reference lines and x/y axis limits:\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y = MATHS, \n           color = GENDER)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\")) +\n  geom_vline(aes(xintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\") + \n  geom_hline(aes(yintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\") +  \n  labs(x = \"English Score\",\n       y = \"Maths Score\",\n       title = \"Maths against English Score by Gender\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combination-of-geom-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combination-of-geom-objects",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.10 Combination of geom objects",
    "text": "7.10 Combination of geom objects\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\nImportant:\nOrder of geom layer matters! In the code below, boxplot is plotted after/above the scatter and thus covers parts of the scatterplot.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n\n  geom_point(position = 'jitter',\n             size=0.5) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.1 Working with stat()",
    "text": "8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data,\n       aes( y= MATHS, x = GENDER)) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.2 Working with stat - the stat_summary() method",
    "text": "8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = 'point',\n               fun.y='mean',\n               colour = 'red',\n               size=4) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.3 Working with stat - the geom() method",
    "text": "8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)  +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-best-fit-curve",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-best-fit-curve",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.4 Adding best fit curve",
    "text": "8.4 Adding best fit curve\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=1) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe default method used is loess.\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=1, method = lm) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nTo add equation and R^2 to the plot, we can use the library ggpmisc.\n\npacman::p_load(ggpmisc)\n\nstat_poly_line() is used to add lm line and stat_poly_eq() displays the equation and R-square value.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  stat_poly_line() +\n  stat_poly_eq(use_label(c(\"eq\", \"R2\"))) +\n  geom_point() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "9.1 Working with facet_wrap()",
    "text": "9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Class\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nTilde Operator:\nThe operator ~ is used to define the relationship between dependent variable and independent variables in a formula; it separates the lefthand side and righthand side.\nThe basic syntax for the lm() function is: model &lt;- lm(y ~ x1 + x2, data=df)\nThe variable name on the left side of the tilde operator (y) represents the response variable. The variable names on the right side of the tilde operator (x1, x2) represent the predictor variables.\nFor multiple predictor variables: model &lt;- lm(y ~ x1 + x2 + x3, data=df)\nFor unknown number of predictor variables: model &lt;- lm(y ~ ., data=df)\n\n9.1.1 Subsetting Data\nIf we only want to visualise classes 3A, 3B, 3C, 3D, we could subset the exam data to include only these students using filter() from the dplyr package.\n\nsub_data &lt;- exam_data %&gt;% \n  filter(CLASS %in% c('3A', '3B', '3C', '3D'))\n\nggplot(data=sub_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores for Classes 3A, 3B, 3C, 3D\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n9.1.2 Multiple Overlaid Histograms\n\nggplot(data=exam_data,\n       aes(x=MATHS, fill = GENDER)) + #Add fill to split histogram categories\n  geom_histogram(position = \"identity\", alpha=0.2, bins=20) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Gender\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nReferences: StatisticsGlobe and Facetted histograms with overlaid normal curves\n\n\n9.1.3 Grouped Data\n\nBy ColumnBy Row\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER, nrow = 2, strip.position = \"right\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "9.2 facet_grid() function",
    "text": "9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Class\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "10.1 Working with Coordinate",
    "text": "10.1 Working with Coordinate\nBar chart of ggplot2 is in vertical form by default.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n    labs(y='Number of students', \n       x='Race',\n       title = \"Number of Students by Race\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\nNote: No changes to x-, y- axis names under labs().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n    labs(y='Number of students', \n       x='Race',\n       title = \"Number of Students by Race\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "10.2 Changing the y- and x-axis range",
    "text": "10.2 Changing the y- and x-axis range\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n      labs(y='English', \n       x='Maths',\n       title = \"Graph of English against Maths scores\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n  coord_cartesian (xlim=c(0,100),\n                   ylim= c(0,100))+\n        labs(y='English', \n       x='Maths',\n       title = \"Graph of English against Maths scores\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.1 Working with ggtheme package",
    "text": "4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\ntheme_economisttheme_hc()\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90',size=0.8) +\n  theme_economist() +\n  labs(y= 'No. of \\nPupils') +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle('Distribution of Math scores')\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90',size=0.8) +\n  theme_solarized() +\n  labs(y= 'No. of \\nPupils') +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle('Distribution of Math scores')\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Refer to this vignette and ggthemes to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthemes-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.2 Working with hrbthemes package",
    "text": "4.2 Working with hrbthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used. The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\n\nOriginalWith Elements\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90') +\n  theme_ipsum() +\n  labs(y= 'No. of \\nPupils') +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle('Distribution of Math scores')\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(binwidth=5,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90') +\n  theme_ipsum(axis_title_size = 15,\n              base_size=12,\n              grid= 'Y') +\n labs(y= 'No. of \\nPupils') +\n theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle('Distribution of Math scores')\n\n\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 15,\nbase_size argument is used to increase the default axis label to 12, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.1 Creating Composite Graphics: pathwork methods",
    "text": "5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, we use ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax, such as:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.2 Combining two ggplot2 graphs",
    "text": "5.2 Combining two ggplot2 graphs\nFigure below shows a composite of two histograms created using patchwork.\n\nHorizontalVerticalChange relative area\n\n\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\nShow the code\np1 / p2\n\n\n\n\n\n\n\n\n\nShow the code\np1 + p2 + plot_layout(ncol=2,widths=c(2,1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.3 Combining three ggplot2 graphs",
    "text": "5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n/ and | Operators- Operator For Subtrack PlacementNested LayoutsAdding non-ggplot content\n\n\n\n\nShow the code\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\nShow the code\np1 + p2 - p3 + plot_layout(ncol=1)\n\n\n\n\n\n\n\n\n\nShow the code\np3 + {\n  p1 + p2 + plot_layout(ncol=1)\n}\n\n\n\n\n\n\n\n\n\nShow the code\n((p1 / p2) | p3) + grid:: textGrob('I can add \\nother content here.',\n                                   hjust=0, \n                                   x=-0, \n                                   gp=grid::gpar(font=3, \n                                                 fontsize = 12))\n\n\n\n\n\n\n\n\nTo learn more about, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.4 Creating a composite figure with tag",
    "text": "5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nEnumerationCustom / multilevel tagging\n\n\n\n\nShow the code\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I') # Can also use tag_levels ='A'\n\n\n\n\n\n\n\n\n\nShow the code\n((p1 / p2) | p3)  + \n  plot_layout(tag_level = 'new') +\n  plot_annotation(tag_levels = c('A', '1'), tag_prefix = 'Fig. ', tag_sep = '.', \n                  tag_suffix = ':')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-inset",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-inset",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.5 Creating figure with inset",
    "text": "5.5 Creating figure with inset\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n\nShow the code\np4 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np5 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np6 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Correlation between\\nEnglish & Maths scores\")\n\np6 +  inset_element(p5,\n                    left = 0.02,\n                    bottom=0.7,\n                    right= 0.5,\n                    top=1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\ntheme_economisttheme_solarized_2\n\n\n\npatchwork &lt;- ((p4/p5) | p6)\n\npatchwork & theme_economist() +\n  theme(plot.title=element_text(size =10),\n                                        axis.title.y=element_text(size = 9,\n                                                                  angle = 0,\n                                                                  vjust=0.9),\n                                         axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\npatchwork & theme_solarized_2() +\n  theme(plot.title=element_text(size =10),\n                                        axis.title.y=element_text(size = 9,\n                                                                  angle = 0,\n                                                                  vjust=0.9),\n                                         axis.title.x=element_text(size = 9))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "3.1 Tooltip effect with tooltip aesthetic",
    "text": "3.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\nSteps in creating an interactive graphic:\n\nInstead of geom_point (i.e.), use geom_point_interactive - provide at least one of the aesthetics tools (tooltip, data_id or onclick)\nCall function girafe with the ggplot object to translate graphic into a web interactive graphic.\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID (character) will be displayed. To set index as the tooltip, replace with row.names(exam_data). To set numeric values as tooltip, replace with factor(MATHS) (number).\n\nCharacter format (ID)Row IndexNumber format (Math)\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=ID),  #&lt;&lt;&lt; Interactivity at the tooltip, aes() maps objects\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL, #&lt;&lt;&lt; Scale can also be interactive\n                     breaks= NULL) +  #&lt;&lt;&lt; null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=row.names(exam_data)),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #&lt;&lt;&lt; null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=factor(MATHS)),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #&lt;&lt;&lt; null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\n\n\n\n3.1.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. We create a new column [tooltip] in exam_data by concatenating ID and Class.\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\nShow the code\nexam_data$tooltip &lt;- c(paste0(\"Name = \",\n                              exam_data$ID,\n                              \"\\n Class = \",\n                              exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=tooltip),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n  \ngirafe(ggobj=p,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n3.1.2 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by adding css declarations.\n\nBlack and bold fontItalic with increased font size\n\n\nNotice that the background colour of the tooltip is gray and the font colour is black and bold.\n\n\nShow the code\ntooltip_css &lt;- 'background-color:#dfdfeb; font-style:bold; color:black;'  #&lt;&lt;&lt;\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=tooltip),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL) +  #null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n  \ngirafe(ggobj=p,\n       width_svg = 8,\n       height_svg = 8*0.618,\n       options = list(          #&lt;&lt;&lt;\n         opts_tooltip(          #&lt;&lt;&lt;\n           css=tooltip_css\n         )\n       ))\n\n\n\n\n\n\n\n\nWe can also make the font italic and change the font size.\n\n\nShow the code\ntooltip_css &lt;- 'background-color:#dfdfeb; font-style:bold;  font-style:italic;\ncolor:black;font-size:18px;'  #&lt;&lt;&lt;\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=tooltip),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n  \ngirafe(ggobj=p,\n       width_svg = 8,\n       height_svg = 8*0.618,\n       options = list(          #&lt;&lt;&lt;\n         opts_tooltip(          #&lt;&lt;&lt;\n           css=tooltip_css\n         )\n       ))\n\n\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n3.1.3 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\nShow the code\ntooltip &lt;- function(y, ymax, accuracy = 0.01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales:: number (ymax-y, accuracy = accuracy)\n  paste(\"Mean maths scores (with standard error):\" , mean, \"+/-\", sem) #&lt;&lt;&lt; Paste the results in tooltip\n}\n\n\ngg_point &lt;- ggplot(data=exam_data,\n                   aes(x = RACE)) +\n  stat_summary(aes(y=MATHS,\n                   tooltip = after_stat(tooltip(y, ymax))),\n               fun.data = mean_se,\n               geom = GeomInteractiveCol,\n               fill = 'lightblue') +\n  stat_summary(aes(y= MATHS),\n               fun.data = mean_se,\n               geom= 'errorbar',\n               width = 0.2,\n               size = 0.2)+\n  labs(title=\"Math Scores by Race\",\n  y =\"Math Scores\") + \n  theme(axis.title.x = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=gg_point,\n       width_svg = 8,\n       height_svg = 8 * 0.618)\n\n\n\n\n\n\nExplanation of the codes above:\n\nTooltip self-defined function:\n\n\nIt takes in two arguments y and ymax from results of stat_summary() via after_stat().\naccuracy is a fixed parameter with a value of 0.01. It takes a number to round to, ie 0.01 is used to show 2 decimal places of precision.\nscales:: number is to convert number to text, with formatting.\nsem output: Since ymax = y + se, thus, sem = ymax-y\nIt outputs “Mean maths scores (with standard error): 57.44 +/- 2.03”\n\n\nStat_summary function creates 2 other geom layers. The first stat summary function has two aes mappings to visual: (1) MATHS as Y (2) tooltip output\n\n\nIt first applies mean_se method to output y, ymin, ymax for each MATHS score by RACE\nAfter this, these groups of 3 values are send into tooltip function via after_stat() helper function\nGeomInteractive makes the columns interactive so tooltips is displayed when users hover over\n\n\nThe second stat summary uses y, ymin, ymax obtained from method= mean_se to plot the error bar\n\nDocumentation of mean_se:\nstat_summary(aes(fun.data=mean_se) is default. mean_se(x, mult = 1). When input a list of values, it returns a data frame with three columns:\n\ny: The mean.\nymin: The mean minus the multiples of the standard error.\nymax: The mean plus the multiples of the standard error.\n\nThere are a few summary functions from the Hmisc package which are reformatted for use in stat_summary(). They all return aesthetics for y, ymax, and ymin.\n\nmean_cl_normal(): Returns sample mean and 95% confidence intervals assuming normality (i.e., t-distribution based)\nmean_sdl(): Returns sample mean and a confidence interval based on the standard deviation times some constant\nmean_cl_boot(): Uses a bootstrap method to determine a confidence interval for the sample mean without assuming normality.\nmedian_hilow(): Returns the median and an upper and lower quantiles.\n\n\n\n3.1.4 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nElements associated with a data_id (i.e ID) will be highlighted upon mouse over.\n\n\nShow the code\ntooltip_css &lt;- 'background-color:#dfdfeb; font-style:bold;  font-style:italic;\ncolor:black;font-size:18px;'  #&lt;&lt;&lt;\n\np &lt;- ggplot(data= exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip = ID,  #&lt;&lt;&lt; Tooltip popup\n                               data_id = ID),\n                           stackgroups = TRUE,\n                           binwidth= 1,\n                           method = 'histodot'\n                           ) +\n  scale_y_continuous( NULL,\n                      breaks = NULL) +\n  labs(x =\"Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6 *0.618,\n       #options = list(                          #&lt;&lt;&lt;\n       #opts_hover(css='fill: black;'),         #&lt;&lt;&lt;\n       #opts_hover_inv(css = 'opacity: 0.2;'))  #&lt;&lt;&lt;\n         )\n\n\n\n\n\n\nNote: the default value of the hover css is hover_css = “fill:orange;”.\n\n\n3.1.5 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(data_id = CLASS),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n  \ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(                          #&lt;&lt;&lt;\n         opts_hover(css='fill: #202020;'),      #&lt;&lt;&lt;\n         opts_hover_inv(css = 'opacity: 0.2;')  #&lt;&lt;&lt;\n         )\n       )\n\n\n\n\n\n\nNote: Different from previous example (tooltip_css is pre-defined as input to a parameter in girafe(options=list(opts_tooltip(css=tooltip_css)))), in this example the ccs customisation request are encoded directly as girafe(options=list(opts_hover(css='tooltip_css'fill:#202020;')))\n\n\n3.1.6 Combining tooltip and hover effect\nThere are times that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip = CLASS,  #&lt;&lt;&lt; Tooltip popup\n                               data_id = CLASS), #&lt;&lt;&lt;\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(                          #&lt;&lt;&lt;\n         opts_hover(css='fill: black;'),         #&lt;&lt;&lt;\n         opts_hover_inv(css = 'opacity: 0.2;')  #&lt;&lt;&lt;\n         )\n       )\n\n\n\n\n\n\n\n\n3.1.7 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick. Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\nShow the code\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n\n\n\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n3.1.8 Coordinated Linked Plots with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\n\nShow the code\nexam_data$tooltip2 &lt;- c(paste0(\"Name = \",\n                              exam_data$ID,\n                              \"\\n Class = \",\n                              exam_data$CLASS,\n                              \"\\n English Score = \",\n                              exam_data$ENGLISH,\n                              \"\\n Math Score = \",\n                              exam_data$MATHS                              \n                              ))\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = tooltip2),      #&lt;&lt;&lt; Added          \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) +    #&lt;&lt;&lt; p1 same as p2 x-axis\n  scale_y_continuous(NULL,            # suppress y axis\n                     breaks = NULL)+\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))  \n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = tooltip2),      #&lt;&lt;&lt; Added                \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) +    #&lt;&lt;&lt; p1 same as p2 x-axis\n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  labs(x =\"Distribution of English Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))  \n\ngirafe(code = print(p1 + p2),         #&lt;&lt;&lt; coordinated multiple views\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nNote: hover effects can be encoded directly in girafe unlike tooltips and data_id . Added tooltip aes effects as well.\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "4.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example an interactive plot created by using plot_ly()\n\n\nShow the code\nplot_ly(data = exam_data,\n        x = ~MATHS,\n        y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.2 Working with visual variable: plot_ly() method",
    "text": "4.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE). Click on the colour symbol at the legend to only show the RACE selected.\n\n\nShow the code\nplot_ly(data = exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "4.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\nBasicCustomised Tooltip\n\n\n\np &lt;- ggplot(data = exam_data,\n            aes(x= MATHS,\n                y= ENGLISH)) +\n  geom_point (size =1) +\n  geom_smooth(method=lm)+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  labs(y= 'ENGLISH') +                                    \n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +   #&lt;&lt;&lt; does not work in ggplotly\n  labs(title = 'English against Math scores', \n       x = 'Math',\n       y = 'English') +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        axis.title.x = element_text(size = 10, face = \"bold\"),\n        axis.title.y = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")\n        )\n\nggplotly(p)\n\n\n\n\n\n\n\nTooltip includes: Class, StudentID, Gender, Race, Math, and English scores.\n\np_c &lt;- ggplot(data = exam_data,\n            aes(x= MATHS,\n                y= ENGLISH,\n                color=CLASS,\n                label1=ID,      #&lt;&lt;&lt;\n                label2=GENDER,  #&lt;&lt;&lt;\n                label3=RACE,    #&lt;&lt;&lt;\n                label4=MATHS,   #&lt;&lt;&lt;\n                label5=ENGLISH  #&lt;&lt;&lt;\n                )) +\n  geom_point (size =1) +\n  geom_smooth(method=lm)+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle('English and Math scores')+\n  labs(title = 'English against Math scores', \n       x = 'Math',\n       y = 'English',\n       color=\"Class\") +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        axis.title.x = element_text(size = 10, face = \"bold\"),\n        axis.title.y = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"),\n        legend.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")\n        )  \n\nggplotly(p_c, tooltip=c(\"label1\", \"label2\", \"label3\", \"label4\", \"label5\")) #&lt;&lt;&lt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-linked-plots-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-linked-plots-with-plotly",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.4 Coordinated Linked Plots with plotly",
    "text": "4.4 Coordinated Linked Plots with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\nShow the code\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d, #&lt;&lt;&lt; the data here is using d, rather than exam_data\n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n    theme(plot.title = element_text(size = 14, face = \"bold\"),\n        axis.title.x = element_text(size = 10, face = \"bold\"),\n        axis.title.y = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")\n        ) \n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        axis.title.x = element_text(size = 10, face = \"bold\"),\n        axis.title.y = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")\n        ) +\n labs(x='Maths', \n       y='Science')\n\nsubplot(ggplotly(p1),\n        ggplotly(p2)) %&gt;% \n  layout(title = \"Side-by-Side Subplots\")\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk\n\nDifference between 3.1.8 and 4.4\n3.1.8:interactive geom functions of ggiraph & girafe(patchwork) used\n4.4 : highlight_key() , normal ggplot + geom_obj , subplot(ggplot(p1), ggplot(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#sliders-with-animated-gapminder-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#sliders-with-animated-gapminder-data",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.5 Sliders with animated Gapminder data",
    "text": "4.5 Sliders with animated Gapminder data\nKey arguments: - animation_opts() function here to change properties of the plotly animation - frame controls the amount of time between transitions (in milliseconds) - redraw = FALSE option means that the base plot won’t be redrawn at every transition.\nHere’s a plot that shows life expectancy and GDP evolving over time.\n\nlibrary(gapminder)\n\np &lt;- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.1) +\n  geom_point(aes(frame = year, ids = country)) +\n  scale_x_continuous(trans = \"log10\") +\n    theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"),\n        legend.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))  \n\nggplotly(p) %&gt;% \n  animation_opts(1000, redraw = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "5.1 Interactive Data Table: DT package",
    "text": "5.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\n\nShow the code\nDT::datatable(exam_data, \n              caption = htmltools::tags$caption(style = \"caption-side: bottom; text-align: center;\",\n                                                \"Table of \", htmltools::em(\"Exam Data for Primary 3\")),\n              class='compact',\n              options = list(pageLength = 3))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "5.2 Linked brushing: crosstalk method",
    "text": "5.2 Linked brushing: crosstalk method\n\n\nShow the code\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n    theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))+\n  ggtitle(\"English vs Math scores\")\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,\n                  DT::datatable(d, options = list(pageLength = 3)),\n                  widths=5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhighlight_key(): used to create a unique identifier for each row in a data frame, based on its values. The resulting identifier is used to keep track of the rows that have been selected or highlighted on a plot, particularly when using the highlight() function.\nplotly_selected: a built-in plotly attribute that represents the currently selected points on the plot.\nSo, highlight(ggplotly(p), \"plotly_selected\") is taking the ggplotly(p) object and highlighting the currently selected points on the plot by changing their appearance in some way, such as by changing their color or size.\ncrosstalk::bscols(): creates a Bootstrap column layout. The first argument is the left column, and the second argument is the right column. The widths argument is used to specify the relative width of the two columns, with the default value being 6 for both.\ncrosstalk::bscols(): particularly useful when working with interactive data visualizations, as it allows for easy linking of different components of the dashboard, such as brushing and highlighting on the plot and filtering on the data table."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "6.1 ggiraph",
    "text": "6.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "6.2 plotly for R",
    "text": "6.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "1.1 Basic concepts of animation",
    "text": "1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "1.2 Terminology",
    "text": "1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#static-population-bubble-plot",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "3.1 Static population bubble plot",
    "text": "3.1 Static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot. A bubble plot is created when a third numeric variable is assigned to size = argument inside a ggplot with geom_point.\n\n\nShow the code\np &lt;- ggplot(data= globalPop,\n       aes(x= Old,\n           y=Young,\n           size= Population,\n           color=Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_color_manual(values=country_colors) +  #&lt;&lt;&lt; 'country_colors' from Gapminder lib\n  scale_size(range= c(2,12)) +\n  labs(title = \"Age Distribution Across Time\",\n      subtitle ='Year: {frame_time}',\n       x = '% Aged',\n       y= '% Young')+\n  theme(legend.position = \"bottom\",\n      plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\np\n\n\n\n\n\n\nThe scale_size(range= c(2,12)) sets the range of point sizes to be used in the plot to between 2 and 12.\nPopulation is mapped to size aes in ggplot, thus this range parameter controls the min and max size of the points.\n\nUsing scale_color_viridis_d() :\nThe code below uses scale_color_viridis_d() discrete colour scale instead, and does not require Gapminder package to be loaded.\n\n\nShow the code\np2 &lt;- ggplot(data= globalPop,\n       aes(x= Old,\n           y=Young,\n           size= Population,\n           color=Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_color_viridis_d(option=\"plasma\")+    #&lt;&lt;&lt;\n  scale_size(range= c(2,12)) +\n  labs(title = \"Age Distribution Across Time\",\n      subtitle ='Year: {frame_time}',\n       x = '% Aged',\n       y= '% Young')+\n  theme(legend.position = \"bottom\",\n      plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))  \n\np2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-bubble-plot",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "3.2 Animated bubble plot",
    "text": "3.2 Animated bubble plot\nNow you can incorporate the animation into a basic ggplot graph. Take note that when you run this code, the visual takes some time to render. This is because RStudio is creating a gif representation of your animated chart."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Basic",
    "text": "Basic\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through a continuous variable, where there are distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\nTransition through distinct countries in time\n\n\nShow the code\np +\n  transition_time(Year) +\n  ease_aes(\"linear\")\n\n\n\n\n\nUsing scale_color_viridis_d() :\n\n\nShow the code\np2 +\n  transition_time(Year) +\n  ease_aes(\"linear\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#labelling-with-geom_text",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#labelling-with-geom_text",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Labelling with geom_text",
    "text": "Labelling with geom_text\nText geoms are useful for labeling plots. They can be used by themselves as scatterplots or in combination with other geoms, for example, labeling points or for annotating the height of bars. geom_text() adds only text to the plot. geom_label() draws a rectangle behind the text, making it easier to read.\nI thought it would be clearer for the geom_point and geom_text to be placed side-by-side so I won’t have to refer to a legend, but the trade-off is a messier overlapped plot.\n\n\nShow the code\npt &lt;- ggplot(data= globalPop,\n       aes(x= Old,\n           y=Young,\n           size= Population,\n           color=Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n    scale_color_manual(values=country_colors) +  #&lt;&lt;&lt; 'country_colors' from Gapminder lib\n    scale_size(range= c(2,12)) +\n  labs(title = \"Age Distribution Across Time\",\n      subtitle ='Year: {frame_time}',\n         x = '% Aged',\n         y= '% Young')+\n    geom_text(data=globalPop,                #&lt;&lt;&lt;\n            aes(x=Old + 1.2,                 #&lt;&lt;&lt; Add/minus a bit to or from the x mapping to shift labels left/right\n                y=Young + 1.2,               #&lt;&lt;&lt; Add/minus a bit to or from the y mapping to shift labels up/down  \n                label=Country,\n                color = \"Black\",             #&lt;&lt;&lt; Some Country colours were too light when color = Country was used\n                hjust=0,\n                vjust= 1.2),\n                size=2.5,\n                show.legend = FALSE)+        #&lt;&lt;&lt; Should be outside of aes() of geom_text()\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +  \n  transition_time(Year) +\n  ease_aes(\"linear\")\n\npt\n\n\n\n\n\nReplacing geom_text() with geom_text_repel() from our last chapter gives us the following results.\n\n\nShow the code\npr &lt;- ggplot(data= globalPop,\n       aes(x= Old,\n           y=Young,\n           size= Population,\n           color=Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n    scale_color_manual(values=country_colors) +  #&lt;&lt;&lt; 'country_colors' from Gapminder lib\n    scale_size(range= c(2,12)) +\n  labs(title = \"Age Distribution Across Time\",\n      subtitle ='Year: {frame_time}',\n         x = '% Aged',\n         y= '% Young')+\n  geom_text_repel(data=globalPop,            #&lt;&lt;&lt;\n            aes(x=Old + 1.2,                 #&lt;&lt;&lt; Add/minus a bit to or from the x mapping to shift labels left/right\n                y=Young + 1.2,               #&lt;&lt;&lt; Add/minus a bit to or from the y mapping to shift labels up/down \n                label=Country,\n                color = \"Black\",             #&lt;&lt;&lt; Some Country colours were too light when color = Country was used\n                hjust=0,\n                vjust= 1.2),\n            size=2.5,\n            show.legend = FALSE,             #&lt;&lt;&lt; Should be outside of aes() of geom_text()\n            max.overlaps=)+\n  \n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  transition_time(Year) +\n  ease_aes(\"linear\")\n\npr\n\n\n\n\n\ngeom_point with borders no fill with geom_text_repel from ggrepel\n\n\nShow the code\nggplot(data= globalPop,\n       aes(x= Old,\n           y=Young,\n           size= Population,\n           color=Country,\n           label=Country)) +                   #&lt;&lt;&lt; Need to add for geom_text_s to work\n  geom_point(alpha = 0.85,\n             shape=21,\n             stroke =2,\n             show.legend = FALSE) +\n  scale_color_manual(values=country_colors) +  #&lt;&lt;&lt; 'country_colors' from Gapminder lib\n  scale_size(range= c(2,12)) +\n  labs(title = \"Age Distribution Across Time\",\n      subtitle ='Year: {frame_time}',\n       x = '% Aged',\n       y= '% Young')+\n  geom_text_repel(data=globalPop,            #&lt;&lt;&lt;\n            aes(x=Old + 1.2,                 #&lt;&lt;&lt; Add/minus a bit to or from the x mapping to shift labels left/right\n                y=Young + 1.2,               #&lt;&lt;&lt; Add/minus a bit to or from the y mapping to shift labels up/down \n                label=Country,\n                color = \"Black\",             #&lt;&lt;&lt; Some Country colours were too light when color = Country was used\n                hjust=0,\n                vjust= 1.2),\n            size=2.5,\n            show.legend = FALSE,             #&lt;&lt;&lt; Should be outside of aes() of geom_text()\n            max.overlaps=)+\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  transition_time(Year) +\n  ease_aes(\"linear\")\n\n\n\n\n\nUsinggeom_text_s() from ggpp.\n\n\nShow the code\nggplot(data= globalPop,\n       aes(x= Old,\n           y=Young,\n           size= Population,\n           color=Country,\n           label=Country)) +                   #&lt;&lt;&lt; Need to add for geom_text_s to work\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_color_manual(values=country_colors) +  #&lt;&lt;&lt; 'country_colors' from Gapminder lib\n  scale_size(range= c(2,12)) +\n  labs(title = \"Age Distribution Across Time\",\n      subtitle ='Year: {frame_time}',\n       x = '% Aged',\n       y= '% Young')+\n  geom_text_s(nudge_x=2, show.legend = FALSE)+\n  expand_limits(x=10) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  transition_time(Year) +\n  ease_aes(\"linear\")\n\n\n\n\n\nYou can use anim_save(\"file_location\", plot) function to export animated chart in GIF format.\n\nanim_save(filename=\"Images/animation.gif\", pr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#making-year-more-visible-wip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#making-year-more-visible-wip",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Making Year more visible ~WIP",
    "text": "Making Year more visible ~WIP\nWith the animation, it’s more engaging to see how demography has changed over time in different countries. The date is included in the title, but it is omitted from the graph, which prevents the title from being used for other purposes.\n\n\nShow the code\nggplot(data= globalPop,\n       aes(x= Old,\n           y=Young,\n           size= Population,\n           color=Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  geom_text(aes(x=min(Old),\n                y=min(Young),\n                label=as.factor(Year)),\n            hjust= -1.9,\n            vjust = -7.2,\n            alpha = 0.2,\n            col = \"gray\",\n            size= 20) +\n  scale_color_manual(values=country_colors) +  #&lt;&lt;&lt; 'country_colors' from Gapminder lib\n  scale_size(range= c(2,12)) +\n  labs(title = \"Age Distribution Across Time\",\n       x = '% Aged',\n       y= '% Young')+\n  geom_text(data=globalPop,                  #&lt;&lt;&lt;\n            aes(x=Old + 1.2,                 #&lt;&lt;&lt; Add/minus a bit to or from the x mapping to shift labels left/right\n                y=Young + 1.2,               #&lt;&lt;&lt; Add/minus a bit to or from the y mapping to shift labels up/down  \n                label=Country,\n                color = \"Black\",             #&lt;&lt;&lt; Some Country colours were too light when color = Country was used\n                hjust=0,\n                vjust= 1.2),\n                size=2.5,\n                show.legend = FALSE)+        #&lt;&lt;&lt; Should be outside of aes() of geom_text()  \n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))+\n  transition_time(Year) +\n  ease_aes(\"linear\")  \n\n\n\n\n\nNote: Not sure why this didn’t render with the Year like the GIF in RStudio, still debugging :)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#create-facets-by-continent",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#create-facets-by-continent",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Create facets by continent",
    "text": "Create facets by continent\nCombining with facet_wrap() allows us to arrange the plots in a more space efficient manner when we have a single variable with many levels, such as the 6 unique Continents.\n\n\nShow the code\np + \n  facet_wrap(~Continent) +\n  transition_time(Year)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#let-the-view-follow-the-data-in-each-frame",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#let-the-view-follow-the-data-in-each-frame",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Let the view follow the data in each frame",
    "text": "Let the view follow the data in each frame\n\n\nShow the code\np + transition_time(Year) +\n  view_follow(fixed_y = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#display-preceding-frames-with-a-gradual-decrease-in-size",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#display-preceding-frames-with-a-gradual-decrease-in-size",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Display preceding frames with a gradual decrease in size",
    "text": "Display preceding frames with a gradual decrease in size\nBy displaying the most recent frames up to the current, this shadow is intended to create a small wake after data. You can choose to gradually reduce the shadow’s size and/or opacity. The duration of the wake is not specified in absolute frames, as this would subject the animation to framerate changes. Rather than that, it is expressed as a percentage of the total duration of the animation.\n\n\nShow the code\np + transition_time(Year) +\n  shadow_wake(wake_length = 0.1, alpha = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#show-the-original-data-as-background-marks",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#show-the-original-data-as-background-marks",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Show the original data as background marks",
    "text": "Show the original data as background marks\n\n\nShow the code\np + transition_time(Year) +\n  shadow_mark(alpha = 0.3, size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-line-graph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-line-graph",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "3.3 Animated Line Graph",
    "text": "3.3 Animated Line Graph\n\n\nShow the code\nl &lt;- ggplot(\n  globalPop,\n  aes(Year, Old, group = Continent, color = Continent),\n  ) +\n  geom_line(show.legend = FALSE) +\n  scale_color_viridis_d() +\n  labs(x = \"Year\", y = \"% Aged\", title=\"% Aged Across Years\")+\n  geom_text(data=globalPop,              #&lt;&lt;&lt;\n            aes(x=Year,\n                y=Old,\n                label=Continent,\n                color=Continent,\n                hjust=0,\n                size=10),\n                show.legend = FALSE)+\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"))\n\n\n\n3.3.1 Reveal data along a given dimension\nReveal by day (x-axis):\n\n\nShow the code\nl + \n  geom_point() +\n  transition_reveal(Year)\n\n\n\n\n\nAnimation looks jumpy because there are a lot of countries for each continent for every year."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.1 Building an animated bubble plot: ggplotly() method\nThe animated bubble plot below includes a play/pause button and a slider component for controlling the animation.\nNote: - Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\n\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nShow the code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,    #&lt;&lt;&lt; perform aes mapping for each frame\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')+\n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2 Building an animated bubble plot: plot_ly() method\n\n\nShow the code\nbp &lt;- globalPop %&gt;% \n  plot_ly( x = ~Old,\n           y= ~Young,\n           color = ~Continent,#&lt;&lt; 6 unique\n           frame= ~Year,\n           text= ~Country,\n           hoverinfo='text',\n           type = 'scatter',\n           mode= 'markers')\n\n\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "3.1 Plotting ridgeline graph: ggridges method",
    "text": "3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n3.1.1 geom_density_ridges\n\n\nShow the code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(\n    #panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )\n\n\n\n\n\n\nInsights:\n\nAll density plots in 1 column to give the same context.\nDensity plot for 3B narrower than 3A. 3A has bigger variability while students in 3B performs quite similarly.\n3C and 3H have 2 humps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "3.2 Varying fill colors along the x axis",
    "text": "3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nShow the code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    color='#8da3ca',\n    linewidth=1.05) +\n  scale_color_continuous_sequential('Purple-Blue')+\n  scale_fill_continuous_sequential('Purple-Blue', name='displ')+\n  scale_x_continuous(\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  labs(x = \"English Score\",\n       y = \"\",\n       title=\"Colour transition from light to dark as scores improve.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )  \n\n\n\n\n\n\nObservations:\n\nColour intensity to represent range of scores.\nWith facets, 1 legend for each facet so hard to compare across groups.\n\n\n\n3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()+\n  labs(x = \"English\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    #legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n\n\n\n\n\n\nInsights:\n\nColour intensity to represent percentile of values.\nTop 10% of 3A is doing better than 3B, but lower percentile of 3A and 3B are similar.\n\n\n\n\n3.4 Ridgeline plots with quantile lines\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()+\n  labs(x = \"English\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()+\n  labs(x = \"English\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "4.1 Plotting a Half Eye graph",
    "text": "4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  labs(x = \"\",\n       y = \"English\\nScore\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "4.2 Adding the boxplot with geom_boxplot()",
    "text": "4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  labs(x = \"\",\n       y = \"English\\nScore\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2) +\n  labs(x = \"\",\n       y = \"English\\nScore\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )    \n\n\n\n\n\n\n4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance.\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  labs(x = \"\",\n       y = \"English Score\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )  +\n\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#shaped-jitters",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#shaped-jitters",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "5.1 |-shaped jitters",
    "text": "5.1 |-shaped jitters\n\n\nShow the code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = RACE, \n           color=RACE, \n           #fill=RACE\n           )) +\n  theme_ridges()+\n  geom_density_ridges(jittered_points=TRUE,\n                      position='raincloud',\n                      alpha = 0.7,\n                      scale=0.9,\n                      point_shape = '|',\n                      point_size = 3,\n                      ) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  scale_color_nord('victory_bonds')+\n  scale_fill_nord('victory_bonds')+\n  labs(x = \"English Score\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.x = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#with-jittered-points",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#with-jittered-points",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "5.2 With Jittered Points",
    "text": "5.2 With Jittered Points\n\n\nShow the code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = RACE,\n       color= RACE,\n       fill= RACE)) +\n  theme_ridges()+\n  geom_density_ridges(jittered_points=TRUE,\n                      aes(point_color=RACE),\n                      alpha = 0.7,\n                      point_size = 1.5,\n                      ) +\n  scale_fill_discrete_qualitative('Set 3')+\n  scale_color_discrete_qualitative('Dark 3')+\n\n\n  labs(x = \"English Score\",\n       y = \"\",\n       title=\"Uneven distribution across classes.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.x = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")  \n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "3.1 One-sample test: gghistostats() method",
    "text": "3.1 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nA one-sample test is a statistical hypothesis test used to determine whether the mean of a single sample of data differs significantly from a known or hypothesized value.\nIt is a statistical test that compares the mean of a sample to a specified value, such as a population mean, to see if there is enough evidence to reject the null hypothesis that the sample comes from a population with the specified mean.\n\nH0: EL average score is 60.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,          #&lt;&lt; H0: EL = 60\n  xlab = \"English scores\"\n) +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")) \n\n\n\n\n\n3.1.1 Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\nHow to interpret Bayes Factor\nA Bayes Factor can be any positive number.\n\n\n3.1.2 Perform a one-sample wilcoxon test\nReference website from r-bloggers\nThe one-sample Wilcoxon test (non parametric) will tell us whether the scores are significantly different from 60 or not (and thus whether they are different from 60 in the population or not)\nH0: EL scores = 60\nH1: EL scores != 60\nThe scores are assumed to be independent (a student’s score is not impacted or influenced by the score of another student)\n\nwilcox.test(exam$ENGLISH,\n            mu = 60)\n\n\n    Wilcoxon signed rank test with continuity correction\n\ndata:  exam$ENGLISH\nV = 38743, p-value = 3.435e-16\nalternative hypothesis: true location is not equal to 60\n\n\nInterpretation\nP-value&lt;0.05, we have enough statistical evidence to reject the null hypothesis and conclude that the EL scores are significantly different from 60.\n\nBy default, it is a two-tailed test that is done. As for the t.test() function, we can specify that a one-sided test is required by using either the alternative = \"greater\" or alternative = \"less\" argument in the wilcox.test() function.\n\nCombine statistical test and plot\n\nset.seed(1234)\n\ngghistostats(data=exam,\n             x = ENGLISH,\n             type='nonparametric', #nonparametric (median) = Wilcoxon, parametric = t-test (default is look for mean and unequal variance method)\n             test.value =60,\n             conf.level = 0.95,\n             xlab = 'English scores') +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"))   \n\n\n\n\nDid we forget to check if English scores follow a normal distribution? Use ad.test from nortest library.\nH0: EL scores follows normal distribution\nH1: EL scores do not follow normal distribution.\n\nad.test(exam$ENGLISH)\n\n\n    Anderson-Darling normality test\n\ndata:  exam$ENGLISH\nA = 4.3661, p-value = 7.341e-11\n\n\nResults from the Anderson-Darling normality test shows enough statistical evidence to reject the null hypothesis and conclude that the EL scores do not follow normal distribution . Thus the use of non parametric test is correct.\n\nOn Parametric and Non-parametric types\ntype= parametric: default look for mean and assumes unequal variance method\ntype = Non parametric: student-t test and use median (not mean!!)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "3.2 Two-sample mean test: ggbetweenstats()",
    "text": "3.2 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender (independent).\nH0: Mean of F and M Math scores are the same.\nH1: Mean of F and M Math scores are not the same.\n\nggbetweenstats(data=exam,\n               x=GENDER,\n               y=MATHS,\n               type='np',        #&lt;&lt; Non-parametric\n               messages=FALSE) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"))     \n\n\n\n\nSince p-value &gt; 0.05, we do not have enough statistical evidence to reject the null hypothesis that mean of Math scores of both gender are the same.\nHowever, if we check for normality of Math scores of each gender.\n\n# Perform Shapiro-Wilk test on math scores by gender\nshapiro_test &lt;- by(exam$MATHS, exam$GENDER, shapiro.test)\n\n# Extract p-values\np_values &lt;- sapply(shapiro_test, function(x) x$p.value)\n\n# Print results\nprint(p_values)\n\n      Female         Male \n1.603536e-07 6.268520e-08 \n\n\n\nThe by() function is used to apply a function to subsets of a data frame or vector split by one or more factors. In the above code, we use by() to split the math_score column by gender, and apply the shapiro.test() function to each group.\n\nH0: Math scores by gender follows normal distribution.\nH1: Math scores by gender do not follow normal distribution.\nFrom the Shapiro-Wilk test results, we have enough statistical evidence to reject the null hypothesis and conclude that the Math scores by gender does not follow a normal distribution. Thus the use of ‘np’ is appropriate."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#one-way-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#one-way-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "3.3 One-way ANOVA Test: ggbetweenstats() method",
    "text": "3.3 One-way ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race (Independent 4 sample mean).\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci=TRUE,\n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",  # 'ns': shows only non-sig, 's': shows only sig, 'all': both \n  p.adjust.method = \"fdr\",\n  messages = FALSE\n) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"))  \n\n\n\n## might need to call library(PMCMRplus) and library(rstantools) if this code chunck doesnt work.\n\nSince p-value &lt; 0.05, we have enough statistical evidence to reject the null hypothesis and conclude that NOT ALL means of EL scores by race are the same. The results shows that the means of EL scores of Chinese, Indian and Malay are significantly different. This is also highlighted in the bracket at the top of the plot!\nOnce again, lets go backwards and confirm that the distribution of EL scores by RACE conforms to normal distribution.\n\n# Perform Shapiro-Wilk test on math scores by gender\nshapiro_test &lt;- by(exam$ENGLISH, exam$RACE, shapiro.test)\n\n# Extract p-values\np_values &lt;- sapply(shapiro_test, function(x) x$p.value)\n\n# Print results\nprint(p_values)\n\n     Chinese       Indian        Malay       Others \n1.305153e-07 8.482600e-01 1.251020e-02 5.181740e-01 \n\n\nH0: EL scores by Race follow normal distribution.\nH1: EL scores by Race do not follow normal distribution.\nThe results of the Shapiro-Wilk test shows p_value of all EL score distribution by race follows normal distribution.\n\n3.3.1 ggbetweenstats - Summary of tests\nType argument entered by us will determine the centrality tendency measure displayed\n\nmean for parametric statistics\nmedian for non-parametric statistics\ntrimmed mean for robust statistics\nMAP estimator for Bayesian statistics"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "3.4 Significant Test of Correlation: ggscatterstats()",
    "text": "3.4 Significant Test of Correlation: ggscatterstats()\nEarlier, we have checked that EL scores do not follow a normal distribution. Now we will do the same for Math scores.\n\nad.test(exam$MATHS)\n\n\n    Anderson-Darling normality test\n\ndata:  exam$MATHS\nA = 7.9125, p-value &lt; 2.2e-16\n\n\nSince the p-value &lt; 0.05, we have enough statistical evidence to reject the null hypothesis and conclude that the Math scores also do not follow normal distribution.\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  type='nonparametric', # 'parametric', 'robust', 'bayes'\n  marginal = FALSE,\n  ) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")) \n\n\n\n\nThe plot above uses type = “non-parametric” as both Math and EL scores do not follow normal distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-association-dependence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-association-dependence-ggbarstats-methods",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "3.5 Significant Test of Association (Dependence) : ggbarstats() methods",
    "text": "3.5 Significant Test of Association (Dependence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\nWe will create a new dataframe exam1 similar to exam df but with extra column called ‘MATHS_bins’.\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nexam1\n\n# A tibble: 322 × 8\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE MATHS_bins\n   &lt;chr&gt;      &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;     \n 1 Student321 3I    Male   Malay        21     9      15 (0,60]    \n 2 Student305 3I    Female Malay        24    22      16 (0,60]    \n 3 Student289 3H    Male   Chinese      26    16      16 (0,60]    \n 4 Student227 3F    Male   Chinese      27    77      31 (75,85]   \n 5 Student318 3I    Male   Malay        27    11      25 (0,60]    \n 6 Student306 3I    Female Malay        31    16      16 (0,60]    \n 7 Student313 3I    Male   Chinese      31    21      25 (0,60]    \n 8 Student316 3I    Male   Malay        31    18      27 (0,60]    \n 9 Student312 3I    Male   Malay        33    19      15 (0,60]    \n10 Student297 3H    Male   Indian       34    49      37 (0,60]    \n# ℹ 312 more rows\n\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association (2 categorical variables).\nH0: There is no association between math_bin and gender.\nH1: There is an association between math_bin and gender.\n\nggbarstats(exam1,\n            x=MATHS_bins,\n            y=GENDER) +\n  \n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")) \n\n\n\n\nFrom the results above , p-value &gt; 0.05 thus we have not enough statistical evidence to reject the null hypothesis that there is not association between the math_bin and gender variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started-1",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "4.1 Getting Started",
    "text": "4.1 Getting Started\n\nInstalling and loading the required libraries\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\n\nImporting Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls('data/ToyotaCorolla.xls',\n                       sheet='data')\n\n\nglimpse(car_resale)\n\nRows: 1,436\nColumns: 38\n$ Id               &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ Model            &lt;chr&gt; \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\", \"TOY…\n$ Price            &lt;dbl&gt; 13500, 13750, 13950, 14950, 13750, 12950, 16900, 1860…\n$ Age_08_04        &lt;dbl&gt; 23, 23, 24, 26, 30, 32, 27, 30, 27, 23, 25, 22, 25, 3…\n$ Mfg_Month        &lt;dbl&gt; 10, 10, 9, 7, 3, 1, 6, 3, 6, 10, 8, 11, 8, 2, 1, 5, 3…\n$ Mfg_Year         &lt;dbl&gt; 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002,…\n$ KM               &lt;dbl&gt; 46986, 72937, 41711, 48000, 38500, 61000, 94612, 7588…\n$ Fuel_Type        &lt;chr&gt; \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ HP               &lt;dbl&gt; 90, 90, 90, 90, 90, 90, 90, 90, 192, 69, 192, 192, 19…\n$ Met_Color        &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1,…\n$ Color            &lt;chr&gt; \"Blue\", \"Silver\", \"Blue\", \"Black\", \"Black\", \"White\", …\n$ Automatic        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ CC               &lt;dbl&gt; 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 1800,…\n$ Doors            &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ Cylinders        &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ Gears            &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5,…\n$ Quarterly_Tax    &lt;dbl&gt; 210, 210, 210, 210, 210, 210, 210, 210, 100, 185, 100…\n$ Weight           &lt;dbl&gt; 1165, 1165, 1165, 1165, 1170, 1170, 1245, 1245, 1185,…\n$ Mfr_Guarantee    &lt;dbl&gt; 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,…\n$ BOVAG_Guarantee  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,…\n$ Guarantee_Period &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 3, 1…\n$ ABS              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_1         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_2         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,…\n$ Airco            &lt;dbl&gt; 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Automatic_airco  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,…\n$ Boardcomputer    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0,…\n$ CD_Player        &lt;dbl&gt; 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0,…\n$ Central_Lock     &lt;dbl&gt; 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Powered_Windows  &lt;dbl&gt; 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Power_Steering   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Radio            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,…\n$ Mistlamps        &lt;dbl&gt; 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,…\n$ Sport_Model      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,…\n$ Backseat_Divider &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0,…\n$ Metallic_Rim     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,…\n$ Radio_cassette   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,…\n$ Tow_Bar          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,…\n\n\nNotice that the output object car_resale is a tibble data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "4.2 Multiple Regression Model using lm()",
    "text": "4.2 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + \n              Mfg_Year + \n              KM + \n              Weight + \n              Guarantee_Period,\n            data=car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "4.3 Model Diagnostic: checking for multicolinearity",
    "text": "4.3 Model Diagnostic: checking for multicolinearity\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")) \n\n\n\n\nWe can see high collinearity between Age and Mfg_Year. One is derived from the other. We should remove one of them and repeat muliti collinearity check again for the new model."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "4.4 Model Diagnostic: checking normality assumption",
    "text": "4.4 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\nNotice that the Mfg_Year variable has been removed from the independent variables list.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + \n              #Mfg_Year +        #&lt;&lt;\n              KM + \n              Weight + \n              Guarantee_Period,\n            data=car_resale)\n\n\ncheck_c1 &lt;- check_collinearity(model1)\nplot(check_c1) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"))  \n\n\n\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")) \n\n\n\n\n\nRecap: Assumptions of linear regression\nIn linear regression, one of the key assumptions is that the residuals (the differences between the predicted values and the actual values) are normally distributed. The normality assumption is important because it affects the validity of statistical inference procedures such as hypothesis testing and confidence intervals.\nIf the residuals are not normally distributed, it may indicate that the linear regression model is not a good fit for the data and that alternative modeling approaches may be needed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "4.5 Model Diagnostic: Check model for homogeneity of variances",
    "text": "4.5 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\nHeteroscedasticity refers to a situation where the variance of the errors (or residuals) in the linear regression model is not constant across different levels of the predictor variable(s).\nIf heteroscedasticity is detected, there are several ways to address it, including transforming the data, using weighted least squares regression, or using robust standard errors. In DAl, we rebuild another model by creating subclasses out of the original Y variable.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")) \n\n\n\n\nFrom the graph above, there is a slight sign of heteroscedasticity as the residuals seem to be funnelled outwards as the fitted values increase."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic-complete-check",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "4.6 Model Diagnostic: Complete check",
    "text": "4.6 Model Diagnostic: Complete check\nWe can also perform the complete check by using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "4.7 Visualising Regression Parameters: see() methods",
    "text": "4.7 Visualising Regression Parameters: see() methods\nIn the code below, plot() of see package and parameters() of parameters package are used to visualise the parameters of a regression model.\n\nplot(parameters(model1)) +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Exercise 4b: Visualising Statistical Analysis",
    "section": "4.8 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "4.8 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\") +\n  theme(plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "4.1 Visualizing the uncertainty of point estimates",
    "text": "4.1 Visualizing the uncertainty of point estimates\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\nstat_pointinterval means points and multiple intervals. The default confidence interval us 95%. To change the level to 99%, add conf.level = 0.99 to stat_pointinterval function.\nTake note that the default .width values are set to c(0.66, 0.95) confidence intervals.\n\n\nShow the code\nexam %&gt;% \n  ggplot(aes(x=RACE,       #&lt;&lt; plot the base layer\n             y=MATHS)) +\n  stat_pointinterval() +   #&lt;&lt; .width=c(0.66,0.95)\n  labs(\n    title='Visualising confidence intervals of mean math score',\n    subtitle = \"Mean Point + Multiple-interval plot 66% and 95%\",\n       x= \"Race\",\n       y= \"Math\") +  \n  theme(\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.y = element_text(),\n    axis.text.x = element_text(angle = 0, hjust = 0.5),\n    axis.title = element_text(),\n    axis.line = element_line(linewidth = 0.2), \n    plot.title = element_text(hjust=0, face=\"bold\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n    )\n\n\n\n\n\nSome of the arguments:\n\n.width: For intervals, the interval width as a numeric value in [0, 1]. For slabs, the width of the smallest interval containing that value of the slab.\npoint_interval: This function determines the point summary (typically mean, median, or mode) and interval type (quantile interval, qi; highest-density interval, hdi; or highest-density continuous interval, hdci)\n\n\n\nShow the code\nexam %&gt;%\n      ggplot(aes(x = RACE, y = MATHS)) +\n      stat_pointinterval(\n        .width = 0.95,       #&lt;&lt; \n        .point = median,     #&lt;&lt; \n        .interval = qi) +    #&lt;&lt; \n  labs(\n    title='Visualising confidence intervals of mean math score',\n    subtitle = \"Mean Point + Multiple-interval plot, 95% only\",\n       x= \"Race\",\n       y= \"Math\") +  \n  theme(\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.y = element_text(),\n    axis.text.x = element_text(angle = 0, hjust = 0.5),\n    axis.title = element_text(),\n    axis.line = element_line(linewidth = 0.2), \n    plot.title = element_text(hjust=0, face=\"bold\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n    )\n\n\n\n\n\n\n\nShow the code\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  \n  #Using stat_pointinterval to plot the points and intervals\n  stat_pointinterval(\n    .width = c(0.95,0.99), #&lt;&lt;\n  .point = median,\n  .interval = qi,\n  aes(interval_color=stat(level)),\n  show.legend = FALSE) +\n  \n  #Defining the color of the intervals \n  scale_color_manual(\n    values = c(\"#73b2c4\", \"#f27279\"),\n    aesthetics = \"interval_color\") +\n  \n  #Title, subtitle, and caption\n    labs(\n    title='Visualising confidence intervals of mean math score',\n    subtitle = \"Mean Point + Multiple-interval plot, 95% and 99%\",\n       x= \"Race\",\n       y= \"Math\") +  \n  \n  \n  theme(\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.y = element_text(),\n    axis.text.x = element_text(angle = 0, hjust = 0.5),\n    axis.title = element_text(),\n    axis.line = element_line(linewidth = 0.2), \n    plot.title = element_text(hjust=0, face=\"bold\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n    )  \n\n\n\n\n\n\n\nstat(level) calculates the confidence interval limits based on the specified conf.level argument\ninterval_color maps the calculated interval color to the interval_color argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#using-stat_gradientinterval",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#using-stat_gradientinterval",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "4.2 Using stat_gradientinterval()",
    "text": "4.2 Using stat_gradientinterval()\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow the code\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"#d18a7d\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")+\n  theme(\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.y = element_text(),\n    axis.text.x = element_text(angle = 0, hjust = 0.5),\n    axis.title = element_text(),\n    axis.line = element_line(linewidth = 0.2), \n    plot.title = element_text(hjust=0, face=\"bold\"),\n    legend.background = element_rect(colour = \"#f5f5f5\", fill = \"#f5f5f5\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#getting-started",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\nInstalling and Launching R PackagesImporting Data\n\n\nIn this exercise, four R packages will be used. They are:\n\nggplot2 and readr from tidyverse for manual creation of funnel plot and for importing csv into R respectively.\nFunnelPlotR for creating funnel plot.\nplotly for creating interactive funnel plot.\nknitr for building static html table.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\nmutate_if will convert columns in chr format as factor.\n\n\ncovid19 &lt;- read_csv('data/COVID-19_DKI_Jakarta.csv') %&gt;% \n  mutate_if(is.character, as.factor)\n\n\nhead(covid19, 5)\n\n# A tibble: 5 × 7\n  `Sub-district ID` City        District `Sub-district` Positive Recovered Death\n              &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;fct&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1        3172051003 JAKARTA UT… PADEMAN… ANCOL              1776      1691    26\n2        3173041007 JAKARTA BA… TAMBORA  ANGKE              1783      1720    29\n3        3175041005 JAKARTA TI… KRAMAT … BALE KAMBANG       2049      1964    31\n4        3175031003 JAKARTA TI… JATINEG… BALI MESTER         827       797    13\n5        3175101006 JAKARTA TI… CIPAYUNG BAMBU APUS         2866      2792    27\n\n\n\nn_distinct(covid19$City)\n\n[1] 6\n\nn_distinct(covid19$District)\n\n[1] 44\n\nn_distinct(covid19$\"Sub-district\")\n\n[1] 267"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnelplotr-methods",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "3 FunnelPlotR methods",
    "text": "3 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#the-basic-plot",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "3.1 The basic plot",
    "text": "3.1 The basic plot\nBefore we start plotting, I followed this post to set up the theme using usual valid ggplot2 theme to be passed to the plot later.\n\n# Set theme\nfunnel_theme &lt;-\n  funnel_grey() +\n  theme(\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.y = element_text(),\n    axis.text.x = element_text(angle = 0, hjust = 0.5),\n    axis.title = element_text(),\n    axis.line = element_line(linewidth = 0.2), \n    plot.title = element_text(hjust=0.5, face=\"bold\"),\n    panel.background = element_rect(fill = '#f5f5f5', color = '#f5f5f5'),\n    legend.background = element_rect(colour = \"#f5f5f5\", fill = \"#f5f5f5\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n    )  \n\nThe code chunk below plots a funnel plot. theme = argument allows us to alter the theme using the funnel_theme we created in the last step.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`,\n  theme = funnel_theme\n) \n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nIn the code chunk above:\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_typeargument is “SR” (stands for standardised Ratio)\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#makeover-1",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "3.2 Makeover 1",
    "text": "3.2 Makeover 1\nThe changes made:\n\ndata_type changed to ‘PR’, which stands for proportions of deaths/positive cases. (derived using numerator and denominator)\nRanges of x and y axes to suit the visualisation using xrange and yrange\n\n\n\nShow the code\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;  proportions\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05),  #&lt;&lt;\n  theme = funnel_theme\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#makeover-2",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "3.3 Makeover 2",
    "text": "3.3 Makeover 2\nThe changes made:\n\nlabel = NA to remove the default outliers feature\nEdited the plot title with title, and x_label and y_label to add/edit y axis titles to understand the chart better.\n\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,  #&lt;&lt;\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative \\nTotal Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\",  #&lt;&lt;\n  theme = funnel_theme\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "4.1 Computing the basic derived fields",
    "text": "4.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate (rate) and standard error of cumulative death rate (rate.se). Take note that the formula for SE of Proportions will be used here. (Lecture 4 slide 25)\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\nThe function calculates the weighted mean of the rate column in the df data frame, where the weights are the inverse squares of the corresponding standard errors (rate.se).\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\nfit.mean\n\n[1] 0.01496959"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "4.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "4.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\nThe number.seq creates a sequence of numbers from 1 to the maximum number of positive cases in the data frame (max = 6231).\nWe then calculate the lower and upper 95% confidence intervals and the lower and upper 99.9% confidence intervals for the mean rate of death at each number in the sequence.\nFinally, a new data frame dfCI is created that contains the lower and upper confidence intervals and mean rate of death for each number in the sequence.\n\n\nShow the code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \n\n# creates a new dataframe using data.frame()\ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "4.3 Plotting a static funnel plot",
    "text": "4.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +  #&lt;&lt;&lt; death rates vs positive case\n  geom_point(aes(label=`Sub-district`), \n             color = \"#4472af\",\n             alpha=0.4) +\n  \n  # 95% line is dashed\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  \n  # 99% line is solid\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +  #&lt;&lt; To zoom in on this range where the points are\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12,hjust=0, face=\"bold\" ),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7, ),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"),\n        plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "4.5 Interactive Funnel Plot: plotly + ggplot2",
    "text": "4.5 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\n\nShow the code\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#plotting-a-static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#plotting-a-static-ternary-diagram",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "3.1 Plotting a static ternary diagram",
    "text": "3.1 Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n3.1.1 Basic plot\n\n#Building the static ternary plot\nggtern(data = agpop_mutated,\n       aes(x = YOUNG,\n           y = ACTIVE, \n           z = OLD)) +\n  geom_point() +\n\n  theme(\n    plot.title = element_text(hjust=0.5, face=\"bold\"),\n    #panel.background = element_rect(fill = '#f5f5f5', color = '#f5f5f5'),\n    legend.background = element_rect(colour = \"#f5f5f5\", fill = \"#f5f5f5\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n    )      \n\n\n\n\n\n\n3.1.2 Adding colour and title\n\n#Building the static ternary plot\nggtern(data = agpop_mutated, \n       aes(x = YOUNG,\n           y = ACTIVE, \n           z = OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw() +\n  \n  theme(\n    plot.title = element_text(hjust=0.5, face=\"bold\"),\n    #panel.background = element_rect(fill = '#f5f5f5', color = '#f5f5f5'),\n    legend.background = element_rect(colour = \"#f5f5f5\", fill = \"#f5f5f5\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n    )       \n\n\n\n\n\n\n3.1.3 Plotting 2 groups in a ternary diagram & trying out Tricolore package\nInstead of ploting 2 regions like the original design, I’ll try to plot with data from 2000 and 2018 so I can compare the changes. The only difference in the data manipulation is added another year in the filter() function:\n\n## Data Manipulation\n\nagpop_mutated2 &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year)) %&gt;%\n  spread(AG, Population) %&gt;% \n  mutate(YOUNG = rowSums(.[4:8])) %&gt;%        #&lt;&lt; Ages 0-24\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%     #&lt;&lt; Ages 25-64\n  mutate(OLD = rowSums(.[17:21])) %&gt;%        #&lt;&lt; Above 65\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year %in% c(2018, 2000))%&gt;%         #&lt;&lt; Difference\n  filter(TOTAL &gt; 0)\n\nLoading some additional functions for Tricolore.\n\n\nShow the code\n# Additional functions for Tricolore --------------------------------------\n\n# coordinates and labels for the centered gridlines of a ternary diagram\nTernaryCentroidGrid &lt;- function (center) {\n    # center percent difference labels\n    labels &lt;- seq(-1, 1, 0.1)\n    labels &lt;- data.frame(\n        L = labels[labels &gt;= -center[1]][1:10],\n        T = labels[labels &gt;= -center[2]][1:10],\n        R = labels[labels &gt;= -center[3]][1:10]\n    )\n    \n    # breaks of uncentered grid\n    breaks = data.frame(\n        L = labels$L + center[1],\n        T = labels$T + center[2],\n        R = labels$R + center[3]\n    )\n    \n    list(labels = labels, breaks = breaks)\n}\n\n# a function to create zooming limits\nzoom_limits &lt;- function(\n    # 3-columns data frame. ! Oreder is important: L, R, T\n    df, \n    # whether to minimize zooming triangle and move the data center\n    # or keep the data center at (1/3, 1/3, 1/3)\n    keep_center = TRUE, \n    # add 1 percentage point margin to avoid cutting the extreme points\n    one_pp_margin = FALSE,\n    # the default is to calculate average from the provided data\n    # though, I leave a possibility to specify custom center\n    # in our case, custom center is the EU pop structure\n    center = apply(df, 2, mean, na.rm = T)\n) {\n    # calculate minimums of the variables\n    mins &lt;- apply(df, 2, min)\n    # calculate max data span\n    span &lt;- max(apply(df, 2, function(x) diff(range(x))))\n    # add 1 percentage point margin to avoid cutting the extreme points\n    if(one_pp_margin == TRUE & min(mins) &gt; .01){\n        mins &lt;- mins - .01\n        span &lt;- span + .01\n    }\n    # keep the center at (1/3, 1/3, 1/3) or not\n    if(keep_center == TRUE){\n        limits &lt;- rbind(\n            center - (1/3)*span/(sqrt(2)/2),\n            center + (2/3)*span/(sqrt(2)/2)\n        )\n    } else {\n        limits &lt;- rbind(\n            mins,\n            c(\n                1 - (mins[2] + mins[3]),\n                1 - (mins[1] + mins[3]),\n                1 - (mins[1] + mins[2])\n            )\n        ) \n    }\n    return(limits)\n}\n\n\nAdding ternary colours hexcodes as a column in our dataset:\n\n\nShow the code\n# Whole data mean \ncenter &lt;- agpop_mutated2 %&gt;% \n    select(\"YOUNG\", \"ACTIVE\", \"OLD\") %&gt;% \n    summarise_all(.funs = funs(mean)) %&gt;% \n    gather() %&gt;% \n  pull(value)\n\n# calculate TRUE scaling factor for colors, i.e. the factor of proportionality\n# from big tern to zoomed tern\nmins &lt;- apply(agpop_mutated2 %&gt;% \n                select(\"YOUNG\", \"ACTIVE\", \"OLD\"), \n              2, \n              min)\n\nzommed_side &lt;- (1 - (mins[2] + mins[3])) - mins[1]\ntrue_scale &lt;- 1 / zommed_side\n\ntric &lt;- Tricolore(\n    agpop_mutated2, p1 = 'YOUNG', p2 = 'ACTIVE', p3 = 'OLD',\n    center = NA, show_data = FALSE, spread = true_scale,\n    contrast = .5, lightness = 1, chroma = 1, hue = 2/12,\n    breaks = 20,\n    crop = TRUE, label_as = \"pct_diff\"\n)\n\nagpop_mutated2$hex &lt;- tric$rgb\n\n# percent-point difference grid\nlegend_grid &lt;- TernaryCentroidGrid(center)\n\n# legend limits\nlegend_limits &lt;- zoom_limits(\n    df = agpop_mutated2 %&gt;% \n      select(\"YOUNG\", \"ACTIVE\", \"OLD\"),\n    keep_center = FALSE,\n    one_pp_margin = TRUE\n) # try playing with the params\n\n\nPlotting for Year 2000:\n\n\nShow the code\ntric$key +\n    geom_point(data = agpop_mutated2 %&gt;% filter(Year == \"2000\"), aes(YOUNG, ACTIVE, z = OLD), \n               shape = 21, fill = \"grey50\", size = .5, alpha = .5)+\n    geom_point(data = tibble(YOUNG = center[1], ACTIVE = center[2], OLD = center[3]), \n               aes(YOUNG, ACTIVE, z = OLD), \n               shape = 43, color = \"white\", size = 5)+\n    scale_L_continuous(NULL, limits = legend_limits[,1]) +\n    scale_T_continuous(NULL, limits = legend_limits[,2]) +\n    scale_R_continuous(NULL, limits = legend_limits[,3]) +\n    theme_classic() +\n    theme(plot.background = element_rect(fill = \"#f5f5f5\", colour = \"#f5f5f5\"),\n          text = element_text(size = 10, color = \"grey20\"))\n\n\n\n\n\nPlotting for Year 2018:\n\n\nShow the code\ntric$key +\n    geom_point(data = agpop_mutated2 %&gt;% filter(Year == \"2018\"), aes(YOUNG, ACTIVE, z = OLD), \n               shape = 21, fill = \"white\", size = .5, alpha = .5)+\n    geom_point(data = tibble(YOUNG = center[1], ACTIVE = center[2], OLD = center[3]), \n               aes(YOUNG, ACTIVE, z = OLD),  \n               shape = 43, color = \"white\", size = 5)+\n    scale_L_continuous(NULL, limits = legend_limits[,1]) +\n    scale_T_continuous(NULL, limits = legend_limits[,2]) +\n    scale_R_continuous(NULL, limits = legend_limits[,3]) +\n    theme_classic() +\n    theme(plot.background = element_rect(fill = \"#f5f5f5\", colour = \"#f5f5f5\"),\n          text = element_text(size = 10, color = \"grey20\"))\n\n\n\n\n\n\n\nShow the code\nagpop_mutated2 %&gt;% \n    ggtern(aes(x = YOUNG, \n               y = ACTIVE, \n               z = OLD,\n               color= Year))+\n    geom_point(shape = 21, fill = \"grey50\", size = .5, alpha = .5)+\n  \n    # For arrows\n    scale_L_continuous(\"Young\\n(0-24)\", ) +\n    scale_T_continuous(\"Working age\\n(25-64)\", ) +\n    scale_R_continuous(\"Aged\\n(65+)\", )+\n    geom_mean_ellipse(size = 1)+\n    scale_color_manual(values = c(\"grey25\", \"gold\"))+\n    labs(x = NULL, y = NULL,\n         title=\"Comparing Population Age Structures\",\n         subtitles=\"2000 vs 2018\")+\n    Larrowlab(\"% aged 0-24\") +\n    Tarrowlab(\"% aged 25-64\") +\n    Rarrowlab(\"% aged 65+\") +\n    theme(tern.axis.arrow.show = TRUE, \n          tern.axis.ticks.length.major = unit(9, \"pt\"),\n          tern.axis.text = element_text(size = 8, colour = \"grey20\"),\n          tern.axis.title.T = element_text(),\n          tern.axis.title.L = element_text(hjust = 0.2, vjust = 0.7, angle = -60),\n          tern.axis.title.R = element_text(hjust = 0.8, vjust = 0.6, angle = 60),\n          text = element_text(size = 10, color = \"grey20\"),\n          legend.position = \"none\",\n          plot.title = element_text(hjust=0.5, face=\"bold\"),\n          plot.subtitle = element_text(hjust=0.5, face=\"bold\"),\n          plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#interative-ternary-diagram-with-plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#interative-ternary-diagram-with-plot_ly",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "3.2 Interative ternary diagram with plot_ly",
    "text": "3.2 Interative ternary diagram with plot_ly\nThe code below create an interactive ternary plot using plot_ly() function of Plotly.\n\nIn the code chunk below, argument type = scatterternary. Instead of specifying the x and y axes, we specify a, b and c, set to % Young, % Active and % Old respectively. In the second example, the size of the bubble represents the total population in the subzone while the subzones are colored by Planning Region.\n\n\n\nShow the code\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Economically Active\"), \n  caxis = axis(\"Aged\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#animated-ternary-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#animated-ternary-plot",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "3.3 Animated Ternary Plot",
    "text": "3.3 Animated Ternary Plot\n\n3.3.1 Using gganimate (WIP)\n\nThe section below attempts to create a animated ternary plot using gganimate(), but it seems like there is some problem getting ggtern to work with gganimate.\n\n\n## Data Manipulation\n\nagpop_mutated3 &lt;- pop_data %&gt;%\n  #mutate(`Year` = as.character(Year)) %&gt;%\n  spread(AG, Population) %&gt;% \n  mutate(YOUNG = rowSums(.[4:8])) %&gt;%        #&lt;&lt; Ages 0-24\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%     #&lt;&lt; Ages 25-64\n  mutate(OLD = rowSums(.[17:21])) %&gt;%        #&lt;&lt; Above 65\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  #filter(Year &gt;= 2010 & Year &lt;= 2018) %&gt;% \n  filter(TOTAL &gt; 0)\n\n\n\nShow the code\ntd2 &lt;- ggtern(data = agpop_mutated3,\n           aes(x = YOUNG, \n               y = ACTIVE, \n               z = OLD,\n               size = TOTAL,\n               color= PA))+\n    \n   geom_point(alpha =0.7, \n              show.legend=FALSE)+\n   \n   scale_color_viridis_d(option=\"plasma\")+\n   scale_size(range= c(2,15)) +\n   \n    # For arrows\n    scale_L_continuous(\"Young\\n(0-24)\", ) +\n    scale_T_continuous(\"Working age\\n(25-64)\", ) +\n    scale_R_continuous(\"Aged\\n(65+)\", )+\n   \n    labs(title=\"Comparing Population Age Structures from 2000 to 2018\",\n         subtitles='Year: {frame_time}')+\n   \n    Larrowlab(\"% aged 0-24\") +\n    Tarrowlab(\"% aged 25-64\") +\n    Rarrowlab(\"% aged 65+\") +\n   \n    theme(tern.axis.arrow.show = TRUE, \n          tern.axis.ticks.length.major = unit(9, \"pt\"),\n          tern.axis.text = element_text(size = 8, colour = \"grey20\"),\n          tern.axis.title.T = element_text(),\n          tern.axis.title.L = element_text(hjust = 0.2, vjust = 0.7, angle = -60),\n          tern.axis.title.R = element_text(hjust = 0.8, vjust = 0.6, angle = 60),\n          text = element_text(size = 10, color = \"grey20\"),\n          legend.position = \"none\",\n          plot.title = element_text(hjust=0.5, face=\"bold\"),\n          plot.subtitle = element_text(hjust=0.5, face=\"bold\"),\n          plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ,\n)\n\ntd2\n\n\n\n\n\nShow the code\n#  transition_time(Year) +\n#  ease_aes(\"linear\")\n\n\n\n\n3.3.2 Using plotly\n\n\nShow the code\ntd3 &lt;- plot_ly(agpop_mutated3, \n               a=agpop_mutated3$ACTIVE, \n               b=agpop_mutated3$YOUNG, \n               c=agpop_mutated3$OLD,\n                    frame = agpop_mutated3$Year,\n                    mode = 'markers',\n                    size = agpop_mutated3$TOTAL,\n                    color = agpop_mutated3$PA,\n                    type = \"scatterternary\",\n                    text = ~paste('Young:',sep='', YOUNG,\n                                  '&lt;br&gt;Economically Active:', ACTIVE,\n                                  '&lt;br&gt;Aged:',OLD,\n                                  '&lt;br&gt;Subzone:', SZ, hoverinfo=\"text\",\n                                  '&lt;br&gt;Planning Area:', PA),\n                    marker = list(symbol = 'circle', opacity=0.8,\n                                  sizemode=\"diameter\",sizeref=2,\n                                  line = list(width = 2, color = '#FFFFFF'))) %&gt;%\n                    layout(\n                            title = 'Demographic Composition of Singapore',\n                            ternary=list(aaxis=list(title=\"Economically Active\"),\n                                         baxis = list(title=\"Young\"),\n                                         caxis = list(title=\"Aged\")),\n                            paper_bgcolor = '#f5f5f5',\n                            plot_bgcolor = '#f5f5f5',\n                            autosize = FALSE,\n                            automargin = FALSE,\n                            margin = list(l=50,r=50,b=100,t=100,pad=4),\n                            width = 600, \n                            height = 500) \ntd3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#basic-correlation-matrix",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "3.1 Basic correlation matrix",
    "text": "3.1 Basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11x11 matrix.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\npairs(wine[,1:11],\n      main = \"Correlation Matrix\") \n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\npairs(wine[, c(\"residual_sugar\", \"pH\", \"alcohol\", \"quality\")],\n      main = \"Correlation Matrix with Selected Variables\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#drawing-the-lower-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#drawing-the-lower-corner",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "3.2 Drawing the lower corner",
    "text": "3.2 Drawing the lower corner\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\npairs(wine[,2:12], \n      upper.panel = NULL,\n      main = \"Correlation Matrix with Lower Panel\")\n\n\n\n\n\nThe code chunk below displays the upper half of the correlation matrix.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\npairs(wine[,2:12], \n      lower.panel = NULL,\n      main = \"Correlation Matrix with Upper Panel\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#including-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#including-correlation-coefficients",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "3.3 Including Correlation Coefficients",
    "text": "3.3 Including Correlation Coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\npar(\"usr\") returns coordinates of the current plot\n\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor,\n      main = \"Correlation Matrix with Correlation Coefficients\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#basic-plot",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "4.1 Basic plot",
    "text": "4.1 Basic plot\nggcorrmat() uses the followingdefault arguments:\n\nmatrix.type= “upper”\nsig.level = 0.05\nconf.level = 0.95\n\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  title = \"Correlation Matrix\",\n  tl.cex = 8,\n  colors = c(\"#E69F00\", \"white\",\"#d5695d\"),\n  pch = \"square cross\",\n  ) +\n    theme(\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")    \n    )      \n\n\n\n\n\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  colors = c(\"#E69F00\", \"white\",\"#d5695d\"),\n  ggcorrplot.args = list(outline.color = \"white\", \n                         hc.order = TRUE,\n                         tl.cex = 8\n                         ),\n  title = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are not significant at p &lt; 0.05\"\n) +\n    theme(\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")    \n    )   \n\n\n\n\n\n\nNote:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8),\n      plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n      panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n      legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n      )\n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#getting-started-with-corrplot",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "6.1 Getting started with corrplot",
    "text": "6.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot(wine.cor,\n         #title=\"Correlation Plot\",\n         tl.cex = 0.6,\n         bg=\"#f5f5f5\")\n\n\n\n\n\n\nThe default visual object used to plot the corrgram is circle.\nThe default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red.\nBlue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients.\nThe intensity of the colour or also known as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\nThere are several options whichcan be applied to make this plot more beautiful and easy to understans.\n\nmethod = to determine the shape of the correlation objects. Can take the values: “circle” (default), “square”, “ellipse”, “number”, “pie”, “shade” and “color”.\noutline = to draw the black outline of the correlation objects such as circles or squares.\naddgrid.col = to determine the color of the grids. Would dissapear if NA.\norder = the order of the columns. If not specified it is plotted as in the original matrix, but sometimes it is not so informative. Possible methods are: “AOE” (angular order of the eigenvectors), “FPC” (first principal component), “hclust”, “alphabet”. There is also hclust.method to determine the agglomeration method if the order is “hclust”.\naddrect = when the order is “hclust”, determines the number of rectangles according to the hierarchical cluster. rect.something arguments are about the rectangles added according to this argument.\ncl.something = these are the arguments about the color legend.\ntl.something = these are the arguments about the text labels."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#working-with-visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#working-with-visual-geometrics",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "6.2 Working with visual geometrics",
    "text": "6.2 Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot(wine.cor, \n         #title=\"Correlation Plot with Ellipses\",\n         method = \"ellipse\",\n         tl.srt = 45,\n         bg = \"#f5f5f5\") \n\n\n\n\n\naddrect` argument sets the value in numbers representing the number of clusters.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\nlibrary(RColorBrewer)\n\ncorrplot(wine.cor, \n         #method = \"color\",\n         outline = T,\n         addgrid.col = \"darkgray\",\n         order=\"hclust\",\n         addrect = 4,   #&lt;&lt; \n         rect.col = \"black\",\n         rect.lwd = 5,\n         cl.pos = \"b\",\n         tl.col = \"indianred4\",\n         tl.cex = 0.6,\n         tl.srt = 45,\n         cl.cex = 1,\n         #addCoef.col = \"white\",\n         #number.digits = 2,\n         #number.cex = 0.75,\n         #title=\"Correlation Plot with Ellipses and Clusters\",\n         method = \"ellipse\",\n         bg = \"#f5f5f5\") \n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f5f5f5\")\ncorrplot(wine.cor,\n         method = \"color\",\n         sig.level = c(0.001, 0.01, 0.05), \n         insig = 'label_sig',\n         addCoef.col=\"dodgerblue\",\n         pch.col = \"tomato\", \n         font.main = 4, \n         mar=c(0,0,1,0), \n         cl.pos = \"b\",   #Legend position\n         cl.ratio = 0.2, #wider color legend\n         tl.srt = 45,\n         tl.cex = 0.6,\n         number.cex = 0.6,\n         title=\"Correlation Plot Mapped by Color, with Correlation Coefficient\",)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#working-with-layout",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "6.3 Working with layout",
    "text": "6.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         #title=\"Correlation Plot with Lower Panel\",\n         type=\"lower\",\n         tl.srt = 45,\n         tl.cex = 0.6,\n         bg=\"#f5f5f5\")\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n        #title=\"Correlation Plot with Lower Panel & Black Axis Texts\",\n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n        tl.srt = 45,\n        tl.cex = 0.6,\n        bg=\"#f5f5f5\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#working-with-mixed-layout",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "6.4 Working with mixed layout",
    "text": "6.4 Working with mixed layout\nIt is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a corrgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               tl.srt = 45,\n               diag = \"l\",\n               tl.col = \"black\",\n               tl.cex = 0.6,\n               bg=\"#f5f5f5\")\n\n\n\n\n\nNote: The argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "6.5 Combining corrgram with the significant test",
    "text": "6.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05,\n         tl.cex = 0.6,\n         bg=\"#f5f5f5\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#reorder-a-corrgram",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "6.6 Reorder a corrgram",
    "text": "6.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be overwritten by using the order argument of corrplot().\nCurrently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors (Michael Friendly, 2002).\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used; should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n“alphabet” for alphabetical order.\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot.mixed(wine.cor, \n               lower = \"shade\",    #&lt;&lt;\n               upper = \"number\",\n               tl.pos = \"lt\",\n               tl.srt = 45,\n               tl.cex = 0.6,\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\",\n               bg=\"#f5f5f5\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "6.7 Reordering a correlation matrix using hclust",
    "text": "6.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering. add_rect= specifies number of clusters.\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         tl.srt = 45,\n         tl.cex = 0.6,\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3,\n         bg=\"#f5f5f5\")\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f5f5f5\")\n\ncorrplot(wine.cor, \n         type = \"upper\",\n         #tl.pos = \"lt\",\n         tl.col = \"black\",\n         tl.srt = 45,\n         tl.cex = 0.6,\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         col=c(\"black\", \"white\"),\n         bg=\"lightblue\",\n         #title=\"Correlation Plot ordered by clusters\"\n         )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rows and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, we will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#heatmap-of-r-stats",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#heatmap-of-r-stats",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.1 heatmap() of R Stats",
    "text": "3.1 heatmap() of R Stats\n\nBasic HeatmapCluster HeatmapNormalised Heatmap\n\n\n\npar(bg = \"#f5f5f5\")\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\nNotes from Code Chunk\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\n\npar(bg = \"#f5f5f5\")\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\nNotes from Code Chunk - The order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\nInsights - This heatmap is hard to interpret since we are unable to see colours between the opposing ends of the range of the values. - Happiness Score variable have relatively higher values, which makes that the other variables with small values all look the same. Thus, we need to normalize this matrix to “scale” our data. It can be applied to rows or to columns.\n\n\n\n\npar(bg = \"#f5f5f5\")\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\nNotes from Code Chunk\n\nNotice that the values are scaled now.\nMargins argument is used to ensure that the entire x-axis labels are displayed completely\ncexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#working-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#working-with-heatmaply",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.1 Working with heatmaply",
    "text": "4.1 Working with heatmaply\n\nhead(mtcars,5)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n\n\n\npar(bg = \"#f5f5f5\")\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create an interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)], #&lt;&lt;&lt; Removes Country, Region, Whisker-High/Low\n          fontsize_col = 7,\n          fontsize_row = 4,\n          margins = c(60,130,10,10))  \n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#data-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#data-transformation",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.2 Data transformation",
    "text": "4.2 Data transformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely:\n\nscale,\nnormalise and\npercentilise.\n\n\n4.2.1 Scaling method\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\n\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values column-wise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          fontsize_col = 7,\n          fontsize_row = 4,          \n          scale = \"column\")\n\n\n\n\n\n\n\n4.2.2 Normalising method\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\n\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_col = 7,\n          fontsize_row = 4)\n\n\n\n\n\n\n\n4.2.3 Percentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e.wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_col = 7,\n          fontsize_row = 4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#clustering-algorithm",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.3 Clustering algorithm",
    "text": "4.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n4.3.1 Manual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          fontsize_col = 7,\n          fontsize_row = 4)\n\n\n\n\n\n\n\n4.3.2 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nStep 1: Determine Clustering Method First, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")  #&lt;&lt; finding distance matrix \n\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the highest optimum value.\nStep 2: Determine Optimal # of Clusters Next, find_k() is used to determine the optimal number of cluster.\n\npar(bg = \"#f5f5f5\")\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nFigure above shows that k=3 would be optimal.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3,\n          fontsize_col = 7,\n          fontsize_row = 4\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#seriation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#seriation",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.4 Seriation",
    "text": "4.4 Seriation\nIn heatmap, every cell gets a colour, the higher the number the brighter the colour. Unfortunately, this is often a fairly unrewarding exercise, yielding graphics that look like plaid or tartan fabric. Part of the problem is that the rows and columns of a dataset often have no natural ordering, such as time, and are instead shown in alphabetical order, or else the dataset is sorted by one of the rows or columns, rather than in an order which makes patterns pop out visually.\nThe default options is OLO (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is GW (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic. The option mean gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2. The option none gives us the dendrograms without any rotation that is based on the data matrix.\nA less technical write-up on agglomerative clustering/seriation found here.\n\nOLODefaultMeanNone\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\",\n          fontsize_col = 7,\n          fontsize_row = 4)\n\n\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\",\n          fontsize_col = 7,\n          fontsize_row = 4)\n\n\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\",\n          fontsize_col = 7,\n          fontsize_row = 4\n          )\n\n\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          fontsize_col = 7,\n          fontsize_row = 4\n          )\n\n\n\n\n\n\n\n\n\nThis serves as a compelling example of why it is essential to consider the capabilities and limitations of the human visual system when creating data visualizations. Simply converting numbers into graphics isn’t sufficient. Both the shuffled and organized heatmaps depicted the same data, but it’s crucial to organize the visual elements in a way that allows the human eye to perceive patterns effectively. Heatmaps, in particular, demonstrate that we can discern patterns more easily when they are presented in a spatially continuous manner. Our ability to interpret data is significantly influenced by the arrangement and proximity of the information displayed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#working-with-colour-palettes",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.5 Working with colour palettes",
    "text": "4.5 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3, \n          seriate = \"OLO\",\n          colors = Blues,\n          fontsize_col = 7,\n          fontsize_row = 4\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#aesthetic-changes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#aesthetic-changes",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.6 Aesthetic Changes",
    "text": "4.6 Aesthetic Changes\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsize_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\nExplanation of margin parameter: numeric vector of length 4 (default is c(50,50,NA,0)) containing the margins (see layout) for column, row and main title names, respectively. The top margin is NA by default. If main==“” then the top margin will be set to 0, otherwise it will get 30. For a multiline title a larger default for the 3rd element should be set. The right margin is NA by default, meaning it will be zero if row_dend_left is FALSE, or 100 if row_dend_left is TRUE.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#parallel-coordinates-with-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#parallel-coordinates-with-boxplot",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.1 Parallel Coordinates with Boxplot",
    "text": "2.1 Parallel Coordinates with Boxplot\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\") +\n    theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      axis.title.x = element_blank(),\n      axis.title.y = element_text(hjust=1, angle=0),\n      legend.text = element_text(size=6),\n      legend.key.size = unit(1,\"line\"),\n      plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n      legend.background = element_rect(fill=\"#f5f5f5\"),\n      panel.background = element_rect(fill=\"#f5f5f5\"))  +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#parallel-coordinates-with-facet",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.2 Parallel coordinates with facet",
    "text": "2.2 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region, labeller = labeller(group = label_wrap_gen(width = 25))) +\n    theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      axis.title.x = element_blank(),\n      axis.text.x = element_text(angle=30, hjust=1, size= 6),\n      axis.title.y = element_blank(),\n      strip.text = element_text(size = 8),\n      legend.text = element_text(size=6),\n      legend.key.width = unit(0.1, \"cm\"),\n      legend.key.size = unit(0.1, \"cm\"),\n      legend.position = \"bottom\",\n      plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n      legend.background = element_rect(fill=\"#f5f5f5\"),\n      panel.background = element_rect(fill=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.1 Parallel coordinates plot with histogram",
    "text": "3.1 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\n\nShow the code\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#using-the-basic-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#using-the-basic-arguments",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "3.1 Using the basic arguments",
    "text": "3.1 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\nNotes from Code Chunk\n\nindex: List of categorical variables\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize: Quantitative variable\n\nThe column must not contain negative values. This is because it’s values will be used to map the sizes of the rectangles of the treemaps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#working-with-vcolor-and-type-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#working-with-vcolor-and-type-arguments",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "3.2 Working with vColor and type arguments",
    "text": "3.2 Working with vColor and type arguments\nFor a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\nIn the code chunk below, type argument is define as value.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\nNotes from Code Chunk\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#colours-in-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#colours-in-treemap-package",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "3.3 Colours in treemap package",
    "text": "3.3 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette.\nThe only difference between “value” and “manual” is the default value for mapping:\n\n“value”: considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color.\n“manual”: simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n“Value”-type treemap“Manual”- type treemap\n\n\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nNotes from Code Chunk:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nNotes from Code Chunk:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative.\nTo overcome this problem, a single colour palette such as Blues should be used.\n\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#treemap-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#treemap-layout",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "3.4 Treemap Layout",
    "text": "3.4 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\n\nSquarified treemap algorithm produces good aspect ratios, but ignores the sorting order of the rectangles (sortID).\nOrdered treemap, pivot-by-size, algorithm takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\nAlgorithm argumentUsing sortID\n\n\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\", #&lt;&lt;&lt;\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#designing-a-basic-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#designing-a-basic-treemap",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "4.1 Designing a basic treemap",
    "text": "4.1 Designing a basic treemap\nStep 1: Let’s now plot the simple treemap with the help of ggplot() and geom_treemap() functions.\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\") +\n    theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n      legend.background = element_rect(fill=\"#f5f5f5\"),\n      panel.background = element_rect(fill=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#defining-hierarchy",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#defining-hierarchy",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "4.2 Defining hierarchy",
    "text": "4.2 Defining hierarchy\nStep 2: Group by Planning Region\nThe subgrouped tree plot in our example refers to planning region a project is located in. It can be plotted by with the subgroup() argument in aesthetics (aes) of the plot in ggplot() function as follows.\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n      geom_treemap() +\n      theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n      legend.background = element_rect(fill=\"#f5f5f5\"),\n      panel.background = element_rect(fill=\"#f5f5f5\"))   \n\n\n\n\n\nStep 3: Adding boundary line, and title for the plot!\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`,\n           label = `Planning Region`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\") +\n  #geom_treemap_text(place = \"centre\",size = 12, color=\"white\")+\n  labs(title=\"Customized Tree Plot using ggplot and treemapify in R\") +\n    theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n      legend.background = element_rect(fill=\"#f5f5f5\"),\n      panel.background = element_rect(fill=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#installing-d3treer-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#installing-d3treer-package",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "5.1 Installing d3treeR package",
    "text": "5.1 Installing d3treeR package\n\n\nShow the code\nlibrary(devtools)\n\ninstall_github(\"timelyportfolio/d3treeR\")\nlibrary(d3treeR)\n\n\nThe codes below perform two processes.\nStep 1: treemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\nShow the code\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nStep 2: d3tree() is used to build an interactive treemap.\nNote: rootname becomes the title of the plot\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "1 Installing and loading libraries\nIn this hands-on exercise, two R packages will be used. They are:\n\n\n\nPackage\nDescription\n\n\n\n\ntidyverse\nFor data wragling\n\n\nhaven\nTo enable R to read and write various data formats such as ‘SAS’ and ‘SPSS’\n\n\n\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse, haven)\n\n\n\n2 Importing PISA Data\nThe code chunk below imports PISA data into R environment by using read_sas() function of haven package.\nOutput: Tibble dataframe\n\nstu_qqq &lt;- read_sas(data_file = \"data/cy08msp_stu_qqq.sas7bdat\")\n\nfilter() of the dplyr package allows us to filter where participating country (CNT) is Singapore (SGP).\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nThe .rds file format is usually smaller than its SAS file counterpart and will therefore take up less storage space. The .rds file will also preserve data types and classes such as factors and dates eliminating the need to redefine data types after loading the file.\nFiles can be exported as RDS and imported into R using write_rds() and read_rds() for fast and space efficient data storage.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n3 Understanding the Data\n\n#summary(stu_qqq_SG)"
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "Visual Analytics and Application",
    "section": "Latest Posts:",
    "text": "Latest Posts:"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "1.1 Background",
    "text": "1.1 Background\nThe OECD Programme for International Student Assessment (PISA) surveys collected data on 15 year-old students’ performances in reading, mathematics and science, as well as contextual information on students’ background, home characteristics and school factors which could influence performance. It provides the most comprehensive and rigorous international assessment of student learning outcomes. Results from PISA indicate the quality and equity of learning outcomes attained around the world, and allow educators and policy makers to learn from the policies and practices applied in other countries.\nThis could be used to create shared points of reference and spur collaboration to act on the data. The goal of PISA was to help schools and policy makers shift from looking inward at each other within the same education system to looking outward: to teachers, schools and policy makers across the world.\nThe latest PISA assessment took place in 2022 and consisted of 8 questionnaires completed by different education systems stakeholders (students, teachers, parents, and school principals)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "1.2 The Data",
    "text": "1.2 The Data\nThe data for this exercise is the Student questionnaire data file in SAS format, retrieved from OECD’s PISA 2022 Database.\n\n\n\n\n\nSupplementary materials used in conjunction with dataset:\n\nCodebook\nMaster Questionnaire\nTechnical Report"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "1.3 The Task",
    "text": "1.3 The Task\nUsing the 2022 Student Questionnaire Dataset, this post aims to use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to uncover:\n\nthe distribution of Singapore students’ performance in mathematics, reading, and science, and\nthe relationship between these performances with schools, gender and socioeconomic status of the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-selection",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-selection",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "4.1 Variable Selection",
    "text": "4.1 Variable Selection\nNow, I want to just keep the columns that are useful to me. Both Technical Report and Codebook on PISA’s website were particularly helpful in deciphering the various variable names.\nIn particular, Chapter 19: Scaling procedures and construct validation of context questionnaire data of the Technical Report provides detailed descriptions of the derived variables in each questionnaire while the Codebook provides information on variable names, variable locations, format information, variable labels, questionnaire text, values, and frequencies.\nBelow are the list of variables retained for this study, which can be grouped into 4 broad categories of School, Gender, Socio-economic status, Performance (Math, Reading, and Science). Details are extracted from the Codebook:\n\n\n\n\n\n\n\n\n\n\n\nCategory\nVariable Name\nDescription/Question\nType\nEncoding Scheme\n\n\n\n\nSchool\nCNTSCHID\nIntl. School ID\nNUM\n\n\n\nGender\nST004D01T\nStudent (Standardized) Gender\nNUM\n1 - Female\n2 - Male\n.N/97 - Not Applicable\n\n\nSocioeconomic Status\nIMMIG\nIndex on immigrant background (OECD definition)\nNUM\n1 - Native Student\n2 - Second-Generation Student\n3 - First Generation Student\n\n\nSocioeconomic Status\nOCOD1\nISCO-08 Occupation code - Mother\nCHAR\nThere are multiple labels for various occupations. However, we can generally group the following groups as “Unemployed” and the remaining as “Employed”:\n9701 - Doing housework, bringing up children\n9702 - Learning, studying\n9703 - Retired, pensioner, on unemployment benefits\n9704 - I do not know, it’s hard to say\n9997 - Not applicable\n9998 - Invalid\n9999 - No response\n\n\nSocioeconomic Status\nOCOD2\nISCO-08 Occupation code - Father\nCHAR\nSame as previous variable.\n\n\nSocioeconomic Status\nST250Q02JA\nWhich of the following are in your [home]: A computer (laptop, desktop, or tablet) that you can use for school work\nNUM\n1 - Yes\n2 - No\n\n\nSocioeconomic Status\nST250Q03JA\nWhich of the following are in your [home]: Educational Software or Apps\nNUM\n1 - Yes\n2 - No\n\n\nSocioeconomic Status\nST250Q05JA\nWhich of the following are in your [home]: Internet access (e.g. Wi-fi) (excluding through smartphones)\nNUM\n1 - Yes\n2 - No\n\n\nSocioeconomic Status\nMISCED\nMother’s level of education (ISCED)\nNUM\n1 - Less than ISCED Level 1\n2 - ISCED level 1\n3 - ISCED level 2\n4 - ISCED level 3.3\n5 - ISCED level 3.4\n6 - ISCED level 4\n7 - ISCED level 5\n8 - ISCED level 6\n9 - ISCED level 7\n10 - ISCED level 8\n\n\nSocioeconomic Status\nFISCED\nFather’s level of education (ISCED)\nNUM\nSame as previous variable.\n\n\nMath\nST296Q01JA\nHow much time spent on homework in: Mathematics homework\nNUM\n1 - Up to 30 minutes a day\n2 - More than 30 minutes and up to 1 hour a day\n3 - More than 1 hour and up to 2 hours a day\n4 - More than 2 hours and up to 3 hours a day\n5 - More than 3 hours and up to 4 hours a day\n6 - More than 4 hours a day\n\n\nReading\nST296Q02JA\nHow much time spent on homework in: [Test language] homework\nNUM\nSame as previous variable.\n\n\nScience\nST296Q03JA\nHow much time spent on homework in: [Science] homework\nNUM\nSame as previous variable.\n\n\nMath\nPV1MATH to PV10MATH\nPlausible Values 1 to 10 in Mathematics\nNUM\n\n\n\nReading\nPV1READ to PV10READ\nPlausible Value 1 to 10 in Science\nNUM\n\n\n\nScience\nPV1SCIE to PV10SCIE\nPlausible Values 1 to 10 in Science\nNUM\n\n\n\n\nThe code chunk below filters for the selected variables based on their column names using select() and renames them to more intuitive headers using rename() from the dplyr package.\n\nstu_SG_filtered &lt;- stu_SG %&gt;%\n\n  # Retains desired variables for further analysis  \n  select(CNTSCHID,ST004D01T,IMMIG,OCOD1,OCOD2, ST250Q02JA, ST250Q03JA, ST250Q05JA, MISCED, FISCED, ST296Q01JA,ST296Q02JA, ST296Q03JA, PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH, PV6MATH, PV7MATH, PV8MATH, PV9MATH, PV10MATH, PV1READ, PV2READ, PV3READ, PV4READ, PV5READ, PV6READ, PV7READ, PV8READ, PV9READ, PV10READ, PV1SCIE, PV2SCIE, PV3SCIE, PV4SCIE, PV5SCIE, PV6SCIE, PV7SCIE, PV8SCIE ,PV9SCIE ,PV10SCIE) %&gt;% \n  \n  # Renames columns to more intuitive headers\n  dplyr::rename(SchID=\"CNTSCHID\",\n           Gender=\"ST004D01T\",\n           Immigration_Status=\"IMMIG\",\n           Occupation_Status_Father=\"OCOD1\",\n           Occupation_Status_Mother=\"OCOD2\", \n           Have_Comp=\"ST250Q02JA\", \n           Have_EduSW=\"ST250Q03JA\", \n           Have_Internet=\"ST250Q05JA\", \n           Edu_Mother=\"MISCED\", \n           Edu_Father=\"FISCED\", \n           Time_HW_Math=\"ST296Q01JA\",\n           Time_HW_Reading=\"ST296Q02JA\", \n           Time_HW_Science=\"ST296Q03JA\"\n           )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#handling-missing-values",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#handling-missing-values",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "4.2 Handling missing values",
    "text": "4.2 Handling missing values\nNow, I need to remove incomplete rows that have missing data in them. The main reason for doing this is that later on, I want to recode the variables into more intuitive descriptions. If there are NA’s in the columns, that might affect the recoding if a value is accidentally inputted to a variable which was originally NA.\nis.na() allows us to identify missing values in our dataset and sum() counts the frequency of such missing values.\n\n# Checks for NA in each column\nsum(is.na(stu_SG_filtered$SchID))\n\n[1] 0\n\nsum(is.na(stu_SG_filtered$Gender))\n\n[1] 0\n\nsum(is.na(stu_SG_filtered$Immigration_Status))\n\n[1] 236\n\nsum(is.na(stu_SG_filtered$Occupation_Status_Father))\n\n[1] 0\n\nsum(is.na(stu_SG_filtered$Occupation_Status_Mother))\n\n[1] 0\n\nsum(is.na(stu_SG_filtered$Have_Comp))\n\n[1] 45\n\nsum(is.na(stu_SG_filtered$Have_EduSW))\n\n[1] 60\n\nsum(is.na(stu_SG_filtered$Have_Internet))\n\n[1] 46\n\nsum(is.na(stu_SG_filtered$Edu_Father))\n\n[1] 97\n\nsum(is.na(stu_SG_filtered$Edu_Mother))\n\n[1] 74\n\nsum(is.na(stu_SG_filtered$Time_HW_Reading))\n\n[1] 77\n\nsum(is.na(stu_SG_filtered$Time_HW_Math))\n\n[1] 70\n\nsum(is.na(stu_SG_filtered$Time_HW_Science))\n\n[1] 87\n\n\nThe variables with missing values are: Immigration_Status, Have_Comp, Have_EduSW, Have_Internet, Edu_Father, Edu_Mother, Time_HW_Reading, Time_HW_Math, and Time_HW_Science.\ndrop_na() drops rows where any column specified contains a missing value.\n\nstu_SG_filtered &lt;- drop_na(stu_SG_filtered,\n                           # Drops rows where either of these columns have NAs\n                           Immigration_Status, Have_Comp, Have_EduSW, Have_Internet, Edu_Father,\n                           Edu_Mother, Time_HW_Reading, Time_HW_Math, Time_HW_Science)\n\n# Here's what the dataset looks like so far\nstu_SG_filtered\n\n# A tibble: 6,232 × 43\n      SchID Gender Immigration_Status Occupation_Status_Father\n      &lt;dbl&gt;  &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt;                   \n 1 70200052      1                  1 9701                    \n 2 70200134      2                  1 31                      \n 3 70200112      2                  1 9701                    \n 4 70200004      2                  1 41                      \n 5 70200152      1                  1 23                      \n 6 70200043      1                  3 9701                    \n 7 70200049      2                  1 11                      \n 8 70200107      2                  3 23                      \n 9 70200012      1                  1 1                       \n10 70200061      2                  1 34                      \n# ℹ 6,222 more rows\n# ℹ 39 more variables: Occupation_Status_Mother &lt;chr&gt;, Have_Comp &lt;dbl&gt;,\n#   Have_EduSW &lt;dbl&gt;, Have_Internet &lt;dbl&gt;, Edu_Mother &lt;dbl&gt;, Edu_Father &lt;dbl&gt;,\n#   Time_HW_Math &lt;dbl&gt;, Time_HW_Reading &lt;dbl&gt;, Time_HW_Science &lt;dbl&gt;,\n#   PV1MATH &lt;dbl&gt;, PV2MATH &lt;dbl&gt;, PV3MATH &lt;dbl&gt;, PV4MATH &lt;dbl&gt;, PV5MATH &lt;dbl&gt;,\n#   PV6MATH &lt;dbl&gt;, PV7MATH &lt;dbl&gt;, PV8MATH &lt;dbl&gt;, PV9MATH &lt;dbl&gt;, PV10MATH &lt;dbl&gt;,\n#   PV1READ &lt;dbl&gt;, PV2READ &lt;dbl&gt;, PV3READ &lt;dbl&gt;, PV4READ &lt;dbl&gt;, …\n\n\nThe output shows that 6,232 observations are retained."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#recoding-categorical-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#recoding-categorical-variables",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "4.3 Recoding Categorical Variables",
    "text": "4.3 Recoding Categorical Variables\n\nGenderImmigration StatusOccupation StatusAccess to Computer, Educational Software, and Internet at HomeParental Educational StatusTime Spent on Homework\n\n\nrecode() helps to set new values by providing a mapping from old to new values. Here, Gender = 1 is mapped to Female and Gender = 2 is mapped to Male. The recoded variable is then assigned using mutate() of the dplyr package.\n\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;%\n  mutate(Gender=(recode(Gender, '1'=\"Female\", \n                        '2'=\"Male\")))\n\n\n\nThe code chunk below uses mutate() to replace the existing variable which sets its value based on the recode() function.\n\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;%\n  mutate(Immigration_Status=\n           (recode(Immigration_Status, \n                   '1'=\"Native\", \n                   '2'=\"Second-Gen\", \n                   '3'=\"Third-Gen\")))\n\n\n\nThere are multiple labels for various occupations. However, we can generally group the following groups as “Unemployed” and the remaining as “Employed”:\n\n9701 - Doing housework, bringing up children\n9702 - Learning, studying\n9703 - Retired, pensioner, on unemployment benefits\n9704 - I do not know, it’s hard to say\n9997 - Not applicable\n9998 - Invalid\n9999 - No response\n\nThe code chunk below makes use of the ifelse() function to evaluate if the Occupation code falls in the list above with the help of the %in% operator. If it is, output will be “Unemployed”, else it would be shown as “Employed”.\n\n# Occupation_Status_Father\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;% \n  mutate(Occupation_Status_Father = ifelse(Occupation_Status_Father %in% c(\"9701\", \"9702\", \"9703\", \"9704\", \"9997\", \"9998\", \"9999\"), \n                                           \"Unemployed\", \n                                           \"Employed\"))\n\n# Occupation_Status_Mother\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;% \n  mutate(Occupation_Status_Mother = ifelse(Occupation_Status_Mother %in% c(\"9701\", \"9702\", \"9703\", \"9704\", \"9997\", \"9998\", \"9999\"), \n                                           \"Unemployed\", \n                                           \"Employed\"))  \n\n\n\nFor access to computer, educational software, and internet columns, ifelse() statement returns a “Yes” when the number is 1, else it returns a “No”.\n\n# Have_Comp\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;% \n  mutate(Have_Comp = ifelse(Have_Comp==\"1\", \n                            \"Yes\", \n                            \"No\"))\n\n# Have_EduSW\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;% \n  mutate(Have_EduSW = ifelse(Have_EduSW==\"1\", \n                            \"Yes\", \n                            \"No\"))\n\n# Have_Internet\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;% \n  mutate(Have_Internet = ifelse(Have_Internet==\"1\", \n                            \"Yes\", \n                            \"No\"))\n\n\n\nPISA Survey adopts the International Standard Classification of Education (ISCED), which is the official framework used to facilitate international comparisons of education systems.\nDiagram below shows Singapore qualifications mapped against ISCED levels obtained from UNESCO.\n\n\n\n\n\nThe following mapping is used to recode for further data analysis:\n\n\n\n\n\n\n\n\n\nPISA Value\nPISA Value Description\nConverted Education Level\nRecoded Group\n\n\n\n\n1\nLess than ISCED Level 1\nEarly childhood\nPre-Primary\n\n\n2\nISCED level 1\nPrimary\nPrimary\n\n\n3\nISCED level 2\nLower Secondary\nSecondary\n\n\n4\nISCED level 3.3\nUpper Secondary\nSecondary\n\n\n6\nISCED level 4\nPost-secondary Non-tertiary\nPost-secondary\n\n\n7\nISCED level 5\nDiploma\nPost-secondary\n\n\n8\nISCED level 6\nBachelors\nTertiary\n\n\n9\nISCED level 7\nMasters\nTertiary\n\n\n10\nISCED level 8\nDoctoral\nTertiary\n\n\n\nAfter recoding, the ordered() function helps create such ordered factors to reflect the ascending sequence of the educational level.\n\n# Edu_Mother\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;%\n  mutate(Edu_Mother=(recode(Edu_Mother,         \n                                    '1'=\"Pre-Primary\",   \n                                    '2'=\"Primary\", \n                                    '3'=\"Secondary\",\n                                    '4'='Secondary',\n                                    '6'=\"Post-Secondary\",\n                                    '7'=\"Post-Secondary\",\n                                    '8'=\"Tertiary\",\n                                    '9'=\"Tertiary\",\n                                    '10'=\"Tertiary\")\n  )) \n\nstu_SG_filtered$Edu_Mother = ordered(stu_SG_filtered$Edu_Mother, \n                                             levels=c(\"Pre-Primary\", \"Primary\", \"Secondary\", \"Post-Secondary\", \"Tertiary\"))\n\n\n# Edu_Father\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;%\n  mutate(Edu_Father=(recode(Edu_Father,         \n                                    '1'=\"Pre-Primary\",   \n                                    '2'=\"Primary\", \n                                    '3'=\"Secondary\",\n                                    '4'='Secondary',\n                                    '6'=\"Post-Secondary\",\n                                    '7'=\"Post-Secondary\",\n                                    '8'=\"Tertiary\",\n                                    '9'=\"Tertiary\",\n                                    '10'=\"Tertiary\")\n  )) \n\nstu_SG_filtered$Edu_Father = ordered(stu_SG_filtered$Edu_Father, \n                                             levels=c(\"Pre-Primary\", \"Primary\", \"Secondary\", \"Post-Secondary\", \"Tertiary\"))\n\n\n\n\n\nShow the code\np_hwt_reading &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Reading)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Reading\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np_hwt_math &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Math)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Math\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np_hwt_sci &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Science)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Science\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\n\np_hwt_reading + p_hwt_sci + p_hwt_math +\n  plot_layout(widths=c(1,1,1)) +\n  plot_annotation(title=\"Time Spent on Homework in mins (before grouping)\", \n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\n\n\n\n\nThe bar charts display the distribution of responses regarding the time spent on homework for the 3 subjects. We can see that the frequency dips significantly where response is 4 and above, i.e. after 2 hours. We can combine codes 4 through 6 to be analysed together.\n\n\nShow the code\n# Time_HW_Math\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;%\n  mutate(Time_HW_Math=(recode(Time_HW_Math,         \n                                    '1'=\"&lt;31\",   \n                                    '2'=\"31-60\", \n                                    '3'=\"61-120\",\n                                    '4'='&gt;120',\n                                    '5'='&gt;120',\n                                    '6'=\"&gt;120\")\n  )) \n\nstu_SG_filtered$Time_HW_Math = ordered(stu_SG_filtered$Time_HW_Math, \n                                             levels=c(\"&lt;31\", \"31-60\", \"61-120\", \"&gt;120\"))\n# Time_HW_Reading\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;%\n  mutate(Time_HW_Reading=(recode(Time_HW_Reading,         \n                                    '1'=\"&lt;31\",   \n                                    '2'=\"31-60\", \n                                    '3'=\"61-120\",\n                                    '4'='&gt;120',\n                                    '5'='&gt;120',\n                                    '6'=\"&gt;120\")\n  )) \n\nstu_SG_filtered$Time_HW_Reading = ordered(stu_SG_filtered$Time_HW_Reading, \n                                             levels=c(\"&lt;31\", \"31-60\", \"61-120\", \"&gt;120\"))\n\n# Time_HW_Science\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;%\n  mutate(Time_HW_Science=(recode(Time_HW_Science,         \n                                    '1'=\"&lt;31\",   \n                                    '2'=\"31-60\", \n                                    '3'=\"61-120\",\n                                    '4'='&gt;120',\n                                    '5'='&gt;120',\n                                    '6'=\"&gt;120\")\n  )) \n\nstu_SG_filtered$Time_HW_Science = ordered(stu_SG_filtered$Time_HW_Science, \n                                             levels=c(\"&lt;31\", \"31-60\", \"61-120\", \"&gt;120\"))\n\n\nThe distribution after combining and recoding looks like this:\n\n\nShow the code\np2_hwt_reading &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Reading)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Reading\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np2_hwt_math &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Math)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Math\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np2_hwt_sci &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Science)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Science\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\n\np2_hwt_reading + p2_hwt_sci + p2_hwt_math +\n  plot_layout(widths=c(1,1,1)) +\n  plot_annotation(title=\"Time Spent on Homework in mins (after grouping)\", \n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-type-conversion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-type-conversion",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "4.4 Data Type Conversion",
    "text": "4.4 Data Type Conversion\nglimpse() of the dplyr package allows us to see all columns and their data type in the data frame.\n\nglimpse(stu_SG_filtered)\n\nRows: 6,232\nColumns: 43\n$ SchID                    &lt;dbl&gt; 70200052, 70200134, 70200112, 70200004, 70200…\n$ Gender                   &lt;chr&gt; \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"…\n$ Immigration_Status       &lt;chr&gt; \"Native\", \"Native\", \"Native\", \"Native\", \"Nati…\n$ Occupation_Status_Father &lt;chr&gt; \"Unemployed\", \"Employed\", \"Unemployed\", \"Empl…\n$ Occupation_Status_Mother &lt;chr&gt; \"Employed\", \"Employed\", \"Unemployed\", \"Employ…\n$ Have_Comp                &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n$ Have_EduSW               &lt;chr&gt; \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes…\n$ Have_Internet            &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n$ Edu_Mother               &lt;ord&gt; Tertiary, Post-Secondary, Secondary, Post-Sec…\n$ Edu_Father               &lt;ord&gt; Post-Secondary, Post-Secondary, Secondary, Po…\n$ Time_HW_Math             &lt;ord&gt; &lt;31, 61-120, 31-60, 61-120, &gt;120, &lt;31, &lt;31, 3…\n$ Time_HW_Reading          &lt;ord&gt; &lt;31, 31-60, 61-120, &lt;31, 61-120, &lt;31, &lt;31, 31…\n$ Time_HW_Science          &lt;ord&gt; 31-60, 61-120, 61-120, 31-60, &gt;120, &lt;31, &lt;31,…\n$ PV1MATH                  &lt;dbl&gt; 639.004, 697.191, 693.710, 427.317, 436.462, …\n$ PV2MATH                  &lt;dbl&gt; 601.251, 754.277, 654.450, 410.376, 453.450, …\n$ PV3MATH                  &lt;dbl&gt; 621.480, 671.940, 696.938, 423.586, 392.315, …\n$ PV4MATH                  &lt;dbl&gt; 631.596, 657.300, 646.187, 388.935, 439.986, …\n$ PV5MATH                  &lt;dbl&gt; 579.276, 621.126, 678.119, 330.962, 443.125, …\n$ PV6MATH                  &lt;dbl&gt; 591.791, 655.729, 644.019, 379.988, 452.648, …\n$ PV7MATH                  &lt;dbl&gt; 600.709, 747.934, 720.531, 398.535, 396.970, …\n$ PV8MATH                  &lt;dbl&gt; 587.322, 694.365, 671.425, 422.127, 459.945, …\n$ PV9MATH                  &lt;dbl&gt; 618.131, 742.732, 694.085, 375.354, 438.166, …\n$ PV10MATH                 &lt;dbl&gt; 581.973, 656.934, 668.304, 453.348, 448.084, …\n$ PV1READ                  &lt;dbl&gt; 676.298, 625.585, 620.116, 381.495, 448.199, …\n$ PV2READ                  &lt;dbl&gt; 692.247, 686.716, 559.078, 400.815, 560.636, …\n$ PV3READ                  &lt;dbl&gt; 690.981, 663.147, 554.767, 374.911, 365.478, …\n$ PV4READ                  &lt;dbl&gt; 643.067, 567.435, 587.026, 367.484, 469.970, …\n$ PV5READ                  &lt;dbl&gt; 627.908, 614.500, 591.806, 336.009, 503.664, …\n$ PV6READ                  &lt;dbl&gt; 684.676, 604.745, 570.547, 324.630, 481.215, …\n$ PV7READ                  &lt;dbl&gt; 661.380, 669.375, 599.078, 396.242, 436.800, …\n$ PV8READ                  &lt;dbl&gt; 674.070, 623.735, 545.610, 374.723, 531.226, …\n$ PV9READ                  &lt;dbl&gt; 666.282, 649.579, 610.466, 314.704, 480.997, …\n$ PV10READ                 &lt;dbl&gt; 657.387, 571.261, 590.758, 342.956, 478.578, …\n$ PV1SCIE                  &lt;dbl&gt; 710.634, 670.646, 666.095, 340.308, 456.333, …\n$ PV2SCIE                  &lt;dbl&gt; 618.739, 748.839, 604.771, 329.889, 453.400, …\n$ PV3SCIE                  &lt;dbl&gt; 591.623, 635.443, 704.217, 411.353, 498.937, …\n$ PV4SCIE                  &lt;dbl&gt; 659.770, 639.735, 687.659, 327.974, 532.324, …\n$ PV5SCIE                  &lt;dbl&gt; 635.892, 608.385, 690.974, 292.183, 508.231, …\n$ PV6SCIE                  &lt;dbl&gt; 646.901, 670.662, 617.175, 355.423, 504.461, …\n$ PV7SCIE                  &lt;dbl&gt; 603.569, 734.807, 692.886, 400.182, 404.572, …\n$ PV8SCIE                  &lt;dbl&gt; 621.352, 639.748, 630.900, 317.518, 549.457, …\n$ PV9SCIE                  &lt;dbl&gt; 659.674, 716.768, 656.620, 298.893, 411.062, …\n$ PV10SCIE                 &lt;dbl&gt; 649.719, 655.670, 649.087, 362.702, 473.613, …\n\n\n\nObservations:\n\nSchID should be converted from &lt;dbl&gt; to &lt;chr&gt; format. It should be in categorical instead of numerical data type.\nThe columns Gender, Immigration_Status, Occupation_Status_Father, Occupation_Status_Mother, Have_Comp, Have_EduSW, Have_Internet, Edu_Mother, Edu_Father, Time_HW_Math, Time_HW_Reading, and Time_HW_Science are in numeric data type. These should be in factor data type for further processing.\n\n\nThe code chunk below does the following:\n\nacross of dplyr package is used to convert all character data type into factor for multiple columns. It applies as.factor() function to convert the variables from numeric to categorical data type each column specified in the col argument.\nas.character() is used to convert the SchID variable from numeric to categorical data type.\n\n\ncol &lt;- c(\"Gender\", \"Immigration_Status\", \"Occupation_Status_Father\", \"Occupation_Status_Mother\",\n         \"Have_Comp\", \"Have_EduSW\", \"Have_Internet\", \"Edu_Mother\", \"Edu_Father\",\n         \"Time_HW_Math\", \"Time_HW_Reading\", \"Time_HW_Science\")\n\nstu_SG_filtered &lt;- stu_SG_filtered %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(SchID = as.character(SchID))\n\nWe use glimpse() again to check the results.\n\nglimpse(stu_SG_filtered)\n\nRows: 6,232\nColumns: 43\n$ SchID                    &lt;chr&gt; \"70200052\", \"70200134\", \"70200112\", \"70200004…\n$ Gender                   &lt;fct&gt; Female, Male, Male, Male, Female, Female, Mal…\n$ Immigration_Status       &lt;fct&gt; Native, Native, Native, Native, Native, Third…\n$ Occupation_Status_Father &lt;fct&gt; Unemployed, Employed, Unemployed, Employed, E…\n$ Occupation_Status_Mother &lt;fct&gt; Employed, Employed, Unemployed, Employed, Emp…\n$ Have_Comp                &lt;fct&gt; Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, …\n$ Have_EduSW               &lt;fct&gt; Yes, Yes, No, Yes, Yes, Yes, Yes, Yes, Yes, Y…\n$ Have_Internet            &lt;fct&gt; Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, …\n$ Edu_Mother               &lt;ord&gt; Tertiary, Post-Secondary, Secondary, Post-Sec…\n$ Edu_Father               &lt;ord&gt; Post-Secondary, Post-Secondary, Secondary, Po…\n$ Time_HW_Math             &lt;ord&gt; &lt;31, 61-120, 31-60, 61-120, &gt;120, &lt;31, &lt;31, 3…\n$ Time_HW_Reading          &lt;ord&gt; &lt;31, 31-60, 61-120, &lt;31, 61-120, &lt;31, &lt;31, 31…\n$ Time_HW_Science          &lt;ord&gt; 31-60, 61-120, 61-120, 31-60, &gt;120, &lt;31, &lt;31,…\n$ PV1MATH                  &lt;dbl&gt; 639.004, 697.191, 693.710, 427.317, 436.462, …\n$ PV2MATH                  &lt;dbl&gt; 601.251, 754.277, 654.450, 410.376, 453.450, …\n$ PV3MATH                  &lt;dbl&gt; 621.480, 671.940, 696.938, 423.586, 392.315, …\n$ PV4MATH                  &lt;dbl&gt; 631.596, 657.300, 646.187, 388.935, 439.986, …\n$ PV5MATH                  &lt;dbl&gt; 579.276, 621.126, 678.119, 330.962, 443.125, …\n$ PV6MATH                  &lt;dbl&gt; 591.791, 655.729, 644.019, 379.988, 452.648, …\n$ PV7MATH                  &lt;dbl&gt; 600.709, 747.934, 720.531, 398.535, 396.970, …\n$ PV8MATH                  &lt;dbl&gt; 587.322, 694.365, 671.425, 422.127, 459.945, …\n$ PV9MATH                  &lt;dbl&gt; 618.131, 742.732, 694.085, 375.354, 438.166, …\n$ PV10MATH                 &lt;dbl&gt; 581.973, 656.934, 668.304, 453.348, 448.084, …\n$ PV1READ                  &lt;dbl&gt; 676.298, 625.585, 620.116, 381.495, 448.199, …\n$ PV2READ                  &lt;dbl&gt; 692.247, 686.716, 559.078, 400.815, 560.636, …\n$ PV3READ                  &lt;dbl&gt; 690.981, 663.147, 554.767, 374.911, 365.478, …\n$ PV4READ                  &lt;dbl&gt; 643.067, 567.435, 587.026, 367.484, 469.970, …\n$ PV5READ                  &lt;dbl&gt; 627.908, 614.500, 591.806, 336.009, 503.664, …\n$ PV6READ                  &lt;dbl&gt; 684.676, 604.745, 570.547, 324.630, 481.215, …\n$ PV7READ                  &lt;dbl&gt; 661.380, 669.375, 599.078, 396.242, 436.800, …\n$ PV8READ                  &lt;dbl&gt; 674.070, 623.735, 545.610, 374.723, 531.226, …\n$ PV9READ                  &lt;dbl&gt; 666.282, 649.579, 610.466, 314.704, 480.997, …\n$ PV10READ                 &lt;dbl&gt; 657.387, 571.261, 590.758, 342.956, 478.578, …\n$ PV1SCIE                  &lt;dbl&gt; 710.634, 670.646, 666.095, 340.308, 456.333, …\n$ PV2SCIE                  &lt;dbl&gt; 618.739, 748.839, 604.771, 329.889, 453.400, …\n$ PV3SCIE                  &lt;dbl&gt; 591.623, 635.443, 704.217, 411.353, 498.937, …\n$ PV4SCIE                  &lt;dbl&gt; 659.770, 639.735, 687.659, 327.974, 532.324, …\n$ PV5SCIE                  &lt;dbl&gt; 635.892, 608.385, 690.974, 292.183, 508.231, …\n$ PV6SCIE                  &lt;dbl&gt; 646.901, 670.662, 617.175, 355.423, 504.461, …\n$ PV7SCIE                  &lt;dbl&gt; 603.569, 734.807, 692.886, 400.182, 404.572, …\n$ PV8SCIE                  &lt;dbl&gt; 621.352, 639.748, 630.900, 317.518, 549.457, …\n$ PV9SCIE                  &lt;dbl&gt; 659.674, 716.768, 656.620, 298.893, 411.062, …\n$ PV10SCIE                 &lt;dbl&gt; 649.719, 655.670, 649.087, 362.702, 473.613, …"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-creation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-creation",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "4.5 Variable Creation",
    "text": "4.5 Variable Creation\n\n4.5.1 Calculating Average Plausible Values\nThe following code chunk calculates the mean Plausible Values of each row for each subject for the columns saved under PV_Math, PV_Reading, and PV_Sci.\n\nc_across() works with rowwise() to perform aggregations on a data frame a row at a time.\n\nc_across() allows us to indicate the columns we want to transform.\n\nna.rm=TRUE ignores NA values when calculating the mean.\nmutate() creates new columns to store our new variable.\nselect() and the - minus sign removes columns we no longer require.\n\n\n# Columns of interest\nPV_Math &lt;- c(\"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\")\nPV_Reading &lt;- c(\"PV1READ\", \"PV2READ\", \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \"PV9READ\", \"PV10READ\")\nPV_Sci &lt;- c(\"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")\n\n# Performing row-wise aggregation\nstu_SG_lean &lt;- \n  stu_SG_filtered %&gt;% \n  rowwise() %&gt;% \n  mutate(Avg_Math = mean(c_across(PV_Math), na.rm=TRUE),\n         Avg_Reading = mean(c_across(PV_Reading), na.rm=TRUE),\n         Avg_Sci = mean(c_across(PV_Sci), na.rm=TRUE)) %&gt;% \n  select(-c(PV_Math, PV_Reading, PV_Sci))\n\n\n\n4.5.2 Retrieving Variables from Schools Questionnaire\nThe School Questionnaire administered to school principals contains additional data we can use to further analyse how variations in school-related factors can affect students’ performance.\nThe dataset in SAS format is retrieved from OECD’s PISA 2022 Database.\n\n\n\n\n\nread_sav of the haven package lets us read SPSS data (in .sav data format) into RStudio.\n\nsch &lt;- read_sav(\"data/CY08MSP_SCH_QQQ.sav\")\n\nsch\n\n# A tibble: 21,629 × 432\n   CNT         CNTRYID CNTSCHID CYC   NatCen     STRATUM    SUBNATIO   REGION   \n   &lt;chr+lbl&gt;   &lt;dbl+l&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr+lbl&gt;  &lt;chr+lbl&gt;  &lt;chr+lbl&gt;  &lt;dbl+lbl&gt;\n 1 ALB [Alban… 8 [Alb…   800001 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n 2 ALB [Alban… 8 [Alb…   800002 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n 3 ALB [Alban… 8 [Alb…   800003 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n 4 ALB [Alban… 8 [Alb…   800004 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n 5 ALB [Alban… 8 [Alb…   800005 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n 6 ALB [Alban… 8 [Alb…   800006 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n 7 ALB [Alban… 8 [Alb…   800007 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n 8 ALB [Alban… 8 [Alb…   800008 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n 9 ALB [Alban… 8 [Alb…   800009 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n10 ALB [Alban… 8 [Alb…   800010 08MS  000… [Alb… ALB… [ALB… 008… [Alb… 800 [Alb…\n# ℹ 21,619 more rows\n# ℹ 424 more variables: OECD &lt;dbl+lbl&gt;, ADMINMODE &lt;dbl+lbl&gt;,\n#   LANGTEST_QQQ &lt;dbl+lbl&gt;, SC001Q01TA &lt;dbl+lbl&gt;, SC013Q01TA &lt;dbl+lbl&gt;,\n#   SC014Q01TA &lt;dbl+lbl&gt;, SC016Q01TA &lt;dbl+lbl&gt;, SC016Q02TA &lt;dbl+lbl&gt;,\n#   SC016Q03TA &lt;dbl+lbl&gt;, SC016Q04TA &lt;dbl+lbl&gt;, SC011Q01TA &lt;dbl+lbl&gt;,\n#   SC002Q01TA &lt;dbl+lbl&gt;, SC002Q02TA &lt;dbl+lbl&gt;, SC211Q01JA &lt;dbl+lbl&gt;,\n#   SC211Q02JA &lt;dbl+lbl&gt;, SC211Q03JA &lt;dbl+lbl&gt;, SC211Q04JA &lt;dbl+lbl&gt;, …\n\n\nSimilar to the Student’s Questionnaire, let’s first filter for Singapore schools.\n\nsch_SG &lt;- sch %&gt;%\n  filter(CNT == \"SGP\")\n\nhead(sch_SG,3)\n\n# A tibble: 3 × 432\n  CNT             CNTRYID        CNTSCHID CYC   NatCen     STRATUM    SUBNATIO  \n  &lt;chr+lbl&gt;       &lt;dbl+lbl&gt;         &lt;dbl&gt; &lt;chr&gt; &lt;chr+lbl&gt;  &lt;chr+lbl&gt;  &lt;chr+lbl&gt; \n1 SGP [Singapore] 702 [Singapor… 70200001 08MS  070… [Sin… SGP… [SGP… 702… [Sin…\n2 SGP [Singapore] 702 [Singapor… 70200002 08MS  070… [Sin… SGP… [SGP… 702… [Sin…\n3 SGP [Singapore] 702 [Singapor… 70200003 08MS  070… [Sin… SGP… [SGP… 702… [Sin…\n# ℹ 425 more variables: REGION &lt;dbl+lbl&gt;, OECD &lt;dbl+lbl&gt;, ADMINMODE &lt;dbl+lbl&gt;,\n#   LANGTEST_QQQ &lt;dbl+lbl&gt;, SC001Q01TA &lt;dbl+lbl&gt;, SC013Q01TA &lt;dbl+lbl&gt;,\n#   SC014Q01TA &lt;dbl+lbl&gt;, SC016Q01TA &lt;dbl+lbl&gt;, SC016Q02TA &lt;dbl+lbl&gt;,\n#   SC016Q03TA &lt;dbl+lbl&gt;, SC016Q04TA &lt;dbl+lbl&gt;, SC011Q01TA &lt;dbl+lbl&gt;,\n#   SC002Q01TA &lt;dbl+lbl&gt;, SC002Q02TA &lt;dbl+lbl&gt;, SC211Q01JA &lt;dbl+lbl&gt;,\n#   SC211Q02JA &lt;dbl+lbl&gt;, SC211Q03JA &lt;dbl+lbl&gt;, SC211Q04JA &lt;dbl+lbl&gt;,\n#   SC211Q05JA &lt;dbl+lbl&gt;, SC211Q06JA &lt;dbl+lbl&gt;, SC018Q01TA01 &lt;dbl+lbl&gt;, …\n\n\nA quick look at the data using head() shows that the table contains column CNTSCHID that we can use to perform a join with our stu_SG_lean table to patch in additional variables.\nAfter perusing through the Codebook, the following variables are selected for further analysis:\n\n\n\n\n\n\n\n\n\n\n\nCategory\nVariable Name\nDescription/Question\nType\nEncoding Scheme\n\n\n\n\nSchool\nSCHLTYPE\nSchool type\nNUM\n1 - Private independent\n2 - Private Government-dependent\n3 - Public\n\n\nSchool\nSTRATIO\nStudent-teacher ratio\nNUM\n\n\n\n\n\n4.5.2.1 Narrowing School Data\nThe code chunk below performs the following purpose:\n\nselect() extracts using the names of columns we have identified.\nrename() changes the names of individual variables so they are more intuitive.\nmutate() replaces ‘SchType’ from numeric type to factor type using as.factor() and replaces ‘SchID’ numeric to character data type with as.character().\n\n\nsch_SG_lean &lt;- sch_SG %&gt;% \n  select(CNTSCHID, SCHLTYPE, STRATIO) %&gt;% \n  rename(c(SchID=\"CNTSCHID\",\n           SchType=\"SCHLTYPE\",\n           StuTeacher_ratio=\"STRATIO\")) %&gt;% \n  mutate(SchType=as.factor(SchType)) %&gt;%\n  mutate(SchID = as.character(SchID))\n\n\n\n4.5.2.2 Recoding School Type\nSchType is recoded to reflect the type of schools in the education system (Private Independent, Private government-dependent, and public).\n\nsch_SG_lean &lt;- sch_SG_lean %&gt;%\n  mutate(SchType=\n           (recode(SchType, \n                   '1'=\"privindependent\", \n                   '2'=\"privgovdependent\", \n                   '3'=\"public\")))\n\n\n\n4.5.2.3 Combining with Students data\nNext, the left_join() retains all observations that appear in the left (first) data frame, even if they lack a match in the right (second) dataframe. by=c(\"SchID\"=\"CNTSCHID\") refers to the key used to perform the match, which are SchID from stu_SG_lean data and CNTSCHID from sch_SG_lean data.\n\nstu_SG_more &lt;- \n  left_join(stu_SG_lean, \n            sch_SG_lean,\n            by=c(\"SchID\"=\"SchID\")) %&gt;% \n  mutate(StuTeacher_ratio = as.numeric(StuTeacher_ratio))\n\nFinally, is.na() function is used to confirm that there are no missing values in our data,\n\nsum(is.na(stu_SG_more))\n\n[1] 0\n\n\nThe first 5 results of the final dataset are displayed below using kable() of the knitr package.\n\nkable(head(stu_SG_more, n=5), caption = \"Results from the 2022 PISA Student Questionnaire Survey\")\n\n\nResults from the 2022 PISA Student Questionnaire Survey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSchID\nGender\nImmigration_Status\nOccupation_Status_Father\nOccupation_Status_Mother\nHave_Comp\nHave_EduSW\nHave_Internet\nEdu_Mother\nEdu_Father\nTime_HW_Math\nTime_HW_Reading\nTime_HW_Science\nAvg_Math\nAvg_Reading\nAvg_Sci\nSchType\nStuTeacher_ratio\n\n\n\n\n70200052\nFemale\nNative\nUnemployed\nEmployed\nYes\nYes\nYes\nTertiary\nPost-Secondary\n&lt;31\n&lt;31\n31-60\n605.2533\n667.4296\n639.7873\npublic\n13.7528\n\n\n70200134\nMale\nNative\nEmployed\nEmployed\nYes\nYes\nYes\nPost-Secondary\nPost-Secondary\n61-120\n31-60\n61-120\n689.9528\n627.6078\n672.0703\npublic\n11.1354\n\n\n70200112\nMale\nNative\nUnemployed\nUnemployed\nYes\nNo\nYes\nSecondary\nSecondary\n31-60\n61-120\n61-120\n676.7768\n582.9252\n660.0384\npublic\n12.8729\n\n\n70200004\nMale\nNative\nEmployed\nEmployed\nYes\nYes\nYes\nPost-Secondary\nPost-Secondary\n61-120\n&lt;31\n31-60\n401.0528\n361.3969\n343.6425\npublic\n13.2381\n\n\n70200152\nFemale\nNative\nEmployed\nEmployed\nYes\nYes\nYes\nPost-Secondary\nPost-Secondary\n&gt;120\n61-120\n&gt;120\n436.1151\n475.6763\n479.2390\npublic\n10.6391"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#target-variables-subject-performance",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#target-variables-subject-performance",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "5.1 Target Variables: Subject Performance",
    "text": "5.1 Target Variables: Subject Performance\nWhen exploring new data, one of the first steps is to look at the distributions of the target variables. In this case, our targets are the scores for Science, Reading, and Math. A histogram wih a boxplot can show how the scores are distribution among the students.\nNote that the axis limits are consistent across the three subjects to facilitate comparison. This ensures that when a user navigates between various tabs, the scales remain identical. This uniformity in scale is crucial as it allows for more accurate and straightforward comparison. Users can easily compare data across different subjects without the need to adjust mentally for variation in scale.\n\nMathReadingScience\n\n\n\n\nShow the code\n# Sets theme for the rest of the plots\npacman::p_load(urbnthemes)\nset_urbn_defaults(style = \"print\")\n\n# Calculating the mean, median, min and max\nmean_math &lt;- round(mean(stu_SG_more$Avg_Math),0)\nmedian_math &lt;- round(median(stu_SG_more$Avg_Math),0)\nmin_math &lt;- round(min(stu_SG_more$Avg_Math),0)\nmax_math &lt;- round(max(stu_SG_more$Avg_Math),0)\nleftwhisk_math &lt;- round(quantile(stu_SG_more$Avg_Math, probs = .25)-1.5*IQR(stu_SG_more$Avg_Math),0)\n\n# Histogram\nhist_math &lt;- \n  ggplot(\n    stu_SG_more, \n    aes(x = Avg_Math)\n  ) +\n  geom_histogram(\n    bins = 25,\n    color = \"#f5f5f5\",\n    fill=\"#c7c8cc\"\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    \n    # Set same limits for both plots for consistency\n    limits = c(150,950), \n  ) + \n  geom_vline(\n    aes(xintercept = median_math),\n    colour=\"#595DE5\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 660, \n    y = 870,\n    label = paste0(\"Median = \", median_math),\n    color=\"#595DE5\"\n  ) +\n  geom_vline(\n    aes(xintercept = mean_math),\n    colour=\"#e0218a\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 535, \n    y = 870,\n    label = paste0(\"Mean = \", mean_math),\n    color=\"#e0218a\"\n  ) +  \n  labs(x = NULL, y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\n# Boxplot\nbox_math &lt;- \n  ggplot(\n    stu_SG_more, \n    aes(y = Avg_Math, x=\"\")\n  ) + \n  geom_boxplot(\n    fill=\"#c7c8cc\",\n    outlier.colour=\"#d18a7d\", \n    outlier.shape=16,\n    outlier.size=1, \n    notch=FALSE\n  ) + \n  stat_summary(geom = 'point',\n               fun.y='mean',\n               colour = '#e0218a',\n               size=4) +\n  coord_flip() + \n  \n    #Annotate with amounts to show range\n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = min_math,\n    label = paste0(min_math),\n    color = \"#d18a7d\"\n  ) + \n   annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = leftwhisk_math,\n    label = paste0(leftwhisk_math),\n    color = \"#34414E\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = max_math,\n    label = paste0(max_math),\n    color = \"#34414E\"\n  ) + \n  \n  labs(\n    title = \"Symmetrical Distribution of Average Math Scores\",\n     y = \"\", \n    x = \"\"\n  ) + \n   scale_y_continuous(\n    limits = c(150,950), \n  ) +\n  \n  stat_boxplot(\n    geom=\"errorbar\", \n    width=0.5\n  ) + \n  theme_minimal() +\n  theme(\n    axis.text = element_blank(), \n    axis.ticks = element_blank(),\n    panel.grid.major = element_blank(),\n     plot.background = element_rect(\n       fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\nhbox_math &lt;- (box_math / hist_math) + \n        plot_layout(heights = c(1, 3.5)) #&lt; Scale layout to keep boxplot height shorter\n\nhbox_math & theme(plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\nShow the code\n# Calculating the mean, median, min and max\nmean_reading &lt;- round(mean(stu_SG_more$Avg_Reading),0)\nmedian_reading &lt;- round(median(stu_SG_more$Avg_Reading),0)\nmin_reading &lt;- round(min(stu_SG_more$Avg_Reading),0)\nmax_reading &lt;- round(max(stu_SG_more$Avg_Reading),0)\nleftwhisk_reading &lt;- round(quantile(stu_SG_more$Avg_Reading, probs = .25)-1.5*IQR(stu_SG_more$Avg_Reading),0)\n\n# Histogram\nhist_reading &lt;- \n  ggplot(\n    stu_SG_more, \n    aes(x = Avg_Reading)\n  ) +\n  geom_histogram(\n    bins = 25,\n    color = \"#f5f5f5\",\n    fill=\"#c7c8cc\"\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    \n    # Set same limits for both plots for consistency\n    limits = c(150,950), \n  ) + \n  geom_vline(\n    aes(xintercept = median_reading),\n    colour=\"#595DE5\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = median_reading+80, \n    y = 920,\n    label = paste0(\"Median = \", median_reading),\n    color=\"#595DE5\"\n  ) +\n  geom_vline(\n    aes(xintercept = mean_reading),\n    colour=\"#e0218a\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = mean_reading-50, \n    y = 920,\n    label = paste0(\"Mean = \", mean_reading),\n    color=\"#e0218a\"\n  ) +  \n  labs(x = NULL, y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\n# Boxplot\nbox_reading &lt;- \n  ggplot(\n    stu_SG_more, \n    aes(y = Avg_Reading, x=\"\")\n  ) + \n  geom_boxplot(\n    fill=\"#c7c8cc\",\n    outlier.colour=\"#d18a7d\", \n    outlier.shape=16,\n    outlier.size=1, \n    notch=FALSE\n  ) + \n  stat_summary(geom = 'point',\n               fun.y='mean',\n               colour = '#e0218a',\n               size=4) +\n  coord_flip() + \n  \n    #Annotate with amounts to show range\n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = min_reading,\n    label = paste0(min_reading),\n    color = \"#d18a7d\"\n  ) + \n   annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = leftwhisk_reading,\n    label = paste0(leftwhisk_reading),\n    color = \"#34414E\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = max_reading,\n    label = paste0(max_reading),\n    color = \"#34414E\"\n  ) + \n  \n  labs(\n    title = \"Symmetrical Distribution of Average Reading Scores\",\n     y = \"\", \n    x = \"\"\n  ) + \n   scale_y_continuous(\n    limits = c(150,950), \n  ) +\n  \n  stat_boxplot(\n    geom=\"errorbar\", \n    width=0.5\n  ) + \n  theme_minimal() +\n  theme(\n    axis.text = element_blank(), \n    axis.ticks = element_blank(),\n    panel.grid.major = element_blank(),\n     plot.background = element_rect(\n       fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\nhbox_reading &lt;- (box_reading / hist_reading) + \n        plot_layout(heights = c(1, 3.5)) #&lt; Scale layout to keep boxplot height shorter\n\nhbox_reading & theme(plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\nShow the code\n# Calculating the mean, median, min and max\nmean_sci &lt;- round(mean(stu_SG_more$Avg_Sci),0)\nmedian_sci &lt;- round(median(stu_SG_more$Avg_Sci),0)\nmin_sci &lt;- round(min(stu_SG_more$Avg_Sci),0)\nmax_sci &lt;- round(max(stu_SG_more$Avg_Sci),0)\nleftwhisk_sci &lt;- round(quantile(stu_SG_more$Avg_Sci, probs = .25)-1.5*IQR(stu_SG_more$Avg_Sci),0)\n\n# Histogram\nhist_sci &lt;- \n  ggplot(\n    stu_SG_more, \n    aes(x = Avg_Sci)\n  ) +\n  geom_histogram(\n    bins = 25,\n    color = \"#f5f5f5\",\n    fill=\"#c7c8cc\"\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    \n    # Set same limits for both plots for consistency\n    limits = c(150,950), \n  ) + \n  geom_vline(\n    aes(xintercept = median_sci),\n    colour=\"#595DE5\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = median_sci+70, \n    y = 940,\n    label = paste0(\"Median = \", median_sci),\n    color=\"#595DE5\"\n  ) +\n  geom_vline(\n    aes(xintercept = mean_sci),\n    colour=\"#e0218a\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = mean_sci-50, \n    y = 940,\n    label = paste0(\"Mean = \", mean_sci),\n    color=\"#e0218a\"\n  ) +  \n  labs(x = NULL, y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\n# Boxplot\nbox_sci &lt;- \n  ggplot(\n    stu_SG_more, \n    aes(y = Avg_Sci, x=\"\")\n  ) + \n  geom_boxplot(\n    fill=\"#c7c8cc\",\n    outlier.colour=\"#d18a7d\", \n    outlier.shape=16,\n    outlier.size=1, \n    notch=FALSE\n  ) + \n  stat_summary(geom = 'point',\n               fun.y='mean',\n               colour = '#e0218a',\n               size=4) +\n  coord_flip() + \n  \n  #Annotate with amounts to show range\n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = min_sci,\n    label = paste0(min_sci),\n    color = \"#d18a7d\"\n  ) + \n   annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = leftwhisk_sci,\n    label = paste0(leftwhisk_sci),\n    color = \"#34414E\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = max_sci,\n    label = paste0(max_sci),\n    color = \"#34414E\"\n  ) + \n  \n  labs(\n    title = \"Symmetrical Distribution of Average Science Scores\",\n     y = \"\", \n    x = \"\"\n  ) + \n   scale_y_continuous(\n    limits = c(150,950), \n  ) +\n  \n  stat_boxplot(\n    geom=\"errorbar\", \n    width=0.5\n  ) + \n  theme_minimal() +\n  theme(\n    axis.text = element_blank(), \n    axis.ticks = element_blank(),\n    panel.grid.major = element_blank(),\n     plot.background = element_rect(\n       fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\nhbox_sci &lt;- (box_sci / hist_sci) + \n        plot_layout(heights = c(1, 3.5)) #&lt; Scale layout to keep boxplot height shorter\n\nhbox_sci & theme(plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#time-spent-on-homework-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#time-spent-on-homework-1",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "5.2 Time Spent on Homework",
    "text": "5.2 Time Spent on Homework\nBar charts can be used to represent frequencies of different categories, appropriate for categorical variables that use a nominal or ordinal scale of measurement. Adding direct labels can increase accessibility of a bar graph and reduce the “chart junk” since grid lines, axis labels, and even axis titles become obsolete. Ordering bar charts for categorical values with no internal order can help the reader focus on the largest and smallest groups. In the plot below, arranging according to increasing time frame would make sense as the variable follows the ordinal scale.\n\n\nShow the code\np2_hwt_reading &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Reading)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Reading\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np2_hwt_math &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Math)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Math\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np2_hwt_sci &lt;- ggplot(data = stu_SG_filtered, \n       aes(x = Time_HW_Science)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 2600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \\n\", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.2,\n      size=3) +  \n    labs(x = \"\",\n         y = \"\",\n         title=\"Science\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\n\np2_hwt_math + p2_hwt_reading + p2_hwt_sci +\n  plot_layout(widths=c(1,1,1)) +\n  plot_annotation(title=\"Time Spent on Homework in mins\", \n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\n\n\n\n\n\nObservations\n\nBoth Science and Math seem to be more spread out to cover more timeframes.\nThe bar chart is clustered around the lower end of time spent on homework for Reading.\nThis is interesting because median and mean Reading scores are the lowest among the 3 subjects."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#student-characteristics",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#student-characteristics",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "5.3 Student Characteristics",
    "text": "5.3 Student Characteristics\nTo calculate percentage values, we can either create the labels first or on the fly. In the last and next few plots, the labels are added with the help of geom_text() to add text as marker labels, after_stat() to count the frequency, and paste0 for concatenation.\ngeom_text() comes with arguments that help you to align and position text labels. hjust and vjust refers to the horizontal and vertical justification to align text, while nudge_x and nudge_y offset text from points horizontally and vertically.\n\n\nShow the code\np_gender &lt;-\n  ggplot(data = stu_SG_more, \n       aes(x = reorder(Gender, Gender, function(x)-length(x)))) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 5200) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title = \"Gender: \") + \n    theme(\n      plot.title = element_text(size=9, face=\"bold\"),\n      panel.grid.major = element_blank(), \n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),   \n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np_immig &lt;-\n  ggplot(data = stu_SG_more, \n       aes(x = Immigration_Status)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 5200) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title = \"Immigration Status: \") + \n    theme(\n      plot.title = element_text(size=9, face=\"bold\"),\n      panel.grid.major = element_blank(), \n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),     \n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\n\np_havecomp &lt;- ggplot(data = stu_SG_more, \n       aes(x = Have_Comp)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 6600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title=\"Computer: \") + \n    theme(\n      plot.title = element_text(size=9, face=\"bold\"),\n      panel.grid.major = element_blank(), \n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),   \n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np_haveEduSW &lt;- ggplot(data = stu_SG_more, \n       aes(x = Have_EduSW)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 6600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title=\"Educational Software: \") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\",)\n    ) \n\np_haveInternet &lt;- ggplot(data = stu_SG_more, \n       aes(x = Have_Internet)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 6600) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title=\"Internet: \") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\n\np_access &lt;- (p_havecomp + p_haveEduSW + p_haveInternet) \np_stuchar &lt;- (p_gender + p_immig) / p_access +\n              plot_layout(widths = c(1,1))+\n              plot_annotation(title=\"Equitable gender distribution, majority native Singaporeans,\\n and high access to educational hools at home\", \n                              theme=theme(plot.title = element_text(hjust = 0),\n                                          plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                                          panel.border = element_blank()))\n\n\np_stuchar\n\n\n\n\n\n\nObservations\n\nThe students responses are almost evenly distributed between males and females. Uneven distributions seen across Immigration Status, and home access to educational resources like computers, educational software, and internet.\nNative Singaporeans make up the bulk of the survey responses.\nMost students have access to educational tools/resources such as computer, educational software, and the internet from home."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#parents-occupational-educational-status",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#parents-occupational-educational-status",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "5.4 Parents Occupational & Educational Status",
    "text": "5.4 Parents Occupational & Educational Status\n\n\nShow the code\np_osf &lt;- ggplot(data = stu_SG_more, \n       aes(x = Occupation_Status_Father)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 6110) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title=\"Father\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np_osm &lt;- ggplot(data = stu_SG_more, \n       aes(x = Occupation_Status_Mother)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 6110) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title=\"Mother\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np_eduF &lt;- ggplot(data = stu_SG_more, \n       aes(x = Edu_Father)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 6110) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title=\"Father\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\np_eduM &lt;- ggplot(data = stu_SG_more, \n       aes(x = Edu_Mother)) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 6110) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title=\"Mother\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    )  \n\np_eduF + p_osf + p_eduM + p_osm +\n  plot_layout(widths=c(2,1)) +\n  plot_annotation(title = \"Most students have parents who are employed, with nearly half of them having tertiary education.\", \n                  subtitle=\"Similar patterns in education and employment among fathers and mothers\", \n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\n\n\n\n\n\nObservations\n\nThere are more parents with post-secondary and tertiary education compared to lower levels of educational attainment. Employed parents make up the majority of the responses.\nThe split between educational levels and employment status are similar between Fathers and Mothers. Both have the highest proportion (almost half) with Tertiary education and most parents are employed.\nUnemployed father are almost twice as many as unemployed mothers."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#school-characteristics",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#school-characteristics",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "5.5 School Characteristics",
    "text": "5.5 School Characteristics\n\n\nShow the code\np_schtype &lt;- ggplot(data = stu_SG_more, \n       aes(x = SchType )) +\n    geom_bar(fill=\"#c7c8cc\")+\n    ylim(0, 6110) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-0.5,\n      size=3) +\n    labs(x = \"\",\n         y = \"\",\n         title=\"School Type\") + \n    theme(\n      panel.grid.major = element_blank(), \n      plot.title = element_text(size=9, face=\"bold\"),\n      axis.text.y = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      #axis.ticks.x = element_blank(),      \n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    ) \n\n# Calculating the mean, median, min and max\nmean_str &lt;- round(mean(stu_SG_more$StuTeacher_ratio),2)\nmedian_str &lt;- round(median(stu_SG_more$StuTeacher_ratio),2)\nmin_str &lt;- round(min(stu_SG_more$StuTeacher_ratio),2)\nmax_str &lt;- round(max(stu_SG_more$StuTeacher_ratio),2)\nleftwhisk_str &lt;- round(quantile(stu_SG_more$StuTeacher_ratio, probs = .25)-1.5*IQR(stu_SG_more$StuTeacher_ratio),2)\n\n# Histogram\nhist_str &lt;- \n  ggplot(\n    stu_SG_more, \n    aes(x = StuTeacher_ratio)\n  ) +\n  geom_histogram(\n    bins = 25,\n    color = \"#f5f5f5\",\n    fill=\"#c7c8cc\"\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    \n    # Set same limits for both plots for consistency\n    limits = c(1,100), \n  ) + \n  geom_vline(\n    aes(xintercept = median_str),\n    colour=\"#595DE5\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 20, \n    y = 5000,\n    label = paste0(\"Median =\\n\", median_str),\n    color=\"#595DE5\"\n  ) +\n  geom_vline(\n    aes(xintercept = mean_str),\n    colour=\"#e0218a\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 5, \n    y = 5000,\n    label = paste0(\"Mean =\\n\", mean_str),\n    color=\"#e0218a\"\n  ) +  \n  labs(x = NULL, y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\n# Boxplot\nbox_str &lt;- \n  ggplot(\n    stu_SG_more, \n    aes(y = StuTeacher_ratio, x=\"\")\n  ) + \n  geom_boxplot(\n    fill=\"#c7c8cc\",\n    outlier.colour=\"#d18a7d\", \n    outlier.shape=16,\n    outlier.size=1, \n    notch=FALSE\n  ) + \n  stat_summary(geom = 'point',\n               fun.y='mean',\n               colour = '#e0218a',\n               size=2) +\n  coord_flip() + \n  \n  #Annotate with amounts to show range\n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = min_str,\n    label = paste0(min_str),\n    color = \"#d18a7d\"\n  ) + \n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = max_str,\n    label = paste0(max_str),\n    color = \"#d18a7d\"\n  ) + \n  \n  labs(\n    title = \"Distribution of Student-Teacher Ratio\",\n     y = \"\", \n    x = \"\"\n  ) + \n   scale_y_continuous(\n    limits = c(1,100), \n  ) +\n  \n  stat_boxplot(\n    geom=\"errorbar\", \n    width=0.5\n  ) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size=9, face=\"bold\"),\n    axis.text = element_blank(), \n    axis.ticks = element_blank(),\n    panel.grid.major = element_blank(),\n     plot.background = element_rect(\n       fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\n\nhbox_str &lt;- (box_str / hist_str) + \n        plot_layout(heights = c(1, 3.5)) #&lt; Scale layout to keep boxplot height shorter\n\n(p_schtype + hbox_str) +\n  plot_layout(widths=c(1,2)) +\n  plot_annotation(title=\"Most Responses from Public Schools Show a 12:1 Student-Teacher Ratio\", \n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\n\n\n\n\n\nObservations\n\nResponses are mostly from students attending public schools, with less than 10% of responses from private-school goers.\nThe distribution of Student-Teacher ratio is highly skewed to the right, with most of the responses centered around the mean and median Student-Teacher Ratio of 12.\nThere is a large variation in the Student-Teacher Ratio range. Significant outliers on both ends of the scale are noted, particularly on the right tail with a ratio of 100 students to 1 teacher.\nTo increase variability and to make the patterns in the data more interpretable, we can consider performing a log transformation to reduce the skewness of the variable.\n\nDesign Consideration for EDA\n\nInterestingly, the boxplot was able to highlight the outliers on the far right end of the scale while the histogram was unable to capture this due to the scale/range of the y-axis even though the y-axis starts from 0. Graphically, the boxplot is a much better tool for detecting outliers in such cases.\nYet, boxplots are not very helpful at conveying frequencies. It is hard to tell the sample size through conventional boxplots."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-distribution-of-subject-performance",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-distribution-of-subject-performance",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "6.1 Comparing distribution of subject performance",
    "text": "6.1 Comparing distribution of subject performance\nRidgeline plots are a way to express the distribution of the data for several categorical variables. The code chunk below uses geom_density_ridges() to show the distribution of scores by subject. Each curve gives the appropriate probability density function, where the area under the curve is 1.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of each subject score. When used as a fill aesthetic in a plot, it can create visual representation where areas of the plot that are closer to the median have a different colour intensity than areas that are further away. This is particularly useful for highlighting the central tendency and dispersion of data in a cumulative distribution plot.\npivot_longer() is used to pivot the subject scores into rows from its separate columns.\n\n\nShow the code\nstu_SG_more_long &lt;- \n  stu_SG_more %&gt;% \n  pivot_longer(cols = starts_with(\"Avg\"),\n               names_to = \"subject\",\n               names_prefix=\"Avg_\",\n               values_to=\"score\")\n\nggplot(data= stu_SG_more_long,\n        aes(x = score, \n            y = subject, \n           fill = 0.5-abs(0.5-after_stat(ecdf)))\n       )+ \n  geom_density_ridges_gradient(\n                     alpha = 0.8,\n                     scale = 2,\n                     geom = \"density_ridges_gradient\", \n                     calc_ecdf = TRUE) + \n  scale_fill_gradientn(colors = c(\"#ecc9d0\", \"#e0218a\")) +\n  #guides(color = \"none\", fill = \"none\") + \n  labs(x = \"Score\", y = NULL, title = \"Median score for Math higher than Science and Reading.\", \n         subtitle=\"Symmetrical curves appear to resemble Normal distributions across subject.\")+\n  theme(legend.position = \"right\",\n        legend.direction = \"vertical\",\n          plot.title = element_text(size = 12, face = \"bold\"),\n          plot.subtitle = element_text(size = 9),\n          plot.caption = element_text(size = rel(0.8)),\n          axis.text.y = element_text(size = rel(0.9)),\n          plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n          )\n\n\n\n\n\n\nInsights\n\nThe most probable scores are brighter (in hot pink).\nHere we can start to see that Math has the highest median among the 3 subjects.\nRange and distribution of the 3 subject scores appear to be quite similar.\n\n\nNow that we understand the basics of the data a bit more, let’s look more into their interaction with other variables."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-scores-against-time-spent-on-homework-between-genders",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-scores-against-time-spent-on-homework-between-genders",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "6.2 Comparing scores against time spent on homework between genders",
    "text": "6.2 Comparing scores against time spent on homework between genders\nA diverging plot is used to facilitate comparison between male and female students. gganimate() helps transition as amount of time spent on homework increases. transition_manual() animates the plot over the Time_HW_Math variable and y = -..density.. is used to create the diverging effect. This can allow us to detect changes or trends in our dataset.\nIdeally, I would like to include a mean line or a textbox to indicate the changing mean score for each gender at each timeframe and to put all 3 animations side by side, but I haven’t managed to figure that out yet.\n\nMathReadingScience\n\n\n\n\nShow the code\npyr_math &lt;- \n  ggplot(data = stu_SG_more,\n            aes(x = Avg_Math, group=Time_HW_Math)) +\n  # Math + Male\n  geom_density(data = subset(stu_SG_more, Gender==\"Male\"),\n               aes(x = Avg_Math,\n                   y=-..density..),\n               fill=\"#73b2c4\",\n               color=\"#73b2c4\",\n               alpha=0.5)+\n  # Math + Female\n  geom_density(data = subset(stu_SG_more, Gender==\"Female\"),\n               aes(x = Avg_Math,\n                   y=..density..),\n               fill=\"#f27279\",\n               colour=\"#f27279\",\n               alpha=0.5)+\n    guides(fill = guide_legend(reverse = TRUE)) +\n    theme_minimal() +\n    theme(legend.position = \"bottom\",\n          plot.title = element_markdown(size = 12, face = \"bold\"),\n          plot.subtitle = element_text(size = rel(0.8)),\n          plot.caption = element_text(size = rel(0.8)),\n          axis.text.y = element_text(size = rel(0.9)),\n          axis.text.x = element_blank(),\n          axis.title.x = element_blank(),\n          plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n          ) +\n  scale_x_continuous(breaks = seq(150,950,100),\n                     labels = seq(150,950,100)) +\n  scale_y_continuous(breaks = -1:1,\n                     labels = abs(-1:1)) +\n    labs(x = \"\", y = NULL, title = \"Better math scores for &lt;span style='color: #73b2c4;'&gt;males&lt;/span&gt;, cyclic trends for both &lt;span style='color: #f27279;'&gt;females&lt;/span&gt; and&lt;br&gt;&lt;span style='color: #73b2c4;'&gt;males&lt;/span&gt;\" ,\n         subtitle = \"Time spent on homework: {current_frame} minutes\",\n         fill = \"Gender\") +\n        coord_flip(clip=\"off\")+\n  annotate(\n    geom = \"text\", \n    x = 780, \n    y = -0.003,\n    label = \"Male\",\n    color = \"#4472af\")+\n      \n    annotate(\n    geom = \"text\", \n    x = 780, \n    y = 0.003,\n    label = \"Female\",\n    color = \"#e0218a\")\n\n\npyr_math +\n  transition_manual(factor(Time_HW_Math, c(\"&lt;31\", \"31-60\", \"61-120\", \"&gt;120\"))) +\n  ease_aes(\"linear\")\n\n\n\n\n\n\n\n\n\nShow the code\npyr_reading &lt;- \n  ggplot(data = stu_SG_more,\n            aes(x = Avg_Reading, group=Time_HW_Reading)) +\n  # Reading + Male\n  geom_density(data = subset(stu_SG_more, Gender==\"Male\"),\n               aes(y=-..density..),\n               fill=\"#73b2c4\",\n               color=\"#73b2c4\",\n               alpha=0.5)+\n  # Reading + Female\n  geom_density(data = subset(stu_SG_more, Gender==\"Female\"),\n               aes(y=..density..),\n               fill=\"#f27279\",\n               colour=\"#f27279\",\n               alpha=0.5)+\n    guides(fill = guide_legend(reverse = TRUE)) +\n    theme_minimal() +\n    theme(legend.position = \"bottom\",\n          plot.title = element_text(size = 12, face = \"bold\"),\n          plot.subtitle = element_text(size = rel(0.8)),\n          plot.caption = element_text(size = rel(0.8)),\n          axis.text.y = element_text(size = rel(0.9)),\n          axis.text.x = element_blank(),\n          axis.title.x = element_blank(),\n          plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n          ) +\n  scale_x_continuous(breaks = seq(150,950,100),\n                     labels = seq(150,950,100)) +\n  scale_y_continuous(breaks = -1:1,\n                     labels = abs(-1:1)) +\n    labs(x = \"\", y = NULL, title = \"Left-tailed distribution for both genders observed where\\nless time is spent on reading homework.\",\n         subtitle = \"Time spent on homework: {current_frame} minutes\",\n         fill = \"Gender\") +\n        coord_flip(clip=\"off\")+\n  annotate(\n    geom = \"text\", \n    x = 780, \n    y = -0.003,\n    label = \"Male\",\n    color = \"#4472af\")+\n      \n    annotate(\n    geom = \"text\", \n    x = 780, \n    y = 0.003,\n    label = \"Female\",\n    color = \"#e0218a\")\n\n\npyr_reading +\n  transition_manual(factor(Time_HW_Reading, c(\"&lt;31\", \"31-60\", \"61-120\", \"&gt;120\"))) +\n  ease_aes(\"linear\")\n\n\n\n\n\n\n\n\n\nShow the code\npyr_science &lt;- \n  ggplot(data = stu_SG_more,\n            aes(x = Avg_Sci, group=Time_HW_Science)) +\n  # Science + Male\n  geom_density(data = subset(stu_SG_more, Gender==\"Male\"),\n               aes(y=-..density..),\n               fill=\"#73b2c4\",\n               color=\"#73b2c4\",\n               alpha=0.5)+\n  # Science + Female\n  geom_density(data = subset(stu_SG_more, Gender==\"Female\"),\n               aes(y=..density..),\n               fill=\"#f27279\",\n               colour=\"#f27279\",\n               alpha=0.5)+\n    guides(fill = guide_legend(reverse = TRUE)) +\n    theme_minimal() +\n    theme(legend.position = \"bottom\",\n          plot.title = element_markdown(size = 12, face = \"bold\"),\n          plot.subtitle = element_text(size = rel(0.8)),\n          plot.caption = element_text(size = rel(0.8)),\n          axis.text.y = element_text(size = rel(0.9)),\n          axis.text.x = element_blank(),\n          axis.title.x = element_blank(),\n          plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n          ) +\n  scale_x_continuous(breaks = seq(150,950,100),\n                     labels = seq(150,950,100)) +\n  scale_y_continuous(breaks = -1:1,\n                     labels = abs(-1:1)) +\n    labs(x = \"\", y = NULL, title = \"Higher Science scores across all durations by &lt;span style='color: #73b2c4;'&gt;Males&lt;/span&gt;.\",\n         subtitle = \"Time spent on homework: {current_frame} minutes\",\n         fill = \"Gender\") +\n        coord_flip(clip=\"off\")+\n  annotate(\n    geom = \"text\", \n    x = 780, \n    y = -0.003,\n    label = \"Male\",\n    color = \"#4472af\")+\n      \n    annotate(\n    geom = \"text\", \n    x = 780, \n    y = 0.003,\n    label = \"Female\",\n    color = \"#e0218a\")\n\n\npyr_science +\n  transition_manual(factor(Time_HW_Science, c(\"&lt;31\", \"31-60\", \"61-120\", \"&gt;120\"))) +\n  ease_aes(\"linear\")\n\n\n\n\n\n\n\n\n\nInsights\n\nDensity ridges are utilized to compare gender differences in relation to the amount of time spent on homework for each subject. This method emphasizes the ‘peaks’ in the distribution, offering valuable insights into how the distribution’s shape and variation between male and female students change with differing homework durations.\nThe plot reveals distinct trends in math scores based on homework duration for both genders. For male students, there is an upward trend in the peak scores as time spent on math homework increases, but this trend shows a decline when exceeding 120 minutes. In contrast, female students’ median scores tend to plateau after 31-60 minutes of math homework. Overall, the data indicates that male students generally achieve higher math scores than their female counterparts, regardless of the amount of time invested in math homework.\nReading scores display similarity across various homework durations. Interestingly, at lower homework times, the distribution tends to skew left.\nIn science, higher scores are consistently observed for males, regardless of the time spent on science homework."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-scores-against-student-teacher-ratio-and-school-type",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-scores-against-student-teacher-ratio-and-school-type",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "6.3 Comparing scores against student-teacher ratio and school type",
    "text": "6.3 Comparing scores against student-teacher ratio and school type\nThe scatterplot with marginal density overlay facilitates the comparison of two numerical variables: subject scores and the log-transformed student-teacher ratio, across different school types (private-independent and public). The x-axis represents the math scores, and y-axis represents the log-transformed student-teacher ratio. Each point on the scatterplot represents a student response, with the colour coding distinguishing between private and public school students. Along the right side and top of the scatterplot, density plots represent the distributions of the student-teacher ratio and subject scores, respectively.\nThe plot’s design adjusts the transparency of the density plot and scatter points using alpha = 0.3 to allow for an unobstructed view of overlaps. This ensures a clear visualization of each group’s distribution while preserving the visibility of underlying patterns. Additionally, mean lines are included to benchmark the average values, aiding in the assessment of how individual data points relate to the overall group averages.\n\nMathReadingScience\n\n\n\n\nShow the code\nstu_SG_more &lt;- stu_SG_more %&gt;% \n  mutate(logstr = log(StuTeacher_ratio))\n\npmain &lt;- ggplot(stu_SG_more, \n                aes(x = Avg_Math, y = logstr, color = SchType)) +\n  geom_point(alpha=0.3) +\n  scale_color_manual(values = c(\"#7F948F\",\"#E1C8C4\"))+\ngeom_vline(aes(xintercept=mean_math),\n               color=\"#595DE5\", linewidth=0.8, linetype=\"dashed\") +\n  annotate(\n      \"text\", \n      x = 520, \n      y = 4.2,\n      label = paste(\"Mean Score =\\n\", mean_math),\n      color = \"#595DE5\",\n      size = 2.8\n    ) +\n  geom_hline(aes(yintercept=round(mean(stu_SG_more$logstr, na.rm=T),3)),\n               color=\"red\", linewidth=0.8, linetype=\"dashed\") +  \n  annotate(\n      \"text\", \n      x = 800, \n      y = 3.1,\n      label = paste(\"Mean Ratio =\\n\", round(mean(stu_SG_more$logstr, na.rm=T),3)),\n      color = \"red\",\n      size = 2.8\n    ) +\n      labs(x = \"Math\",\n       y = \"log(Student-\\nTeacher Ratio)\",\n       title = \"Math Scores and Student-Teacher Ratios by School Type\") +\n      theme(\n            axis.title.y = element_text(hjust=1, angle=0),\n            plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n  \n\n# Marginal densities along x axis\nxdens &lt;- axis_canvas(pmain, axis = \"x\") +\n  geom_density(data = stu_SG_more, aes(x = Avg_Math, fill = SchType),\n               alpha = 0.5, size = 0.2) +\n  scale_fill_manual(values = c(\"#7F948F\",\"#E1C8C4\"))\n\n# Marginal densities along y axis\nydens &lt;- axis_canvas(pmain, axis = \"y\", coord_flip = TRUE) +\n  geom_density(data = stu_SG_more, aes(x = logstr, fill = SchType),\n               alpha = 0.5, size = 0.2) +\n  coord_flip() +\n  scale_fill_manual(values = c(\"#7F948F\",\"#E1C8C4\"))\n\np1 &lt;- insert_xaxis_grob(pmain, xdens, grid::unit(.2, \"null\"), position = \"top\")\np2 &lt;- insert_yaxis_grob(p1, ydens, grid::unit(.2, \"null\"), position = \"right\")\nggdraw(p2)\n\n\n\n\n\n\n\n\n\nShow the code\npmainr &lt;- ggplot(stu_SG_more, \n                aes(x = Avg_Reading, y = logstr, color = SchType)) +\n  geom_point(alpha=0.3) +\n  scale_color_manual(values = c(\"#7F948F\",\"#E1C8C4\"))+\ngeom_vline(aes(xintercept=mean_reading),\n               color=\"#595DE5\", linewidth=0.8, linetype=\"dashed\") +\n  annotate(\n      \"text\", \n      x = mean_reading -80, \n      y = 4,\n      label = paste(\"Mean Score =\\n\", mean_reading),\n      color = \"#595DE5\",\n      size = 2.8\n    ) +\n  geom_hline(aes(yintercept=round(mean(stu_SG_more$logstr, na.rm=T),3)),\n               color=\"red\", linewidth=0.8, linetype=\"dashed\") +  \n  annotate(\n      \"text\", \n      x = 770, \n      y = 3,\n      label = paste(\"Mean Ratio =\\n\", round(mean(stu_SG_more$logstr, na.rm=T),3)),\n      color = \"red\",\n      size = 2.8\n    ) +\n      labs(x = \"Reading\",\n       y = \"log(Student-\\nTeacher Ratio)\",\n       title = \"Reading Scores and Student-Teacher Ratios by School Type\") +\n      theme(\n            axis.title.y = element_text(hjust=1, angle=0),\n            plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")) +\n    annotate(\n    geom = \"curve\", x = 690, y = 4, xend = 630, yend = 3.3, \n    curvature = .3, arrow = arrow(length = unit(2, \"mm\"))\n  ) +\n  annotate(geom = \"text\", x = 700, y = 4, label = \"higher concentration of\\nprivate school students\", hjust = \"left\", size= 2)  \n    \n  \n\n# Marginal densities along x axis\nxdensr &lt;- axis_canvas(pmain, axis = \"x\") +\n  geom_density(data = stu_SG_more, aes(x = Avg_Reading, fill = SchType),\n               alpha = 0.5, size = 0.2) +\n  scale_fill_manual(values = c(\"#7F948F\",\"#E1C8C4\"))\n\n# Marginal densities along y axis\n# Need to set coord_flip = TRUE, if you plan to use coord_flip()\nydensr &lt;- axis_canvas(pmain, axis = \"y\", coord_flip = TRUE) +\n  geom_density(data = stu_SG_more, aes(x = logstr, fill = SchType),\n               alpha = 0.5, size = 0.2) +\n  coord_flip() +\n  scale_fill_manual(values = c(\"#7F948F\",\"#E1C8C4\"))\n\np1r &lt;- insert_xaxis_grob(pmainr, xdensr, grid::unit(.2, \"null\"), position = \"top\")\np2r &lt;- insert_yaxis_grob(p1r, ydensr, grid::unit(.2, \"null\"), position = \"right\")\nggdraw(p2r)\n\n\n\n\n\n\n\n\n\nShow the code\npmains &lt;- ggplot(stu_SG_more, \n                aes(x = Avg_Sci, y = logstr, color = SchType)) +\n  geom_point(alpha=0.3) +\n  scale_color_manual(values = c(\"#7F948F\",\"#E1C8C4\"))+\ngeom_vline(aes(xintercept=mean_sci),\n               color=\"#595DE5\", linewidth=0.8, linetype=\"dashed\") +\n  annotate(\n      \"text\", \n      x = mean_sci -80, \n      y = 4,\n      label = paste(\"Mean Score =\\n\", mean_sci),\n      color = \"#595DE5\",\n      size = 2.8\n    ) +\n  geom_hline(aes(yintercept=round(mean(stu_SG_more$logstr, na.rm=T),3)),\n               color=\"red\", linewidth=0.8, linetype=\"dashed\") +  \n  annotate(\n      \"text\", \n      x = 770, \n      y = 3,\n      label = paste(\"Mean Ratio =\\n\", round(mean(stu_SG_more$logstr, na.rm=T),3)),\n      color = \"red\",\n      size = 2.8\n    ) +\n      labs(x = \"Science\",\n       y = \"log(Student-\\nTeacher Ratio)\",\n       title = \"Science Scores and Student-Teacher Ratios by School Type\") +\n      theme(\n            axis.title.y = element_text(hjust=1, angle=0),\n            plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")) +\n    annotate(\n    geom = \"curve\", x = 690, y = 4, xend = 630, yend = 3.3, \n    curvature = .3, arrow = arrow(length = unit(2, \"mm\"))\n  ) +\n  annotate(geom = \"text\", x = 700, y = 4, label = \"higher concentration of\\nprivate school students\", hjust = \"left\", size= 2)  \n  \n  \n\n# Marginal densities along x axis\nxdenss &lt;- axis_canvas(pmain, axis = \"x\") +\n  geom_density(data = stu_SG_more, aes(x = Avg_Sci, fill = SchType),\n               alpha = 0.5, size = 0.2) +\n  scale_fill_manual(values = c(\"#7F948F\",\"#E1C8C4\"))\n\n# Marginal densities along y axis\n# Need to set coord_flip = TRUE, if you plan to use coord_flip()\nydenss &lt;- axis_canvas(pmain, axis = \"y\", coord_flip = TRUE) +\n  geom_density(data = stu_SG_more, aes(x = logstr, fill = SchType),\n               alpha = 0.5, size = 0.2) +\n  coord_flip() +\n  scale_fill_manual(values = c(\"#7F948F\",\"#E1C8C4\"))\n\np1s &lt;- insert_xaxis_grob(pmains, xdenss, grid::unit(.2, \"null\"), position = \"top\")\np2s &lt;- insert_yaxis_grob(p1s, ydenss, grid::unit(.2, \"null\"), position = \"right\")\nggdraw(p2s)\n\n\n\n\n\n\n\n\n\nInsights\n\nThe unimodal distribution indicated by a single peak in the public schools’ student-teacher ratio suggests a uniformity within this group. In contrast, the multimodal density for private schools suggests the presence of distinct groups with different student-teacher ratios.\nScore distributions across the three subjects are broader among public school students, indicating greater variability in their scores.\nPrivate-Independent school students tend to have higher median Reading scores compared to public school students, while public school students seem to perform better in Math and Science.\nFor Reading and Science, a noticeable cluster of private school students (depicted in green) is present in the top rightmost quadrant. These students scored above the mean for these subjects and are associated with a higher student-teacher ratio.\nThere is no clear upward or downward trend visible in the scatterplot, suggesting that there may not be a strong correlation between the student-teacher ratio and math scores. However, a statistical analysis would be necessary to determine the existence and strength of any correlation."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-scores-with-socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-scores-with-socioeconomic-status",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "6.4 Comparing scores with socioeconomic status",
    "text": "6.4 Comparing scores with socioeconomic status\nThe next two visualizations utilize stacked density plots (again!) to explore and compare the influence of each parent’s education level and occupational status. Beneath each density plot, a geom_point layer is added, which provides a clear indication of the disparity between the two groups’ mean scores. This point representation serves as a precise reference for comparing the central tendencies of the distributions, highlighting whether one parent’s educational or occupational background tends to be associated with higher or lower mean scores.\n\n6.4.1 Education Levels\n\n\nShow the code\n# Pivot parents education data longer\nparentsedu_long &lt;- \n  stu_SG_more %&gt;% \n  pivot_longer(cols = starts_with(\"Edu_\"),\n               names_to = \"parentsedu\",\n               names_prefix=\"Edu_\",\n               values_to=\"level\") \n\n# Calculate Mean score by parent and educational level and save in new dataframe\nmeans_parentsedu &lt;- \n  parentsedu_long %&gt;% \n  select(parentsedu, level, Avg_Math, Avg_Reading, Avg_Sci) %&gt;% \n  group_by(parentsedu, level) %&gt;% \n  summarise(mean_math = mean(Avg_Math),\n            mean_reading = mean(Avg_Reading),\n            mean_sci = mean(Avg_Sci),\n            .groups = 'drop')\n\n\np_parentsedu_m &lt;-\nggplot(parentsedu_long, \n       aes(x = Avg_Math, y = level,\n           fill = parentsedu,\n           color=parentsedu)) +\n  geom_density_ridges(\n    calc_ecdf = TRUE, \n    scale = 0.8,\n    alpha= 0.3,\n  rel_min_height = 0.01,\n  position = position_nudge(y=0.11)\n  ) +\n  # point for father's mean\n  geom_point(data = subset(means_parentsedu, parentsedu==\"Father\"),\n             aes(x = mean_math, \n                 y = level),\n             alpha=0.4,\n             shape = 21, size = 3, colour = \"#73b2c4\", fill = \"#73b2c4\") +\n  # point for mother's \n  geom_point(data = subset(means_parentsedu, parentsedu==\"Mother\"),\n             aes(x = mean_math, \n                 y = level), \n             alpha=0.4, \n             shape = 23, size = 3, colour = \"#f27279\", fill = \"#f27279\", stroke = .5) +\n  scale_color_manual(name=\"Parent\",\n                        values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  labs(\n    x = \"Math\", \n  ) +\n  scale_y_discrete(expand = c(0, 0.1))+\n  guides(color=\"none\") +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.y = element_text(size = rel(0.9)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )  \n\np_parentsedu_r &lt;-\nggplot(parentsedu_long, \n       aes(x = Avg_Reading, y = level,\n           fill = parentsedu,\n           color=parentsedu)) +\n  geom_density_ridges(\n    calc_ecdf = TRUE, \n    scale = 0.8,\n    alpha= 0.3,\n  rel_min_height = 0.01,\n  position = position_nudge(y=0.11)\n  ) +\n  # point for father's mean\n  geom_point(data = subset(means_parentsedu, parentsedu==\"Father\"),\n             aes(x = mean_reading, \n                 y = level), \n             alpha=0.4,\n             shape = 21, size = 3, colour = \"#73b2c4\", fill = \"#73b2c4\") +\n  # point for mother's \n  geom_point(data = subset(means_parentsedu, parentsedu==\"Mother\"),\n             aes(x = mean_reading, \n                 y = level), \n             alpha=0.4,\n             shape = 23, size = 3, colour = \"#f27279\", fill = \"#f27279\", stroke = .5) +\n  scale_color_manual(name=\"Parent\",\n                        values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  labs(\n    x = \"Reading\", \n  ) +\n  guides(color=\"none\") +\n  scale_y_discrete(expand = c(0, 0.1))+\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ) +\n  annotate(\n    geom = \"curve\", x = 80, y = 2.0, xend = 280, yend = 2.35, \n    curvature = -.3, arrow = arrow(length = unit(2, \"mm\"))\n  ) +\n  annotate(geom = \"text\", x = 0.1, y = 1.6, label = \"Lower Reading scores\\nwhere their fathers'\\neducation level is\\nlow.\", hjust = \"left\", size= 2)  \n  \np_parentsedu_s &lt;-\nggplot(parentsedu_long, \n       aes(x = Avg_Sci, y = level,\n           fill = parentsedu,\n           color=parentsedu)) +\n  geom_density_ridges(\n    calc_ecdf = TRUE, \n    scale = 0.8,\n    alpha= 0.3,\n  rel_min_height = 0.01,\n  position = position_nudge(y=0.11)\n  ) +\n  # point for father's mean\n  geom_point(data = subset(means_parentsedu, parentsedu==\"Father\"),\n             aes(x = mean_sci, \n                 y = level), \n             alpha=0.4,\n             shape = 21, size = 3, colour = \"#73b2c4\", fill = \"#73b2c4\") +\n  # point for mother's \n  geom_point(data = subset(means_parentsedu, parentsedu==\"Mother\"),\n             aes(x = mean_sci, \n                 y = level), \n             alpha=0.4,\n             shape = 23, size = 3, colour = \"#f27279\", fill = \"#f27279\", stroke = .5) +\n  scale_color_manual(name=\"Parent\",\n                        values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  labs(\n    x = \"Science\", \n  ) +\n  guides(color=\"none\") +\n  scale_y_discrete(expand = c(0, 0.1))+\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )   +\n  annotate(\n    geom = \"curve\", x = 100, y = 5.6\n    , xend = 440, yend = 5.65, \n    curvature = -.3, arrow = arrow(length = unit(2, \"mm\"))\n  ) +\n  annotate(geom = \"text\", x = 0.08, y = 5.4, label = \"Density plots almost\\noverlap completely.\", hjust = \"left\", size= 2)  \n\n(p_parentsedu_m + p_parentsedu_r + p_parentsedu_s) +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"Higher scores scores with higher parental education levels, similar distributions&lt;br&gt;across &lt;span style='color: #73b2c4;'&gt;fathers'&lt;/span&gt; and &lt;span style='color: #f27279;'&gt;mothers&lt;/span&gt; education.\",\n                  theme=theme(plot.title = element_markdown(hjust = 0),\n                              plot.subtitle = element_markdown(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))+\n  plot_layout(widths=c(1,1,1))\n\n\n\n\n\n\nInsights\n\nGenerally, subject scores improve with increased parental educational attainment. When parents reach higher education levels, the score distributions converge, as evidenced by the nearly overlapping density plots for either parent’s educational achievement.\nHowever, at lower levels of parental education, disparities become more evident. The density plot associated with the father’s education level (indicated in blue) skews to the right, distinctively peering through the overlay. This is corroborated by the leftward shift of the blue points below the curve, signifying that the average scores are lower than those corresponding to the same educational level of the mother. This pattern suggests that a father’s lower educational attainment might have a more pronounced inverse impact on student outcomes.\n\n\n\n\n6.4.2 Occupational Status\n\n\nShow the code\n# Pivot parents occupational status data longer\njobstatus_long &lt;- \n  stu_SG_more %&gt;% \n  pivot_longer(cols = starts_with(\"Occupation_Status_\"),\n               names_to = \"parent\",\n               names_prefix=\"Occupation_Status_\",\n               values_to=\"jobstatus\") \n\n# Calculate Mean score by parent and job status and save in new dataframe\nmeans_parentsjobstat &lt;- \n  jobstatus_long %&gt;% \n  select(parent, jobstatus, Avg_Math, Avg_Reading, Avg_Sci) %&gt;% \n  group_by(parent, jobstatus) %&gt;% \n  summarise(mean_math = mean(Avg_Math),\n            mean_reading = mean(Avg_Reading),\n            mean_sci = mean(Avg_Sci),\n            .groups = 'drop')\n\np_parentsjs_m &lt;-\nggplot(jobstatus_long, \n       aes(x = Avg_Math, y = jobstatus,\n           fill = parent,\n           color=parent)) +\n  geom_density_ridges(\n    calc_ecdf = TRUE, \n  # Reduce space between between education levels \n    scale = 0.8,\n    alpha= 0.3,\n  rel_min_height = 0.01,\n  position = position_nudge(y=0.11)\n  ) +\n  # point for father's mean\n  geom_point(data = subset(means_parentsjobstat, parent==\"Father\"),\n             aes(x = mean_math, \n                 y = jobstatus), \n              alpha=0.4,\n             shape = 21, size = 3, colour = \"#73b2c4\", fill = \"#73b2c4\") +\n  # point for mother's \n  geom_point(data = subset(means_parentsjobstat, parent==\"Mother\"),\n             aes(x = mean_math, \n                 y = jobstatus), \n              alpha=0.4, \n             shape = 23, size = 3, colour = \"#f27279\", fill = \"#f27279\", stroke = .5) +\n  scale_color_manual(name=\"Parent\",\n                        values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  labs(\n    x = \"Math\", \n  ) +\n  scale_y_discrete(expand = c(0, 0.1))+\n  guides(color=\"none\") +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.y = element_text(size = rel(0.9)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ) \n    \n\np_parentsjs_r &lt;-\nggplot(jobstatus_long, \n       aes(x = Avg_Reading, y = jobstatus,\n           fill = parent,\n           color=parent)) +\n  geom_density_ridges(\n    calc_ecdf = TRUE, \n  # Reduce space between between education levels \n    scale = 0.8,\n    alpha= 0.3,\n  rel_min_height = 0.01,\n  position = position_nudge(y=0.11)\n  ) +\n  # point for father's mean\n  geom_point(data = subset(means_parentsjobstat, parent==\"Father\"),\n             aes(x = mean_reading, \n                 y = jobstatus), \n              alpha=0.4,\n             shape = 21, size = 3, colour = \"#73b2c4\", fill = \"#73b2c4\") +\n  # point for mother's \n  geom_point(data = subset(means_parentsjobstat, parent==\"Mother\"),\n             aes(x = mean_reading, \n                 y = jobstatus), \n              alpha=0.4, \n             shape = 23, size = 3, colour = \"#f27279\", fill = \"#f27279\", stroke = .5) +\n  scale_color_manual(name=\"Parent\",\n                        values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  labs(\n    x = \"Reading\", \n  ) +\n  scale_y_discrete(expand = c(0, 0.1))+\n  guides(color=\"none\") +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ) +\n  annotate(geom = \"text\", x = 0.08, y = 1.4, label = \"Density plots almost\\noverlap completely.\", hjust = \"left\", size= 2)  \n  \np_parentsjs_s &lt;-\nggplot(jobstatus_long, \n       aes(x = Avg_Sci, y = jobstatus,\n           fill = parent,\n           color=parent)) +\n  geom_density_ridges(\n    calc_ecdf = TRUE, \n  # Reduce space between between education levels \n    scale = 0.8,\n    alpha= 0.3,\n  rel_min_height = 0.01,\n  position = position_nudge(y=0.11)\n  ) +\n  # point for father's mean\n  geom_point(data = subset(means_parentsjobstat, parent==\"Father\"),\n             aes(x = mean_sci, \n                 y = jobstatus), \n              alpha=0.4,\n             shape = 21, size = 3, colour = \"#73b2c4\", fill = \"#73b2c4\") +\n  # point for mother's \n  geom_point(data = subset(means_parentsjobstat, parent==\"Mother\"),\n             aes(x = mean_sci, \n                 y = jobstatus), \n              alpha=0.4,\n             shape = 23, size = 3, colour = \"#f27279\", fill = \"#f27279\", stroke = .5) +\n  scale_color_manual(name=\"Parent\",\n                        values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"Father\" = \"#73b2c4\", \n                               \"Mother\" = \"#f27279\")) +\n  labs(\n    x = \"Science\", \n  ) +\n  scale_y_discrete(expand = c(0, 0.1))+\n  guides(color=\"none\") +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ) +\n  annotate(\n    geom = \"curve\", x = 280, y = 2.75\n    , xend = 470, yend = 2.80, \n    curvature = -.3, arrow = arrow(length = unit(2, \"mm\"))\n  ) +\n  annotate(geom = \"text\", x = 0.08, y = 2.6, label = \"Scores more\\nleft-skewed for\\nstudents with\\nunemployed\\nfathers.\", hjust = \"left\", size= 2)  \n  \n\n(p_parentsjs_m + p_parentsjs_r + p_parentsjs_s) +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"Higher scores with employed parents.\",\n  subtitle=\"Students with unemployed &lt;span style='color: #73b2c4;'&gt;fathers&lt;/span&gt; had better scores than those with unemployed &lt;span style='color: #f27279;'&gt;mothers&lt;/span&gt;.\",\n                  theme=theme(plot.title = element_markdown(hjust = 0),\n                              plot.subtitle = element_markdown(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))+\n  plot_layout(widths=c(1,1,1))\n\n\n\n\n\n\nInsights\n\nMean scores are observed to be higher for students whose parents are employed as opposed to those with unemployed parents. In instances where both parents are employed, the corresponding density plots converge almost completely, suggesting that the employment status of either parent has a minimal effect on subject scores. This indicates a potentially equivalent influence of each parent’s employment on academic outcomes.\nWhen focusing on the impact of unemployment, we notice a marked difference, especially in the case of the father’s unemployment. The density plots tend to shift towards the right, implying an improvement in scores. This skew is further substantiated by the position of the blue geom points, which represent the average scores associated with father’s unemployment. These points are now situated to the right of the pink points, which indicate the average scores when mothers are unemployed. This pattern might suggest that a father’s unemployment could have a more significant positive correlation with student scores compared to a mother’s unemployment.\n\n\n\n\n6.4.3 Nativity / Immigration Status\nJittered strip chart, using geom_jitter, is used in the visualisation of individual data points, allowing for a clearer observation of the variation and range differences between groups. The geom_jitter function adds a small amount of random variation to the position of each point, which helps to prevent overplotting where points would otherwise overlap completely.\nIn the accompanying code, the parameter alpha = 0.2 is adjusted to control the transparency of the dots. An alpha value closer to 0 increases the transparency of the dots, making them more see-through, while a value closer to 1 would render them fully opaque. By setting the alpha to a lower value, we can clearly see the areas with a higher concentration of overlapping dots, which will naturally appear darker.\nFurthermore, stat_summary() is used to aggregate and display the median value for each group within the data. By specifying a contrasting color for these summary points, they are made to stand out against the jittered points, ensuring that these key statistical indicators draw immediate attention. This can be compared against the plotted mean line which shows the average score of each subject.\n\n\nShow the code\nimmig_m &lt;-\nggplot(stu_SG_more, aes(x = Immigration_Status, \n                        y = Avg_Math, \n                        color = Immigration_Status)) +\n    coord_flip() +\n  geom_jitter(size = 2, \n              alpha = 0.2, \n              width = 0.2) +\n  stat_summary(color=\"#595DE5\",\n               fun = \"median\", \n               geom = \"point\", \n               size = 3, \n               alpha = 0.8)  +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(n = 5)\n  ) +  \n  geom_hline(aes(yintercept = mean_math), \n             linewidth=0.6,\n             linetype=\"dashed\",\n             color = \"red\")+\n  annotate(\n      \"text\", \n      x = 3.5, \n      y = 690,\n      label = paste(\"Mean =\\n\", round(mean_math, 3)),\n      color = \"red\",\n      size = 3\n    ) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n          plot.title = element_markdown(size = 12, face = \"bold\"),\n          plot.subtitle = element_text(size = rel(0.8)),\n          plot.caption = element_text(size = rel(0.8)),\n          axis.text.y = element_text(size = rel(0.9)),\n          axis.text.x = element_text(size = rel(0.9)),\n          axis.title.x = element_text(size = rel(0.8)),\n          axis.title.y = element_text(size = rel(0.8)),\n          axis.ticks.y = element_blank(),\n          panel.grid = element_blank(),\n          axis.line.x=element_line(),\n          plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n          ) +\n  guides(color = \"none\", fill = \"none\") + \n  scale_color_manual(values=c(\"#f27279\", \"#f7af7a\", \"#73b2c4\")) +\n  labs(x = NULL , y = \"Math\", title = \"\")\n\nimmig_r &lt;-\nggplot(stu_SG_more, aes(x = Immigration_Status, \n                        y = Avg_Reading, \n                        color = Immigration_Status)) +\n    coord_flip() +\n  geom_jitter(size = 2, \n              alpha = 0.2, \n              width = 0.2) +\n  stat_summary(color=\"#595DE5\",\n               fun = \"median\", \n               geom = \"point\", \n               size = 3, \n               alpha = 0.8)  +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(n = 5)\n  ) +  \n  geom_hline(aes(yintercept = mean_reading), \n             linewidth=0.6,\n             linetype=\"dashed\",\n             color = \"red\")+\n  annotate(\n      \"text\", \n      x = 3.5, \n      y = 690,\n      label = paste(\"Mean =\\n\", round(mean_reading, 3)),\n      color = \"red\",\n      size = 3\n    ) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n          plot.title = element_markdown(size = 12, face = \"bold\"),\n          plot.subtitle = element_text(size = rel(0.8)),\n          plot.caption = element_text(size = rel(0.8)),\n          axis.text.y = element_blank(),\n          axis.text.x = element_text(size = rel(0.9)),\n          axis.title.x = element_text(size = rel(0.8)),\n          axis.title.y = element_text(size = rel(0.8)),\n          axis.ticks.y = element_blank(),\n          panel.grid = element_blank(),\n          axis.line.x=element_line(),\n          plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n          ) +\n  guides(color = \"none\", fill = \"none\") + \n  scale_color_manual(values=c(\"#f27279\", \"#f7af7a\", \"#73b2c4\")) +\n  labs(x = NULL , y = \"Reading\", title = \"\")\n\nimmig_s &lt;-\nggplot(stu_SG_more, aes(x = Immigration_Status, \n                        y = Avg_Sci, \n                        color = Immigration_Status)) +\n    coord_flip() +\n  geom_jitter(size = 2, \n              alpha = 0.2, \n              width = 0.2) +\n  stat_summary(color=\"#595DE5\",\n               fun = \"median\", \n               geom = \"point\", \n               size = 3, \n               alpha = 0.8)  +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(n = 5)\n  ) +  \n  geom_hline(aes(yintercept = mean_sci), \n             linewidth=0.6,\n             linetype=\"dashed\",\n             color = \"red\")+\n  annotate(\n      \"text\", \n      x = 3.5, \n      y = 690,\n      label = paste(\"Mean =\\n\", round(mean_sci, 3)),\n      color = \"red\",\n      size = 3\n    ) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n          plot.title = element_markdown(size = 12, face = \"bold\"),\n          plot.subtitle = element_text(size = rel(0.8)),\n          plot.caption = element_text(size = rel(0.8)),\n          axis.text.y = element_blank(),\n          axis.text.x = element_text(size = rel(0.9)),\n          axis.title.x = element_text(size = rel(0.8)),\n          axis.title.y = element_text(size = rel(0.8)),\n          axis.ticks.y = element_blank(),\n          panel.grid = element_blank(),\n          axis.line.x=element_line(),\n          plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n          ) +\n  guides(color = \"none\", fill = \"none\") + \n  scale_color_manual(values=c(\"#f27279\", \"#f7af7a\", \"#73b2c4\")) +\n  labs(x = NULL , y = \"Science\", title = \"\")\n\n(immig_m | immig_r | immig_s) +\n    plot_annotation(title=\"Higher scores from &lt;span style='color: #f7af7a;'&gt;Second-gen immigrants&lt;/span&gt; across all subjects.\", \n                  theme=theme(plot.title = element_markdown(hjust = 0),\n                              plot.subtitle = element_markdown(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\n\n\n\n\n\nInsights\n\nPlots of raw data helps with “sanity checking” and identify things like missing data or outliers, while plots of summary statistics helps visual estimation against other groups. This dual approach ensures a comprehensive understanding of the data set, allowing for both detailed individual data point analysis and aggregate group comparisons.\nThe results derived from the jittered plots indicate that second-generation immigrants generally outperform their peers in all subjects. This observation suggests that there might be underlying factors or conditions conducive to the academic success of this demographic group.\nThe natives exhibit the widest range of scores, contributing to a lower median. This wider spread signifies greater variability in performance among native students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-home-access-to-educational-resources",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-home-access-to-educational-resources",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "6.5 Comparing home access to educational resources",
    "text": "6.5 Comparing home access to educational resources\nThe raincloud plot combines an illustration of data distribution (the ‘cloud’), with jittered raw data (the ‘rain’). This can be further supplemented by adding boxplots or other standard measures of central tendency and error. Thus, raincloud plots offer the reader maximum utility and flexibility, ensuring that nothing is ‘hidden away’ and that the reader has all informaiton needed to assess the data, its distribution, and the appropriateness of any statistical tests in a visually appealing format.\nIn the code chunk below, we use stat_halfeye to create a halved distribution, geom_boxplot for the boxplot, and geom_point for the jitters. An ifelse() condition is added to the stat_halfeye aesthetic to flip the density plot horizontally when the result is ‘No’. This allows closer side-by-side comparison of the boxplots for each pair of answer to the survey question.\n\n\nShow the code\n# Math\nrcp_com_m &lt;- \n  ggplot(stu_SG_more, aes(x = Have_Comp, \n                          y = Avg_Math, \n                          fill = Have_Comp)) +\n  \n  stat_halfeye(aes(fill = Have_Comp,\n                         justification = ifelse(Have_Comp == \"No\", 1.2, 0),\n                          side = ifelse(Have_Comp == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_Comp, \n                 y = Avg_Math, \n                 colour = Have_Comp),\n             position = position_jitter(width = .05), \n             size = .25, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_Comp, \n                   y = Avg_Math, \n                   fill = Have_Comp),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Computer\", \n  ) +\n  theme_minimal() +  \n  ylim(100, 920)+\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(size = rel(0.8)),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )   +\n  geom_hline(aes(yintercept=mean_math),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\") +\n  annotate(\n      \"text\", \n      x = 1.5, \n      y = mean_math +80,\n      label = paste(\"Mean\\nScore =\\n\", mean_math),\n      color = \"#595DE5\",\n      size = 2.5\n    )\n\n\nrcp_sw_m &lt;- \n  ggplot(stu_SG_more, aes(x = Have_EduSW, \n                          y = Avg_Math, \n                          fill = Have_EduSW)) +\n  \n  stat_halfeye(aes(fill = Have_EduSW,\n                         justification = ifelse(Have_EduSW == \"No\", 1.2, 0),\n                          side = ifelse(Have_EduSW == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_EduSW, \n                 y = Avg_Math, \n                 colour = Have_EduSW),\n             position = position_jitter(width = .05), \n             size = .25, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_EduSW, \n                   y = Avg_Math, \n                   fill = Have_EduSW),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Educational Software\", \n  ) +\n  ylim(100, 920)+\n    theme_minimal() +  \n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )   +\n  geom_hline(aes(yintercept=mean_math),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\")\n\nrcp_int_m &lt;- \n  ggplot(stu_SG_more, aes(x = Have_Internet, \n                          y = Avg_Math, \n                          fill = Have_Internet)) +\n  \n  stat_halfeye(aes(fill = Have_Internet,\n                         justification = ifelse(Have_Internet == \"No\", 1.2, 0),\n                          side = ifelse(Have_Internet == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_Internet, \n                 y = Avg_Math, \n                 colour = Have_Internet),\n             position = position_jitter(width = .05), \n             size = .25, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_Internet, \n                   y = Avg_Math, \n                   fill = Have_Internet),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Internet\", \n  ) +\n  ylim(100, 920)+\n    theme_minimal() +  \n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )  +\n  geom_hline(aes(yintercept=mean_math),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\")  \n\nrcp_m &lt;-\nrcp_com_m + rcp_sw_m + rcp_int_m +\n  plot_layout(widths=c(1,1,1)) +\n  plot_annotation(title=\"Math\", \n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\nrcp_m\n\n\n\n\n\n\n\nShow the code\n# Reading\nrcp_com_r &lt;- \n  ggplot(stu_SG_more, aes(x = Have_Comp, \n                          y = Avg_Reading, \n                          fill = Have_Comp)) +\n  \n  stat_halfeye(aes(fill = Have_Comp,\n                         justification = ifelse(Have_Comp == \"No\", 1.2, 0),\n                          side = ifelse(Have_Comp == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_Comp, \n                 y = Avg_Reading, \n                 colour = Have_Comp),\n             position = position_jitter(width = .05), \n             size = .25, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_Comp, \n                   y = Avg_Reading, \n                   fill = Have_Comp),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Computer\", \n  ) +\n  ylim(100, 920)+\n    theme_minimal() +  \n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(size = rel(0.8)),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )   +\n  geom_hline(aes(yintercept=mean_reading),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\") +\n  annotate(\n      \"text\", \n      x = 1.5, \n      y = mean_math +80,\n      label = paste(\"Mean\\nScore =\\n\", mean_reading),\n      color = \"#595DE5\",\n      size = 2.5\n    )  \n  \n\nrcp_sw_r &lt;- \n  ggplot(stu_SG_more, aes(x = Have_EduSW, \n                          y = Avg_Reading, \n                          fill = Have_EduSW)) +\n  \n  stat_halfeye(aes(fill = Have_EduSW,\n                         justification = ifelse(Have_EduSW == \"No\", 1.2, 0),\n                          side = ifelse(Have_EduSW == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_EduSW, \n                 y = Avg_Reading, \n                 colour = Have_EduSW),\n             position = position_jitter(width = .05), \n             size = .25, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_EduSW, \n                   y = Avg_Reading, \n                   fill = Have_EduSW),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Educational Software\", \n  ) +\n  ylim(100, 920)+\n    theme_minimal() +  \n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )  +\n  geom_hline(aes(yintercept=mean_reading),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\")  \n  \n\nrcp_int_r &lt;- \n  ggplot(stu_SG_more, aes(x = Have_Internet, \n                          y = Avg_Reading, \n                          fill = Have_Internet)) +\n  \n  stat_halfeye(aes(fill = Have_Internet,\n                         justification = ifelse(Have_Internet == \"No\", 1.2, 0),\n                          side = ifelse(Have_Internet == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_Internet, \n                 y = Avg_Reading, \n                 colour = Have_Internet),\n             position = position_jitter(width = .05), \n             size = .25, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_Internet, \n                   y = Avg_Reading, \n                   fill = Have_Internet),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Internet\", \n  ) +\n  ylim(100, 920)+\n    theme_minimal() +  \n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )   +\n  annotate(\n    geom = \"curve\", x = 0.3, y = 230, xend = 0.7, yend = 300, \n    curvature = -.3, arrow = arrow(length = unit(2, \"mm\"))\n  ) +\n  annotate(geom = \"text\", x =0.02, y = 185, label = \"Highly\\nleft-skewed\", hjust = \"left\", size= 3)  +\n  geom_hline(aes(yintercept=mean_reading),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\")  \n    \n\n\nrcp_r &lt;-\nrcp_com_r + rcp_sw_r + rcp_int_r +\n  plot_layout(widths=c(1,1,1)) +\n  plot_annotation(title=\"Reading\", \n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\nrcp_r\n\n\n\n\n\n\n\nShow the code\n# Reading\nrcp_com_s &lt;- \n  ggplot(stu_SG_more, aes(x = Have_Comp, \n                          y = Avg_Sci, \n                          fill = Have_Comp)) +\n  \n  stat_halfeye(aes(fill = Have_Comp,\n                         justification = ifelse(Have_Comp == \"No\", 1.2, 0),\n                          side = ifelse(Have_Comp == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_Comp, \n                 y = Avg_Sci, \n                 colour = Have_Comp),\n             position = position_jitter(width = .05), \n             size = .28, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_Comp, \n                   y = Avg_Sci, \n                   fill = Have_Comp),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Computer\", \n  ) +\n  ylim(100, 920)+\n    theme_minimal() +  \n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(size = rel(0.8)),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ) +\n  geom_hline(aes(yintercept=mean_sci),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\") +\n  annotate(\n      \"text\", \n      x = 1.5, \n      y = mean_math +80,\n      label = paste(\"Mean\\nScore =\\n\", mean_sci),\n      color = \"#595DE5\",\n      size = 2.5\n    )  \n  \n\nrcp_sw_s &lt;- \n  ggplot(stu_SG_more, aes(x = Have_EduSW, \n                          y = Avg_Sci, \n                          fill = Have_EduSW)) +\n  \n  stat_halfeye(aes(fill = Have_EduSW,\n                         justification = ifelse(Have_EduSW == \"No\", 1.2, 0),\n                          side = ifelse(Have_EduSW == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_EduSW, \n                 y = Avg_Sci, \n                 colour = Have_EduSW),\n             position = position_jitter(width = .05), \n             size = .28, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_EduSW, \n                   y = Avg_Sci, \n                   fill = Have_EduSW),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Educational Software\", \n  ) +\n  ylim(100, 920)+\n    theme_minimal() +  \n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") )  + \n  geom_hline(aes(yintercept=mean_sci),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\")   \n\nrcp_int_s &lt;- \n  ggplot(stu_SG_more, aes(x = Have_Internet, \n                          y = Avg_Sci, \n                          fill = Have_Internet)) +\n  \n  stat_halfeye(aes(fill = Have_Internet,\n                         justification = ifelse(Have_Internet == \"No\", 1.2, 0),\n                          side = ifelse(Have_Internet == \"No\", \"left\", \"right\")),\n                   position = position_nudge(x = .1, y = 0), \n                   adjust = 1.2, \n                   .width=0,\n                   trim = FALSE, \n                   alpha = .5, \n                   point_colour = NA,\n                   orientation = )+\n  \n  geom_point(aes(x = Have_Internet, \n                 y = Avg_Sci, \n                 colour = Have_Internet),\n             position = position_jitter(width = .05), \n             size = .28, \n             shape = 20)+\n  \n  geom_boxplot(aes(x = Have_Internet, \n                   y = Avg_Sci, \n                   fill = Have_Internet),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .1, \n               colour = \"black\")+\n  scale_color_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  scale_fill_manual(values = c(\"No\" = \"#73b2c4\", \n                               \"Yes\" = \"#f27279\")) +\n  labs(\n    x = \"Internet\", \n  ) +\n  ylim(100, 920)+\n    theme_minimal() +  \n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\") ) +  \n  geom_hline(aes(yintercept=mean_sci),\n               color=\"#595DE5\", linewidth=0.7, linetype=\"dashed\") \n\nrcp_s &lt;-\nrcp_com_s + rcp_sw_s + rcp_int_s +\n  plot_layout(widths=c(1,1,1)) +\n  plot_annotation(title=\"Science\", \n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\nrcp_s\n\n\n\n\n\n\nInsights\n\nAcross all 3 subjects, students with limited home access to key study resources, such as computers, educational software, and internet, tend to have lower scores. This pattern is particularly pronounced in cases of internet inaccessibility, leading to noticeably left-skewed score distributions, especially in Reading. The lack of internet access appears to significantly hinder students’ ability to access information and educational materials, which is reflected in their academic performance.\nInterestingly, access to educational software seems to have a relatively minor impact on overall scores compared to other resources. This observation suggests that while educational software can be a useful tool, its absence does not disadvantage students as severely as the lack of more fundamental resources like internet access. This insight could guide educational policies and resource allocation, emphasizing the critical importance of internet access for student learning and achievement.\nThese observations highlight the crucial role of basic educational resources in student performance and the varying degrees of impact different resources can have. This understanding is vital for developing targeted strategies to bridge educational gaps and enhance learning outcomes.\nHowever, recall our sample size for students without access to educational tools are low (see Section 5.3), which might reduce the accuracy of our finding."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-packages",
    "title": "Take-home Exercise 2: DataVis Makeover For Take-home Exercise 1",
    "section": "2.1 Loading Packages",
    "text": "2.1 Loading Packages\n\n\n\n\n\n\n\nLibrary\nDescription\n\n\n\n\ntidyverse\nA collection of core packages designed for data science, used extensively for data preparation and wrangling.\n\n\nhaven\nTo enable R to read and write various data formats such as SAS and SPSS.\n\n\npatchwork\nFor preparing composite figure created using ggplot2.\n\n\nscales\nFor data labels and annotations for ggplot2\n\n\nggridges\nFor ridgeline plots that create the impression of a mountain range. They can be useful for visualising changes in distributions over time or space.\n\n\nggdist\nFor visualisations of distributions and uncertainty.\n\n\nggtext\nSupports improved text rendering for ggplot2.\n\n\nggpubr\nFor publication-ready plots.\n\n\nintsvy\nProvides analysis tools for international assessment data. OP used this package to derive means and probabilities of subject scores.\n\n\nwaffle and hrbrthemes\nFor plotting and tweaking waffle charts to communicate parts of a while for categorical attributes.\n\n\n\nThe following code chunk uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, the libraries will be called into R.\n\npacman::p_load(tidyverse, haven, patchwork, \n               scales, ggridges, ggdist, \n               ggtext, ggpubr, intsvy,\n               waffle, hrbrthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pisa-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pisa-data",
    "title": "Take-home Exercise 2: DataVis Makeover For Take-home Exercise 1",
    "section": "2.2 PISA Data",
    "text": "2.2 PISA Data\n\nImporting datasetData Wrangling\n\n\nFirst, the 2022 Student Questionnaire dataset is downloaded from OECD’s PISA 2022 Database and imported using the read_sas() function of the haven package.\n\nstu &lt;- read_sas(data_file = \"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe dataset is in a tibble dataframe, containing 613,744 observations (rows) across 1,279 variables (columns). Each observation corresponds to an entry from a student who participated in the 2022 PISA survey for students, and the variables correspond to information from students on various aspects of their home, family, and school background.\nNote that the first variable CNT refers to the country of response. This is used to filter for Singapore (where CNT = SGP) responses for our analysis. filter() of the dplyr package allows us to perform this extraction of participating country.\n\nstu_SG &lt;- stu %&gt;%\n  filter(CNT == \"SGP\")\n\nThe resulting data contains 6,606 rows/observations across 1,279 columns/variables.\nThe .rds file format is usually smaller than its SAS file counterpart and will therefore take up less storage space. The .rds file will also preserve data types and classes such as factors and dates eliminating the need to redefine data types after loading the file. For fast and space efficient data storage, files can be exported as RDS and re-imported into R using write_rds() and read_rds() respectively.\n\nwrite_rds(stu_SG, \"data/stu_SG.rds\")\n\n\nstu_SG &lt;- read_rds(\"data/stu_SG.rds\")\n\n\n\nGiven that the primary focus of this exercise is to provide feedback the visualisations rather than data pre-processing or the choice of variables, I will be following through the same steps taken by the OP to wrangle the data.\nThe author uses pisa.mean.pv() function of the instvy package to obtain the mean plausible values out of the 10 plausible values provided in the dataset.\n\nMath_mean_SG &lt;- pisa.mean.pv(pvlabel = paste0(\"PV\",1:10,\"MATH\"), by=\"CNT\", data=stu_SG)\n\nRead_mean_SG &lt;- pisa.mean.pv(pvlabel = paste0(\"PV\",1:10,\"READ\"), by=\"CNT\", data=stu_SG)\n\nSCIE_mean_SG &lt;- pisa.mean.pv(pvlabel = paste0(\"PV\",1:10,\"SCIE\"), by=\"CNT\", data=stu_SG)\n\n\nMath_mean_SG\n\n  CNT Freq   Mean s.e.    SD  s.e\n1 SGP 6606 574.66 1.23 102.8 0.91\n\nRead_mean_SG\n\n  CNT Freq   Mean s.e.     SD  s.e\n1 SGP 6606 542.55 1.87 105.89 1.15\n\nSCIE_mean_SG\n\n  CNT Freq   Mean s.e.    SD s.e\n1 SGP 6606 561.43 1.33 99.09 1.1\n\n\nThe function generates descriptive statistics for each subject, including the mean, frequency, standard error, and standard deviation.\nWith that, we can proceed to analyse some of the visualisations shared!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-subject-scores",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-subject-scores",
    "title": "Take-home Exercise 2: DataVis Makeover For Take-home Exercise 1",
    "section": "3.1 Distribution of Subject Scores",
    "text": "3.1 Distribution of Subject Scores\nThe histograms plotted aim to show the distribution of scores across the 3 subjects, and a overlapping density plot to compare distributions across subjects.\n\nOriginalAreas for Improvement\n\n\n\n\n\n\n\nThere are several thoughtful features about the original plot.\nClarity\n\nComposite plot: The composite plot offers a comprehensive view of the distributions of all the target variables simultaneously.\nVisualise distributions: Histogram is appropriate for showcasing distribution in data.\nAppropriate labels: The graph is generally clear, with labels on both axes accompanied by a graph title.\nMean line: The inclusion of mean line serves as a valuable point of comparison across all the 3 plots, aiding in the assessment of subject scores.\n\nAesthetics\n\nColour scheme: The consistent colour scheme for each subject throughout the post makes it easier to relate the colour to the subject from plot to plot.\n\n\n\n\n\n\n\n\nHowever, there is some room for improvement. Each point raised below corresponds to the annotated labels in the image above.\nClarity\n\nGraph title: A more concise and informative title that effectively conveys the plot’s key message would enhance clarity.\nx-axis tick marks and scale: Addressing the inconsistent x-axis ranges across the three histograms would enhance comparability. Currently, the tick marks on the x-axis are 250 units apart for the Reading and Science plots, while they are only 200 units apart for the Math plot. This discrepancy makes it challenging to accurately gauge differences. Adopting a consistent scale for the x-axis would facilitate a more precise and straightforward comparison.\nDensity plot: The overlapped density plots of all 3 subjects seem quite redundant, especially if the x-axis range can be fixed.\nMean line: The mean in the annotation is derived from the mean scores across Plausible Values 1 to 10, calculated using the pisa_mean_pv() function from the intsvy package. However, it’s important to note that the histogram is plotted using PV1 values, leading to potential misinterpretations and inaccuracies.\n\nAesthetic\n\nAnnotation placement: The annotation for the mean line covers parts of the histogram. Adjusting the position could improve overall aesthetics.\nOrientation of y-axis title: Rotating the y-axis title horizontally would improve reader-friendliness and visual appeal.\n\n\n\n\n\nRevamp\nThe code chunk below is first used to calculate the mean PV of each subject using PV1.\n\n# Calculate mean values for 3 subjects\nmean_m &lt;- round(mean(stu_SG$PV1MATH),0)\nmean_r &lt;- round(mean(stu_SG$PV1READ),0)\nmean_s &lt;- round(mean(stu_SG$PV1SCIE),0)\n\nThe remake features similar histograms with trio of colours to represent each of the subject.\n\nUsing element_markdown() of the ggtext package within theme() enables colour-coding of the graph title. This is used in conjunction with span style='color:' to specify the colour hexcode of choice.\nlimits() is explicitly declared inside scale_x_continuous() to ensure the range of x-axis used is consistent throughout.\n\n\n\nShow the code\n# Histogram for Math scores\nhist_m &lt;- \n  ggplot(\n    stu_SG, \n    aes(x = PV1MATH)\n  ) +\n  geom_histogram(\n    bins = 25,\n    color = \"#f5f5f5\",\n    fill=\"#629182\",\n    alpha=0.4,\n  ) +\n  \n  # Sets same breaks on the x-axis\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n  \n    # Set same limits for both plots for consistency\n    limits = c(150,950), \n  ) +\n  \n  # Insert mean line\n  geom_vline(\n    aes(xintercept = mean_m),\n    colour=\"#3E5058\", \n    linewidth = 0.5, \n    linetype = \"dashed\"\n  ) +\n  \n  # Include annotation for mean line\n  annotate(\n    geom = \"text\", \n    x = mean_m-50, \n    y = 870,\n    label = paste0(\"Mean: \", mean_m),\n    color=\"#3E5058\",\n    size = 3,\n  ) + \n  \n  \n  labs(x = NULL, y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    axis.text.x = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\n# Histogram for Reading scores\nhist_r &lt;- \n  ggplot(\n    stu_SG, \n    aes(x = PV1READ)\n  ) +\n  geom_histogram(\n    bins = 25,\n    color = \"#f5f5f5\",\n    fill=\"#EF6174\",\n    alpha=0.4,\n  ) +\n  \n  scale_x_continuous(\n    # Sets same breaks on the x-axis\n    breaks = scales::pretty_breaks(n = 5),\n  \n    # Set same limits for both plots for consistency\n    limits = c(150,950), \n  ) +\n  \n  # Insert mean line\n  geom_vline(\n    aes(xintercept = mean_r),\n    colour=\"#3E5058\", \n    linewidth = 0.5, \n    linetype = \"dashed\"\n  ) +\n  \n  # Include annotation for mean line\n  annotate(\n    geom = \"text\", \n    x = mean_r-50, \n    y = 870,\n    label = paste0(\"Mean: \", mean_r),\n    color=\"#3E5058\",\n    size = 3,\n  ) +  \n  labs(x = NULL, y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    axis.text.x = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\nhist_s &lt;- \n  ggplot(\n    stu_SG, \n    aes(x = PV1SCIE)\n  ) +\n  geom_histogram(\n    bins = 25,\n    color = \"#f5f5f5\",\n    fill=\"#FEBc44\",\n    alpha= 0.4,\n  ) +\n\n  scale_x_continuous(\n    # Sets same breaks on the x-axis\n    breaks = scales::pretty_breaks(n = 5),\n  \n    # Set same limits for both plots for consistency\n    limits = c(150,950), \n  ) +\n  \n  # Insert mean line\n  geom_vline(\n    aes(xintercept = mean_s),\n    colour=\"#3E5058\", \n    linewidth = 0.5, \n    linetype = \"dashed\"\n  ) +\n  # Include annotation for mean line\n  annotate(\n    geom = \"text\", \n    x = mean_s-50, \n    y = 870,\n    label = paste0(\"Mean: \", mean_s),\n    color=\"#3E5058\",\n    size = 3,\n  ) +  \n  labs(x = \"Scores\", y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    axis.line.x = element_line(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n  )\n\np1 &lt;- (hist_m / hist_r)\np1 / hist_s  + \n  plot_layout(heights = c(1,1,1)) +\n  plot_annotation(title=\"Mean scores in &lt;span style='color: #629182;'&gt;Math&lt;/span&gt; &gt; &lt;span style='color: #EF6174;'&gt;Reading&lt;/span&gt; and &lt;span style='color: #FEBc44;'&gt;Science&lt;/span&gt;.\", \n                  subtitle = \"Normal distribution across all subjects.\",\n                  theme=theme(plot.title = element_markdown(hjust = 0, face=\"bold\"),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\n\n\n\n\nClarity\n\nGraph title: The title encapsulates the primary observation derived from the graph. The use of colour-coded words for each subject eliminares the need for a legend and fosters subject identification.\nx-axis tick marks and scale: The histograms are consolidated into a single column with a share x-axis. It features aligned bin numbers across each subject to improve clarity and comparability.\nMean Line: The mean is calculated using PV1 values for each subject to ensure a more precise benchmarking process that contributes to the graph’s accuracy.\n\nAesthetic\n\nAnnotation placement: The move of the mean line’s annotation to the top enhances the overall view of the plot and avoids obstruction."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#relationship-between-scores-and-school-id",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#relationship-between-scores-and-school-id",
    "title": "Take-home Exercise 2: DataVis Makeover For Take-home Exercise 1",
    "section": "3.2 Relationship between Scores and School ID",
    "text": "3.2 Relationship between Scores and School ID\nThe author opted for a bubble plot, an extension of the scatter plot, to examine the relationship between subject scores and School ID.\n\nOriginalAreas for Improvement\n\n\n\n\n\n\n\nStarting off with the good:\nClarity\n\nThe graph layout is clear and user-friendly. The tabset format allows easy navigation across different subjects’ plot.\nThe interactive plot with a tooltips makes it convenient to identify School ID, average score, and frequency.\n\nAesthetic\n\nThe font and colours used are easy to read. It is easy to grasp the idea of the plot without distractions.\n\n\n\n\n\n\n\n\nNext, the not so good and some improvements I would make:\nClarity\n\nUse of a bubble plot: The bubble plot may not be the most effective way to visualise scores (continuous variable) against School ID (categorical variable). Scatter plots are typically more suited for charting 2 continuous variables.\nColour scale: The colour transition lacks obvious distinction, most of the points appear to be of similar density. A more contrasting colour scale would improve visual differentiation.\nColour and location of annotations: Annotations close to the axis may be challenging to locate and can be easily overlooked, especially when they blend in with the colour of the bubbles.\n\nAesthetic\n\nOrientation of y-axis title: Rotating the y-axis title horizontally would be more reader-friendly.\nLength of legend name: Shortening the legend’s title or allowing it to extend across a second line would create more space for the actual plot.\n\n\n\n\n\nRevamp\nThis remake is inspired by Tobias Stalder’s submission for TidyTuesday.\nFirstly, as.character() is used to convert the SchID variable from numeric to categorical data type.\n\n# Convert School ID to character data type\n\nstu_SG &lt;- stu_SG %&gt;%\n  mutate(CNTSCHID = as.character(CNTSCHID))\n\nUsing n_distinct we can identify that there are 164 unique school IDs in our dataset.\n\nn_distinct(stu_SG$CNTSCHID)\n\n[1] 164\n\n\nRather than cramming all 164 points of data into a plot, visualising the top 5 and bottom 5 results by subject performance should convey the message sufficiently (I have also tried plotting the top 10 and bottom 10 but did not find any additional information to be particularly insightful).\nThe below code serves the following purpose:\n\ngroup_by(): is first used to group all the rows with the same School ID together.\nsummarize(), count = n() and mean(): This summarises the grouped data, calculating the count of observations within each school and the overall mean scores for each subject across all schools.\ndense_rank(avg_sci) &lt;= 5 and dense_rank(desc(avg_sci)) &lt;= 5 are then used filter the top 5 and bottom 5 schools based on the average subject scores.\n\n\n\nShow the code\nstu_SG_schools &lt;- \n  stu_SG %&gt;% \n  group_by(CNTSCHID) %&gt;% \n  mutate(avg_math = mean(c_across(PV1MATH), na.rm=TRUE),\n         avg_read = mean(c_across(PV1READ), na.rm=TRUE),\n         avg_sci = mean(c_across(PV1SCIE), na.rm=TRUE)) %&gt;% \n  summarize(Count = n(),\n            avg_math = mean(avg_math, na.rm = TRUE),\n            avg_read = mean(avg_read, na.rm = TRUE),\n            avg_sci = mean(avg_sci, na.rm = TRUE))  \n\nstu_SG_schools_m &lt;-\n  stu_SG_schools %&gt;% \n  filter(dense_rank(avg_math) &lt;= 5 | dense_rank(desc(avg_math)) &lt;= 5)\n\nstu_SG_schools_r &lt;-\n  stu_SG_schools %&gt;% \n  filter(dense_rank(avg_read) &lt;= 5 | dense_rank(desc(avg_read)) &lt;= 5)\n\nstu_SG_schools_s &lt;-\n  stu_SG_schools %&gt;% \n  filter(dense_rank(avg_sci) &lt;= 5 | dense_rank(desc(avg_sci)) &lt;= 5)\n\n\nSince the original plot aimed to compare average subject scores of each school, the remade version proposes the use of a bar plot to visualise ranking of the school subject averages.\nThe remade version showcases a lollipop plot, akin to a barplot, where the traditional bar is transformed into a combination of a line using geom_segment() and a dot with geom_point(). This visualisation illustrates the relationship between a numeric variable (average subject scores per school) and a categorical variable (school).\n\n\nShow the code\nlolly_m &lt;-\n  ggplot(stu_SG_schools_m, \n       aes(x = avg_math, \n           y = reorder(CNTSCHID, avg_math))) +\n  \n  geom_segment(aes(x=0, \n                 xend=avg_math, \n                 y=CNTSCHID, \n                 yend=CNTSCHID),\n             color= if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#989d9e\")\n                            ),\n             alpha = 0.5,\n             linewidth= 4.2)+\n  \n  geom_point(color= if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#989d9e\")),\n             alpha = 0.8,\n             size = 3.5)+            \n  \n  geom_text(data = stu_SG_schools_m,\n             aes(label = paste(CNTSCHID), \n                 x = 130, \n                 y = CNTSCHID),\n             color = if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#2e272A\")\n                            ),\n             size = 3,\n            fontface= if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200003\", \"70200056\", \"70200115\", \"70200149\"), \n                             \"bold\",\n                             \"plain\")) +\n  \n  # Data callout\n  geom_text(aes(label=round(avg_math,0)\n                ),\n            color=if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#2e272A\")\n                            ),\n            size=3,\n            nudge_x= 30,   # move it to the right of the point\n            hjust= 0, # left justify\n            fontface= if_else(stu_SG_schools_m$CNTSCHID %in% c(\"70200003\", \"70200056\", \"70200115\", \"70200149\"), \n                             \"bold\", \n                             \"plain\")) +\n  \n  # Insert mean line\n  geom_vline(\n    aes(xintercept = mean_m),\n    colour=\"#7161f0\", \n    linewidth = 0.5, \n    linetype = \"dashed\"\n  ) +\n  \n  # Include annotation for mean line\n  annotate(\n    geom = \"text\", \n    x = mean_m + 145, \n    y = 3.5,\n    label = paste0(\"Mean:\\n\", mean_m),\n    color=\"#7161f0\",\n    size = 3.2,\n  ) +  \n  scale_x_continuous(\n\n    # Set same limits for plots for consistency\n    limits = c(0,800), \n  ) +  \n  theme_minimal()+\n  labs(\n    x = \"Math\",\n    y = NULL\n  ) +\n  theme(\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_blank(),\n    axis.title = element_text(face =\"bold\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.grid = element_blank()\n  )  \n\nlolly_r &lt;-\n  ggplot(stu_SG_schools_r, \n       aes(x = avg_read, \n           y = reorder(CNTSCHID, avg_read))) +\n  \n  geom_segment(aes(x=0, \n                 xend=avg_read, \n                 y=CNTSCHID, \n                 yend=CNTSCHID),\n             color= if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#989d9e\")\n                            ),\n             alpha = 0.5,\n             linewidth= 4.2)+\n  \n  geom_point(color= if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#989d9e\")),\n             alpha = 0.8,\n             size = 3.5)+            \n  \n  geom_text(data = stu_SG_schools_r,\n             aes(label = paste(CNTSCHID), \n                 x = 130, \n                 y = CNTSCHID),\n             color = if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#2e272A\")\n                            ),\n             size = 3,\n            fontface= if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200003\", \"70200056\", \"70200115\", \"70200149\"), \n                             \"bold\",\n                             \"plain\")) +\n  \n  # Data callout\n  geom_text(aes(label=round(avg_read,0)\n                ),\n            color=if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#2e272A\")\n                            ),\n            size=3,\n            nudge_x= 30,   # move it to the right of the point\n            hjust= 0, # left justify\n            fontface= if_else(stu_SG_schools_r$CNTSCHID %in% c(\"70200003\", \"70200056\", \"70200115\", \"70200149\"), \n                             \"bold\", \n                             \"plain\")) +\n  \n  # Insert mean line\n  geom_vline(\n    aes(xintercept = mean_r),\n    colour=\"#7161f0\", \n    linewidth = 0.5, \n    linetype = \"dashed\"\n  ) +\n  \n  # Include annotation for mean line\n  annotate(\n    geom = \"text\", \n    x = mean_r + 145, \n    y = 3.5,\n    label = paste0(\"Mean:\\n\", mean_r),\n    color=\"#7161f0\",\n    size = 3.2,\n  ) +  \n  scale_x_continuous(\n\n    # Set same limits for plots for consistency\n    limits = c(0,800), \n  ) +  \n  theme_minimal()+\n  labs(\n    x = \"Reading\",\n    y = NULL\n  ) +\n  theme(\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_blank(),\n    axis.title = element_text(face =\"bold\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.grid = element_blank()\n  ) \n\nlolly_s &lt;-\n  ggplot(stu_SG_schools_s, \n       aes(x = avg_sci, \n           y = reorder(CNTSCHID, avg_sci))) +\n  \n  geom_segment(aes(x=0, \n                 xend=avg_sci, \n                 y=CNTSCHID, \n                 yend=CNTSCHID),\n             color= if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#989d9e\")\n                            ),\n             alpha = 0.5,\n             linewidth= 4.2)+\n  \n  geom_point(color= if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#989d9e\")),\n             alpha = 0.8,\n             size = 3.5)+            \n  \n  geom_text(data = stu_SG_schools_s,\n             aes(label = paste(CNTSCHID), \n                 x = 130, \n                 y = CNTSCHID),\n             color = if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#2e272A\")\n                            ),\n             size = 3,\n            fontface= if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200003\", \"70200056\", \"70200115\", \"70200149\"), \n                             \"bold\",\n                             \"plain\")) +\n  \n  # Data callout\n  geom_text(aes(label=round(avg_sci,0)\n                ),\n            color=if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200003\"), \"#69aebf\", \n                            if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200056\", \"70200115\", \"70200149\"), \"#dc7068\",\"#2e272A\")\n                            ),\n            size=3,\n            nudge_x= 30,   # move it to the right of the point\n            hjust= 0, # left justify\n            fontface= if_else(stu_SG_schools_s$CNTSCHID %in% c(\"70200003\", \"70200056\", \"70200115\", \"70200149\"), \n                             \"bold\", \n                             \"plain\")) +\n  \n  # Insert mean line\n  geom_vline(\n    aes(xintercept = mean_s),\n    colour=\"#7161f0\", \n    linewidth = 0.5, \n    linetype = \"dashed\"\n  ) +\n  \n  # Include annotation for mean line\n  annotate(\n    geom = \"text\", \n    x = mean_s + 145, \n    y = 3.5,\n    label = paste0(\"Mean:\\n\", mean_s),\n    color=\"#7161f0\",\n    size = 3.2,\n  ) +  \n  scale_x_continuous(\n\n    # Set same limits for plots for consistency\n    limits = c(0,800), \n  ) +  \n  theme_minimal()+\n  labs(\n    x = \"Science\",\n    y = NULL\n  ) +\n  theme(\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_blank(),\n    axis.title = element_text(face =\"bold\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.grid = element_blank()\n  ) \n\nlolly_m + lolly_r + lolly_s +\n  plot_layout(widths=c(1.2,1,1)) +\n  plot_annotation(title=\"Uneven distribution of scores across schools\",\n                  subtitle=\"School &lt;span style='color: #69aebf;'&gt;70200003&lt;/span&gt; has one of the highest mean scores across all subjects,&lt;br&gt; while schools &lt;span style='color: #dc7068;'&gt;70200056, 70200115, 70200149&lt;/span&gt; remained at the bottom consistently.\",\n                  theme=theme(plot.title = element_markdown(hjust = 0, face=\"bold\"),\n                              plot.subtitle = element_markdown(hjust = 0),\n                              plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                              panel.border = element_blank()))\n\n\n\n\n\nClarity\n\nUse of a lollipop plot: The lollipop plot is a straightforward yet effective visualisation of the top and bottom average scores by school. The schools are sorted in descending order based on their average scores for each subject to enhance interpretability.\nColour: The use of colours, with blue highlighting consistently high-performing schools and pink delineating consistently low-performing schools across subjects, serves to direct the reader’s attention towards salient findings.\nMean line: The inclusion of a mean line, along with annotations, facilitates easy comparison of school performance against the average score for each subject across all schools.\nChart labelling: Each point in the graph is annotated, enhancing overall clarity and providing additional context to the visual representation.\n\nAesthetic\n\nRemoval of y-axis: The y-axis labels (School IDs) are labelled within the bar for more efficient use of space since 3 plots are combined.\n\nNote: After going through on lesson slides and Hands-on Exercise 4, I understand that it is misleading to plot average values on bar charts, even if a distribution is normally distributed. Plotting the average values on a bar chart overlooks the important information of spread and variability of the data. Adding an error bar could visually enhance the variability of the plotted data, help indicate estimated error or uncertainty to give a general sense of how precise a measuement is."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#relationship-between-gender-and-scores",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#relationship-between-gender-and-scores",
    "title": "Take-home Exercise 2: DataVis Makeover For Take-home Exercise 1",
    "section": "3.3 Relationship between Gender and Scores",
    "text": "3.3 Relationship between Gender and Scores\nDensity plots are used to illustrate the disparity in distribution across genders for the 3 subjects.\n\nOriginalAreas for Improvement\n\n\n\n\n\n\n\nClarity\n\nDensity plot with quantile lines effectively highlights the variance in median scores between genders.\nThe graph is aptly labeled, with clear titles and axes.\n\nAesthetics\n\n\n\n\n\n\n\nClarity\n\nQuartile lines: Some of the quartile lines do not seem to be used, and can be removed to avoid cluttering the charts.\nRange of x-axis: The differing ranges of the x-axis hinder a direct comparison across the three subjects. Using a consistent scale could enhance the identification of discrepancies.\n\nAesthetics\n\nColours: The colours of the density plot serves little purpose.\nRepetition of x-axis: Consistency in the x-axis ranges across all subjects can help remove redundant axes, potentially optimising space for the plots.\n\n\n\n\n\nRevamp\n\n\nShow the code\ndp_long &lt;- \n  stu_SG %&gt;% \n  select(ST004D01T, PV1MATH, PV1READ, PV1SCIE) %&gt;% \n  pivot_longer(cols = starts_with(\"PV1\"),\n               names_to = \"subject\",\n               names_prefix=\"PV1\",\n               values_to=\"Score\") %&gt;% \n  mutate(Gender=(recode(ST004D01T, '1'=\"Female\", \n                        '2'=\"Male\"))) %&gt;% \n  select(-ST004D01T) %&gt;% \n  mutate(subject=(recode(subject, \n                            'MATH'=\"Math\",\n                            'READ'=\"Reading\",\n                            'SCIE'='Science')))\n\nggplot(dp_long, \n       aes(x = Score, \n           y = Gender, \n           fill = Gender, \n           color = Gender)) +\n  geom_density_ridges(\n    alpha = 0.5,\n    quantile_lines = TRUE,\n    quantiles = 2,\n    scale = 1.5,\n    #bandwidth= 0.1,\n    rel_min_height = 0.01\n  ) +\n  theme_ridges() +\n  scale_fill_manual(values =\n                      c(\"#f27279\",\n                        \"#73b2c4\")) +\n  scale_color_manual(values =\n                      c(\"#f27279\",\n                        \"#73b2c4\")) +  \n  facet_wrap(~ subject, ncol=1)+\n  scale_x_continuous(\n    name = \"Scores\",\n    expand = c(0, 0)\n  ) +  \n  scale_y_discrete(expand = expansion(add= c(0.05, 1.8)))+\n\n  geom_text(\n   data = data.frame(x = 620, y = 1.5, subject = \"Math\", Gender = \"Female\", label = \"Median\"),\n   aes(x = x,\n       y = y,\n       label = label),\n    color = \"red\",\n    size = 3,\n   fontface = \"italic\"\n    ) +      \n  \n  labs(x = \"&lt;b&gt;Scores&lt;/b&gt;\",\n       y = \"\",\n       title=\"Gaps in academic achievement between genders.\",\n       subtitle=\"&lt;b&gt;&lt;span style='color: #73b2c4;'&gt;Male&lt;/span&gt;&lt;/b&gt; students have higher median scores in Math and Science than &lt;b&gt;&lt;span style='color: #f27279;'&gt;female&lt;/b&gt;&lt;/span&gt; students.\") +\n  guides(fill=FALSE) +\n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(size = 9, color = \"#a6a6a6\"),\n    \n    axis.text.x = element_text(size = 9, color = \"#a6a6a6\"),\n    axis.title.x = element_markdown(size = 10, color = \"#a6a6a6\", hjust= 0.5),\n    axis.line.x = element_line(color = \"#a6a6a6\"), \n    axis.ticks.x = element_line(color = \"#a6a6a6\"),\n    panel.grid = element_blank(),\n    plot.title = element_markdown(hjust=0),\n    plot.subtitle = element_markdown(hjust = 0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    strip.background = element_rect(color=\"#ecebeb\"),\n    strip.switch.pad.grid = unit(2, \"in\"),\n    strip.text = element_text(size = 9.5, \n                              color =\"#202120\",\n                              margin = unit(rep(4, 4), \"pt\"))\n    )  \n\n\n\n\n\nThe revamped version retains the use of density plots to compare the distributions of subject scores between genders, with vertical lines showing the median.\nClarity\n\nUse of colours: In this version, colours are used to differentiate between the 2 genders. This colour scheme extends to the plot title, establishing a clear connection between the key finding in the title and the plots.\nMedian line: The quantile_lines argument is introduced to geom_density_ridges(), allowing control over the number of lines to represent quantiles. Setting the quantiles argument to 2 divides each density plot in half, effectively highlighting the median. Additionally, an annotation is included to provide context for the line’s significance.\nConsistent x-axis: Through the use of facet_wrap(), the graph is divided into individual sections for the three subjects. Importantly, the x-axis maintains a consistent range/scale throughout, aiding in distinguishing differences across subjects. For instance, the width of the density plots highlights that the range of scores for Science for both genders is notably smaller compared to the other two subjects.\n\nAesthetics\n\nMuted labels: The axes are in muted grey tones to ensure that the reader’s focus remains on the graph itself without being distracted by the axes labels."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#relationship-between-scores-and-socioeconomic-status-of-students",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#relationship-between-scores-and-socioeconomic-status-of-students",
    "title": "Take-home Exercise 2: DataVis Makeover For Take-home Exercise 1",
    "section": "3.4 Relationship between Scores and Socioeconomic Status of Students",
    "text": "3.4 Relationship between Scores and Socioeconomic Status of Students\nThe original approach to assess the association between subject scores and socioeconomic status involves the use of a scatterplot, accompanied by an R-squared value to quantify the correlation’s strength. The socio-economic status used ESCS is measured by the PISA index of economic, social, and cultural status.\n\nOriginalAreas for Improvement\n\n\n\n\n\n\n\nClarity\n\nThe title effectively captures the essence of the plot, providing a clear summary of its main message or findings.\nThe consistent use of colours for each subject facilitates easy association between colour and subject, which is particularly helpful when comparing different plots throughout the submission post.\n\nAesthetics\n\nThe graph maintains a clean and straightforward appearance, avoiding distracting colours or excessive details that could overwhelm the viewer. OP has done well to eliminate some of the chart junk such as the y-axis since the correlation coeffcient is rather indicative of the strength of the relationship.\nThe inclusion of the correlation coefficient adds a layer of statistical evidence to illustrate the strength of the relationship depicted in the plot.\n\n\n\n\n\n\n\n\nClarity\n\nx-axis: Recoding the ESCS scores could enhance understanding, since little context is provided with regards to how the scores can be interpreted. Shifting the axis to start from where the 0 value is located might make it more intuitive, as it’s not immediately evident that ESCS scores have both positive and negative sides. Additionally, the repetition of the x-axis across three plots could be avoided to streamline the visualisation.\n\nAesthetics\n\ny-axis title: Rotating the y-axis title horizontally would improve readability of the plot.\nGraph title: A bolded graph title would stand out more and emphasise on the finding.\n\n\n\n\n\nRevamp\nThe source of inspiration came from this blog.\nThe code chunk below assigns a quartile classification to the variable ESCS to create 4 roughly equal-sized groups, recodes the variables to more intuitive categories, and finally orders the variables as socio-economic levels increase.\n\nstu_SG &lt;- stu_SG %&gt;%\n  mutate(ESCS = ntile(ESCS, 4), .after = ESCS) %&gt;%\n  \n  mutate(ESCS = recode(ESCS,\n                       `1` = \"Highly Disadvantaged\",\n                       `2` = \"Disadvantaged\",\n                       `3` = \"Advantaged\",\n                       `4` = \"Highly Advantaged\")) %&gt;%\n  \n  mutate(ESCS = factor(ESCS, \n                levels = c(\"Highly Disadvantaged\", \"Disadvantaged\", \n                        \"Advantaged\", \"Highly Advantaged\"),\n                ordered = TRUE)) \n\nThe following code chunk prepares the dataset for plotting using pivot_longer() to reshape the data by converting multiple columns into 2 columns. The processed data is then grouped by ECSC category and subject. For each group, it calculates the mean score using the summarise() function.\n\n\nShow the code\nbar_escs &lt;-\n  stu_SG %&gt;% \n  drop_na(ESCS) %&gt;% \n  select(ESCS, PV1MATH, PV1READ, PV1SCIE) %&gt;% \n  pivot_longer(cols = starts_with(\"PV1\"),\n               names_to = \"subject\",\n               names_prefix=\"PV1\",\n               values_to=\"score\") %&gt;% \n  mutate(subject = recode(subject,\n                       `MATH` = \"Math\",\n                       `READ` = \"Reading\",\n                       `SCIE` = \"Science\")) \n  \nmean_escs &lt;- \n  bar_escs %&gt;% \n  group_by(ESCS, subject) %&gt;% \n  summarise(mean = mean(score, na.rm=TRUE)) %&gt;% \n  ungroup() %&gt;% \n  mutate(total_avg = if_else(subject==\"Math\", mean_m, \n                            if_else(subject==\"Reading\", mean_r,\n                                    mean_s)))\n\n\nThe remade strip plot shows the range, density, and central tendencies of each socio-economic level faceted by subject. By adding a low alpha value geom_point(), the strip plot is able to highlight the density and range of scores. The purple points refer to the mean of each subject at a socio-economic level. Lastly, a mean line indicating the overall subject-level average is added for comparison.\n\n\nShow the code\nggplot(bar_escs,\n             aes(x = ESCS, y = score)) +\n  coord_flip(clip = \"off\") +\n  geom_point(size = 3, \n             alpha = 0.1,\n             color=\"#3E5058\") +\n  geom_hline(data = mean_escs,\n             aes(yintercept = total_avg),\n             color = \"#c71e1d\",\n             size=1) +  \n  facet_wrap(~ subject, nrow = 3) +\n\n  geom_segment(\n    data = mean_escs,\n    aes(x = ESCS,\n        xend = ESCS,\n        y = total_avg,\n        yend = mean),\n    color = \"#8c8ed6\",\n    size = 0.8,\n  ) +\n  stat_summary(\n    fun=mean,\n    geom=\"point\",\n    size = 5,\n    color=\"#8c8ed6\",\n  ) +\n  geom_text(\n    aes(x = -0.2, y = 580, label = \"Subject Mean\"),\n            color = \"red\", size = 3,\n    data = data.frame(subject = \"Science\")) +    \n  scale_y_continuous(limits = c(0, 1000), expand = c(0.02,0.02)) +\n  labs(x = \"English Scores\",\n       y = \"\",\n       title=\"Disparities in academic achievement among different&lt;br&gt;socio-economic groups.\",\n       subtitle=\"Mean values highlighted in &lt;span style='color: #8c8ed6;'&gt;purple&lt;/span&gt;.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(),\n    axis.text.x = element_text(),\n    panel.grid = element_blank(),\n    axis.ticks.y = element_blank(),    \n    plot.title = element_markdown(hjust=0),\n    plot.subtitle = element_markdown(hjust = 0),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    strip.background = element_rect(color=\"#ecebeb\"),\n    strip.text = element_text(color =\"#202120\"))\n\n\n\n\n\nClarity\n\nx-axis: The remade strip plot highlights the variance in range of subject scores by using a shared x-axis.\nESCS-level mean: The subject mean of each ESCS level is indicated by adding a summary statistic via stat_summary() with a different point size and colour to distinguish it from the points of geom_point(). Since the mean is a more important point of reference here, it is highlighted with a bigger size, zero transparency, and in bright purple colour.\nMean line and annotation: To relate all these points to a baseline, a red mean line is added to indicate the subject-level average score. We further highlight that the baseline is the subject-level average scores by adding a line from the average of each ESCS level to the subject average. The result is a combination of a strip and lollipop plot. The annotation for Subject Mean also helps explain the baseline level via geom_text().\n\nAesthetics\n\nThe overall format, design, and colour scheme have been refined to deliver a polished and professional appearance while maintaining clarity and avoiding information overload."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#breakdown-of-scores-per-subject",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#breakdown-of-scores-per-subject",
    "title": "Take-home Exercise 2: DataVis Makeover For Take-home Exercise 1",
    "section": "3.5 Breakdown of Scores per Subject",
    "text": "3.5 Breakdown of Scores per Subject\nThe original visualisation features grouped bar chart to visualise proportion of proficiency levels.\n\nOriginalAreas for Improvement\n\n\n\n\n\n\n\nClarity\n\nThe axes are appropriately labeled, contributing to the overall clarity of the visualisation.\nThe proportions displayed on each bar are clearly marked, eliminating any potential ambiguity in interpretation.\n\nAesthetics:\n\nTiled x-axis label is a thoughtful feature to enhance readability and prevent overlap of long axis labels, thereby improving the aesthetic appeal of the plot.\n\n\n\n\n\n\n\n\nClarity\n\nGraph title: The title appears somewhat confusing and potentially misleading. I think the OP intention was to convey the higher proportion of students performing poorly in Reading compared to other subjects.\nGrouped barchart: The use of a grouped bar chart to represent proportions may not be the most suitable choice, especially when comparing bins of continuous scores. Typically, a histogram is used to visualise the distribution and relative frequencies of continuous data, providing a clearer representation of the data distribution. Additionally, with a grouped bar chart, there’s a risk of overlapping information, especially when presenting data for multiple subjects simultaneously.\ny-axis title: Rotating the y-axis title horizontally could enhance readability and user convenience.\n\nAesthetics\n\nx-axis labels: These can be recoded to represent more meaningful categories, reflecting the varying levels of proficiency.\n\n\n\n\n\nRevamp\nFirst, I wanted to understand the functionality of pisa.ben.pv() used by the OP.\n\nmath_breakdown &lt;- pisa.ben.pv(pvlabel= paste0(\"PV\",1:10,\"MATH\"), by=\"CNT\", atlevel=TRUE, data=stu_SG)\n\nread_breakdown &lt;- pisa.ben.pv(pvlabel= paste0(\"PV\",1:10,\"READ\"), by=\"CNT\", atlevel=TRUE, data=stu_SG)\n\nscie_breakdown &lt;- pisa.ben.pv(pvlabel= paste0(\"PV\",1:10,\"SCIE\"), by=\"CNT\", atlevel=TRUE, data=stu_SG)\n\nInspecting the outputs:\n\nMathReadingScience\n\n\n\nmath_breakdown\n\n  CNT       Benchmarks Percentage Std. err.\n1 SGP        &lt;= 357.77       2.17      0.22\n2 SGP (357.77, 420.07]       5.85      0.38\n3 SGP (420.07, 482.38]      11.25      0.59\n4 SGP (482.38, 544.68]      17.59      0.61\n5 SGP (544.68, 606.99]      22.62      0.69\n6 SGP  (606.99, 669.3]      21.96      0.69\n7 SGP          &gt; 669.3      18.56      0.52\n\n\n\n\n\nread_breakdown\n\n  CNT       Benchmarks Percentage Std. err.\n1 SGP        &lt;= 357.77       5.19      0.37\n2 SGP (357.77, 420.07]       8.06      0.51\n3 SGP (420.07, 482.38]      14.15      0.63\n4 SGP (482.38, 544.68]      20.15      0.80\n5 SGP (544.68, 606.99]      23.40      0.76\n6 SGP  (606.99, 669.3]      18.61      0.62\n7 SGP          &gt; 669.3      10.44      0.45\n\n\n\n\n\nscie_breakdown\n\n  CNT       Benchmarks Percentage Std. err.\n1 SGP        &lt;= 357.77       2.87      0.30\n2 SGP (357.77, 420.07]       6.36      0.49\n3 SGP (420.07, 482.38]      12.07      0.52\n4 SGP (482.38, 544.68]      19.05      0.59\n5 SGP (544.68, 606.99]      25.13      0.66\n6 SGP  (606.99, 669.3]      21.14      0.65\n7 SGP          &gt; 669.3      13.38      0.43\n\n\n\n\n\nThe objective of the function was to compute the percentage of students at each proficiency level as defined by PISA. However, for the purpose of visualising binned results, recoding the variables into more meaningful and intuitive categories might help with understanding.\nIn the code chunk below, the 2 lowest categories &lt;= 357.77 and (357.77, 420.07] are recoded as “low” to represent low proficiency levels, while &gt; 669.3 and (606.99, 669.3] are recoded as “high” to represent high proficiency levels. The remaining 3 bins are grouped as “average”. This recoding helps simplify the interpretation of proficiency levels for visualisation purposes.\n\n# Creating a new combined table\nmath_breakdown$Subject &lt;- 'Math'\nread_breakdown$Subject &lt;- 'Reading'\nscie_breakdown$Subject &lt;- 'Science'\n\ncombined_breakdown &lt;- bind_rows(math_breakdown, read_breakdown, scie_breakdown)\n\n# Recoding proficiency levels\ncombined_breakdown &lt;-\n  combined_breakdown %&gt;% \n  mutate(proficiency=(recode(Benchmarks, \n                            '&lt;= 357.77'=\"Low\",\n                            '(357.77, 420.07]'=\"Low\",\n                            '(420.07, 482.38]'='Average',\n                            '(482.38, 544.68]'='Average',\n                            '(544.68, 606.99]'='Average',\n                            '(606.99, 669.3]'='High',\n                            '&gt; 669.3'='High')))\n\n# Ordering factors\ncombined_breakdown$proficiency &lt;- factor(combined_breakdown$proficiency, levels = c(\"Low\", \"Average\", \"High\"))\n\nThe revamped version proposes using waffle charts to visualise proportions using geom_waffle(). Each square grid represents a portion of the total data, making them idea for illustrating categorical data.\n\nnrow() within the geom_waffle() are used to specific the number of rows in the waffle chart. nrow=10 indicates that the chart will have 10 rows of squares.\nscale_fill_manual()allows manual specification for the fill colours of the waffle chart.\nfacet_wrap() allows visualisation of subsets of the data in separate panels within the same plot.\n\n\n\nShow the code\n# Generate the waffle chart\n\nwaf2 &lt;- \n  combined_breakdown %&gt;%\n  ggplot(aes(fill = proficiency, \n             values = Percentage)) +\n  expand_limits(x=c(0,0), \n                y=c(0,0)) +\n  coord_equal() +\n  labs(fill = NULL, \n       colour = NULL)+\n  theme_ipsum(grid=\"\")\n\nwaf2 +\n  geom_waffle(\n    n_rows = 10, \n    size = 0.33, \n    colour = \"#f5f5f5\", \n    flip = TRUE,\n    make_proportional = TRUE\n  ) +\n  scale_fill_manual(\n    values = c(\n               \"#fcd9e5\", \n               \"#f99cbc\",\n               \"#f5347f\") \n    )+\n  facet_wrap(~Subject, nrow =1, strip.position = \"bottom\") +\n  labs(title=\"A proportional perspective of subject performance\",\n       subtitle=\"Higher proportion of students with high proficiency in Math than other subjects.\") +   \n  theme(\n    legend.position = \"bottom\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_blank(),\n    panel.grid = element_blank(),\n    axis.ticks.y = element_blank(),    \n    plot.title = element_markdown(hjust=0),\n    plot.subtitle = element_markdown(hjust = 0),\n    strip.text.x = element_text(hjust = 0.5, margin=margin(l=0), face =\"bold\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\",),\n    plot.margin = unit(c(0, 0, 0, 0), \n                                \"inches\")\n)  \n\n\n\n\n\nAn alternative approach using mean subject scores to dichotomise proficiency levels could be explored.\n\n\nShow the code\n# Recoding to above and below average\nproficiency &lt;-\n  stu_SG %&gt;% \n  select(PV1MATH, PV1READ, PV1SCIE) %&gt;% \n  mutate(proficiency_math = \n           if_else(PV1MATH &lt; mean_m, \"Below Average\", \"Above Average\"),\n         proficiency_read =\n           if_else(PV1READ &lt; mean_r, \"Below Average\", \"Above Average\"),\n         proficiency_scie = \n           if_else(PV1SCIE &lt; mean_s, \"Below Average\", \"Above Average\"))\n\n# Calculating the frequency and percentage of each category\nproficiency_summary &lt;- proficiency %&gt;%\n  summarize(\n    math_below_average = sum(proficiency_math == \"Below Average\"),\n    math_above_average = sum(proficiency_math == \"Above Average\"),\n    read_below_average = sum(proficiency_read == \"Below Average\"),\n    read_above_average = sum(proficiency_read == \"Above Average\"),\n    scie_below_average = sum(proficiency_scie == \"Below Average\"),\n    scie_above_average = sum(proficiency_scie == \"Above Average\")\n  ) %&gt;%\n  mutate(\n    Math_below_average_pct = math_below_average / nrow(stu_SG) * 100,\n    Math_above_average_pct = math_above_average / nrow(stu_SG) * 100,\n    Reading_below_average_pct = read_below_average / nrow(stu_SG) * 100,\n    Reading_above_average_pct = read_above_average / nrow(stu_SG) * 100,\n    Science_below_average_pct = scie_below_average / nrow(stu_SG) * 100,\n    Science_above_average_pct = scie_above_average / nrow(stu_SG) * 100\n  )  %&gt;%\n  select(ends_with(\"pct\")) %&gt;% \n  pivot_longer(cols = starts_with(\"Math\") | starts_with(\"Reading_\") | starts_with(\"Science_\"),\n               names_to = c(\".value\", \"level\"),\n               names_sep = \"_\") %&gt;% \n  pivot_longer(cols = starts_with(\"Math\") | starts_with(\"Reading\") | starts_with(\"Science\"),\n               names_to = \"subject\") %&gt;% \n  mutate(level = factor(level, \n                levels = c(\"above\", \"below\"),\n                ordered = TRUE)) \n\n# Generate the waffle chart\n\nwaf &lt;- \n  proficiency_summary %&gt;%\n  ggplot(aes(fill = level, \n             values = value)) +\n  expand_limits(x=c(0,0), \n                y=c(0,0)) +\n  coord_equal() +\n  labs(fill = NULL, \n       colour = NULL)+\n  theme_ipsum(grid=\"\")\n\nwaf +\n  geom_waffle(\n    n_rows = 10, \n    size = 0.33, \n    colour = \"#f5f5f5\", \n    flip = TRUE,\n    make_proportional = TRUE\n  ) +\n  scale_fill_manual(\n    values = c(\"#f5347f\", \n               alpha(\"#65666a\", 1/3)) \n    )+\n  facet_wrap(~subject, nrow =1, strip.position = \"bottom\") +\n  labs(title=\"A proportional perspective of subject performance\",\n       subtitle=\"More than half with &lt;span style='color: #e0218a;'&gt;above average&lt;/span&gt; of national subject scores.\") +   \n  theme(\n    legend.position = \"none\",\n    #panel.grid.major = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.text.x = element_blank(),\n    axis.title.x = element_blank(),\n    panel.grid = element_blank(),\n    axis.ticks.y = element_blank(),    \n    plot.title = element_markdown(hjust=0),\n    plot.subtitle = element_markdown(hjust = 0),\n    strip.text.x = element_text(hjust = 0.5, margin=margin(l=0), face =\"bold\"),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n        plot.margin = unit(c(0, 0, 0, 0), \n                                \"inches\")\n)  +\n    annotate(\"text\", \n             x = 6, \n             y =2.5, \n             label = paste(\"53%\"),\n             color=\"#f5347f\",\n             size = 10)\n\n\n\n\n\nIn the example above, the waffle charts efficiently convey parts of a whole using 2 colours to represent the proportion of students who performed above and below average.\nClarity\n\nAnnotation: The annotation indicates the proportion of students who scored above the average scores, eliminating the need for manual counting of filled squares.\nFacet Wrap: The use of facet wrap helps divide a plot into a matrix of panels, with each panel showing a distinct subset of the data.\n\nAesthetic\n\nColours: The pink and grey colour combination serves to differentiate the contribution of students who performed above and below the average subject mean score. Each square represents a percentage point, totaling 100. The muted grey tone aims to avoid drawing excessive attention while still visually representing the full extent of the chart, allowing for a clear visualisation of proportion. In the first example, the use of multiple colours was incorporated to reflect the number of categories. Furthermore, the colour gradient helps indicate the order of variables, with intensity increasing accordingly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-the-data",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "3.1 Step 1: The Data",
    "text": "3.1 Step 1: The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\nThe code chunk below is used to import eventlog.csv file into R as a data frame attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-examining-the-data-structure",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-examining-the-data-structure",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "3.2 Step 2: Examining the data structure",
    "text": "3.2 Step 2: Examining the data structure\nkable() can be used to review the structure of the imported data frame.\n\n\nShow the code\nkable(head(attacks))\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-data-preparation",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "3.3 Step 3: Data Preparation",
    "text": "3.3 Step 3: Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function (ts, sc, tz) {\n    # convert each time with the appropriate timezone,\n    # the timezone parameter, tz, only takes a single value,\n    # then extract its weekdays and hour  \n  real_times &lt;- ymd_hms(ts,\n                        tz = tz[1],     #&lt;&lt; for group by tz later, simply use the first tz value of groupby\n                        quiet = TRUE)\n  \n  dt &lt;- data.table(source_country = sc,\n                   wkday= weekdays(real_times),\n                   hour = hour(real_times))\n  return (dt)\n}\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\nStep 2: Deriving the attacks tibble data frame\n\n# convert weekday and hour into factor so they'll be ordered when plotting\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(wkday, levels = wkday_levels),\n         hour = factor(hour, levels = 0:23))  #&lt;&lt; 24 hrs \n\n\nExplanation of the code chunk above\n\ntz refers to the tz column of the attacks dataframe.\ntz[1] selects the first element of the tz column within each group.\nThe group_by(tz) statement groups the data based on unique values in the tz column.\nThe do() function is used to apply the make_hr_wkday function to each group of the grouped dataframe.\nWithin the make_hr_wkday function, tz[1] is used to specify the time zone for the conversion of the timestamps within each group. Since each group has the same time zone value, using tz[1] ensures that the function uses the correct time zone for each group.\n\nBy grouping the attacks dataframe by the tz column and applying the make_hr_wkday function within each group, the resulting dataframe will contain the source country, weekday, and hour columns based on the timestamp, source country, and time zone information, grouped by the unique time zones in the tz column of the attacks dataframe.\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting.\n\nTable below shows the tidy tibble table after processing.\n\n\nShow the code\nkable(head(attacks))\n\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-building-the-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-building-the-calendar-heatmaps",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "3.4 Step 4: Building the Calendar Heatmaps",
    "text": "3.4 Step 4: Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;% \n  na.omit()\n\nggplot(grouped,\n       aes(hour,\n           wkday,\n           fill = n)) +\n  geom_tile(color = 'white',  #&lt;&lt;&lt; border color and line size of tiles\n            size= 0.1) +\n  theme_tufte(base_family = 'Helvetica') + #&lt;&lt; to remove unneccessary graph features\n  coord_equal() + #&lt;&lt; asp ratio of 1:1\n  \n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust=0.5, family = \"Bold\"),\n      axis.title.x = element_blank(),\n      axis.title.y = element_text(hjust=1, angle=0),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size=6),\n      #legend.key.size = unit(1,\"line\"),\n      plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n      legend.background = element_rect(fill=\"#f5f5f5\"),\n      panel.background = element_rect(fill=\"#f5f5f5\")\n      )\n\n\n\n\n\nExplanation of the code chunk above\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\ncount() is use to count the number of records for each pair of wkday and hour\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "3.5 Building Multiple Calendar Heatmaps",
    "text": "3.5 Building Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(attacks, source_country) %&gt;% #&lt;&lt; Count the observations of a country\n  mutate(percent = percent(n/sum(n))) %&gt;% \n  arrange(desc(n))   #&lt;&lt; arranged from largest to smallest count of attacks\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\nFirst, prepare vector of top 4 country names:\n\ntop4 &lt;- attacks_by_country$source_country[1:4] #&lt;&lt; Top 4 countries \nsummary(top4)\n\n   Length     Class      Mode \n        4 character character \n\ntop4\n\n[1] \"CN\" \"US\" \"KR\" \"NL\"\n\n\nWe can achieve the same thing using top_n():\n\ntop4 &lt;- attacks_by_country %&gt;%  top_n(4, wt= n) %&gt;% pull(source_country)\n\nNext, create top4_attacks dataframe by using ‘top4’ list to filter ‘attacks’ dataframe.\nThis is more reproducible than manually listing the countries to filter, eg filter(source_country %in% c('CN', 'US', 'KR', 'NL')).\n\ntop4_attacks &lt;- attacks %&gt;% \n  filter(source_country %in% top4) %&gt;% \n  count(source_country, wkday,hour) %&gt;% \n  ungroup() %&gt;% \n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;% \n  na.omit()\n\n\n‘top4_attacks’ dataframe is similar to ‘grouped’ dataframe, except that it has one more column called ‘source_country’. This additional column will be useful for faceting later.\n\nStep 3: Plotting Multiple Calendar Heatmaps using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"Number of Attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6),\n        legend.position = \"bottom\",\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"),\n        panel.border = element_blank(),\n\n      )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "4.1 Step 1: Data Import",
    "text": "4.1 Step 1: Data Import\nThe dataset arrivals_by_air.xlsx will be used. The code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\nair %&gt;% \n  head(5) %&gt;% \n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonth-Year\nRepublic of South Africa\nCanada\nUSA\nBangladesh\nBrunei\nChina\nHong Kong SAR (China)\nIndia\nIndonesia\nJapan\nSouth Korea\nKuwait\nMalaysia\nMyanmar\nPakistan\nPhilippines\nSaudi Arabia\nSri Lanka\nTaiwan\nThailand\nUnited Arab Emirates\nVietnam\nBelgium & Luxembourg\nCIS\nFinland\nFrance\nGermany\nIreland\nItaly\nNetherlands\nSpain\nSwitzerland\nUnited Kingdom\nAustralia\nNew Zealand\n\n\n\n\n2000-01-01\n3291\n5545\n25906\n2883\n3749\n33895\n13692\n19235\n65151\n59288\n21457\n507\n27472\n1177\n2150\n8404\n1312\n3922\n15766\n12048\n1318\n1527\n1434\n2703\n1634\n4752\n12739\n1292\n3544\n4962\n925\n3731\n28986\n34616\n5034\n\n\n2000-02-01\n2357\n6120\n28262\n2469\n3236\n34344\n19870\n18975\n37105\n58188\n19634\n199\n29084\n1161\n2496\n9128\n623\n3988\n24861\n12745\n899\n2269\n1596\n1182\n1297\n6391\n13093\n1200\n2897\n5054\n747\n3980\n35148\n26030\n3938\n\n\n2000-03-01\n4036\n6255\n30439\n2904\n3342\n27053\n17086\n21049\n44205\n74426\n20719\n386\n30504\n1355\n2429\n11691\n1578\n4259\n18767\n16971\n1474\n2034\n1548\n1088\n1220\n5528\n13645\n1368\n2717\n4950\n935\n3576\n36117\n31119\n4668\n\n\n2000-04-01\n4241\n4521\n25378\n2843\n5117\n30464\n22346\n26160\n45480\n49985\n17489\n221\n34478\n1593\n2711\n14141\n705\n6579\n22735\n20397\n1284\n2420\n1592\n1012\n1208\n5544\n13366\n1345\n2512\n4149\n941\n3850\n33792\n34824\n6890\n\n\n2000-05-01\n2841\n3914\n26163\n2793\n4152\n30775\n16357\n35869\n38350\n48937\n19398\n164\n34795\n1397\n2594\n13305\n679\n4625\n18399\n15769\n1042\n1833\n1167\n660\n743\n4225\n10878\n1067\n2205\n3643\n764\n3025\n23377\n33139\n7006\n\n\n\n\n\n\n\nShow the code\nglimpse(air)\n\n\nRows: 240\nColumns: 36\n$ `Month-Year`               &lt;dttm&gt; 2000-01-01, 2000-02-01, 2000-03-01, 2000-0…\n$ `Republic of South Africa` &lt;dbl&gt; 3291, 2357, 4036, 4241, 2841, 2776, 3728, 2…\n$ Canada                     &lt;dbl&gt; 5545, 6120, 6255, 4521, 3914, 3487, 4238, 4…\n$ USA                        &lt;dbl&gt; 25906, 28262, 30439, 25378, 26163, 28179, 2…\n$ Bangladesh                 &lt;dbl&gt; 2883, 2469, 2904, 2843, 2793, 3146, 3489, 3…\n$ Brunei                     &lt;dbl&gt; 3749, 3236, 3342, 5117, 4152, 5018, 5026, 6…\n$ China                      &lt;dbl&gt; 33895, 34344, 27053, 30464, 30775, 26720, 3…\n$ `Hong Kong SAR (China)`    &lt;dbl&gt; 13692, 19870, 17086, 22346, 16357, 18133, 2…\n$ India                      &lt;dbl&gt; 19235, 18975, 21049, 26160, 35869, 31314, 2…\n$ Indonesia                  &lt;dbl&gt; 65151, 37105, 44205, 45480, 38350, 47982, 5…\n$ Japan                      &lt;dbl&gt; 59288, 58188, 74426, 49985, 48937, 53798, 6…\n$ `South Korea`              &lt;dbl&gt; 21457, 19634, 20719, 17489, 19398, 17522, 2…\n$ Kuwait                     &lt;dbl&gt; 507, 199, 386, 221, 164, 440, 1943, 2694, 4…\n$ Malaysia                   &lt;dbl&gt; 27472, 29084, 30504, 34478, 34795, 34660, 2…\n$ Myanmar                    &lt;dbl&gt; 1177, 1161, 1355, 1593, 1397, 1715, 1354, 1…\n$ Pakistan                   &lt;dbl&gt; 2150, 2496, 2429, 2711, 2594, 2924, 4001, 3…\n$ Philippines                &lt;dbl&gt; 8404, 9128, 11691, 14141, 13305, 10555, 968…\n$ `Saudi Arabia`             &lt;dbl&gt; 1312, 623, 1578, 705, 679, 2749, 5748, 4012…\n$ `Sri Lanka`                &lt;dbl&gt; 3922, 3988, 4259, 6579, 4625, 4740, 4764, 5…\n$ Taiwan                     &lt;dbl&gt; 15766, 24861, 18767, 22735, 18399, 21042, 2…\n$ Thailand                   &lt;dbl&gt; 12048, 12745, 16971, 20397, 15769, 17217, 1…\n$ `United Arab Emirates`     &lt;dbl&gt; 1318, 899, 1474, 1284, 1042, 1545, 3641, 33…\n$ Vietnam                    &lt;dbl&gt; 1527, 2269, 2034, 2420, 1833, 2480, 2221, 2…\n$ `Belgium & Luxembourg`     &lt;dbl&gt; 1434, 1596, 1548, 1592, 1167, 1170, 1912, 1…\n$ CIS                        &lt;dbl&gt; 2703, 1182, 1088, 1012, 660, 712, 911, 864,…\n$ Finland                    &lt;dbl&gt; 1634, 1297, 1220, 1208, 743, 982, 680, 1029…\n$ France                     &lt;dbl&gt; 4752, 6391, 5528, 5544, 4225, 4047, 5769, 6…\n$ Germany                    &lt;dbl&gt; 12739, 13093, 13645, 13366, 10878, 9054, 10…\n$ Ireland                    &lt;dbl&gt; 1292, 1200, 1368, 1345, 1067, 1363, 1348, 1…\n$ Italy                      &lt;dbl&gt; 3544, 2897, 2717, 2512, 2205, 2196, 2988, 6…\n$ Netherlands                &lt;dbl&gt; 4962, 5054, 4950, 4149, 3643, 3544, 5969, 5…\n$ Spain                      &lt;dbl&gt; 925, 747, 935, 941, 764, 855, 1163, 1669, 1…\n$ Switzerland                &lt;dbl&gt; 3731, 3980, 3576, 3850, 3025, 2580, 3656, 2…\n$ `United Kingdom`           &lt;dbl&gt; 28986, 35148, 36117, 33792, 23377, 21769, 2…\n$ Australia                  &lt;dbl&gt; 34616, 26030, 31119, 34824, 33139, 35731, 4…\n$ `New Zealand`              &lt;dbl&gt; 5034, 3938, 4668, 6890, 7006, 7634, 9502, 6…\n\n\nNote that Month-year column is detected as date-time format in R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "4.2 Step 2: Deriving month and year fields",
    "text": "4.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\n\nShow the code\nair$month &lt;- factor(month(air$`Month-Year`),  # extract month\n                    levels = 1:12,  #&lt;&lt; 12 months\n                    ordered= TRUE)\n\nair$year &lt;- year(ymd(air$`Month-Year`))   # extract year"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "4.3 Step 3: Extracting the target country",
    "text": "4.3 Step 3: Extracting the target country\nNext, the code chunk below is use to create dataframe containing the arrival data for Vietnam from 2010 onwards by selecting columns ‘Vietnam’, ’ month’ and ‘year’ from the air dataframe.\n\n\nShow the code\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "4.4 Step 4: Computing year average arrivals by month",
    "text": "4.4 Step 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month for all the years in Vietnam dataframe.\n\n\nShow the code\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "4.5 Step 5: Plotting the cycle plot",
    "text": "4.5 Step 5: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot.\n\n\nShow the code\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=factor(year), \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue),  #&lt;&lt; geom_hline does not require group=month for facet?\n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  ylab(\"No. of Visitors\") +\n  theme(axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.title.x = element_blank(),\n    plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        legend.background = element_rect(fill=\"#f5f5f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")\n      )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "5.1 Step 1: Data Import",
    "text": "5.1 Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\nNotice that ‘year’ column is in the wrong format of number. We should convert it to factor instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "5.2 Step 2: Plotting the slopegraph",
    "text": "5.2 Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\nKey arguments include: - Times: - Measurement: Where the highest values are at the top of the graph. - Grouping:\nSince slopegraph contains information only for two years, we will filter data in 1960 and 1980 only.\nfactor() is used convert the value type of Year field from numeric to factor.\n\n\nShow the code\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Times = Year, \n                  Measurement = Yield, \n                  Grouping = Country,\n                Title = \"Rice Yield of Top 11 Asian Countries\",\n                SubTitle = \"1961-1980\",\n                Caption = \"My VA Prof: Dr. Kam Tin Seong\",\n                DataLabelFillColor = \"#f5f5f5\",) +\n    theme(\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")\n      )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#highlighting-a-country",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#highlighting-a-country",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "5.3 Highlighting a country",
    "text": "5.3 Highlighting a country\nLineColor is simply a character vector that you can fill any way you choose.\n\n\nShow the code\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(2005, 2006, 2007, 2008, 2009, 2010)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Countries\",\n                SubTitle = \"2005 to 2010\",\n                Caption = NULL,\n                LineColor = c(\"#c7c8cc\", \"#c7c8cc\", \"#c7c8cc\", \"#c7c8cc\",\"red\",\"#c7c8cc\",\"#c7c8cc\",\"#c7c8cc\",\"#c7c8cc\",\"#c7c8cc\"),      \n                DataLabelFillColor = \"#f5f5f5\",) +\n    theme(\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")\n      ) \n\n\n\n\n\nAssigning by country name is much clearer!\n\n\nShow the code\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(2005, 2006, 2007, 2008, 2009, 2010)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Countries\",\n                SubTitle = \"2005 to 2010\",\n                Caption = NULL,\n                LineColor = c(\"Korea\" = \"#e0218a\", \"Thailand\" = \"#FFBC2F\"),\n                DataLabelFillColor = \"#f5f5f5\",) +\n    theme(\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")\n      )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-packages",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "2.1 Loading Packages",
    "text": "2.1 Loading Packages\nIn this exercise, we will be using the following packages:\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\ntidyverse\nA collection of core packages designed for data science, used extensively for data preparation and wrangling.\n\n\nlubridate\nFor manipulating date-times.\n\n\njanitor\nFor quick formatting of dataframe columns.\n\n\nfs\nFor retrieve a list of file names in our directory for import into R.\n\n\nDT, knitr and kableExtra\nFor building tables.\n\n\nplotly, ggiraph\nTo create interactive plots.\n\n\nggridges\nFor creating ridgeline plots; useful for visualising changes in distributions over time/space.\n\n\ngganimate\nExtends the grammar of graphics to include the description of animation.\n\n\npatchwork\nFor plot composition in R.\n\n\n\nThe following code chunk uses p_load() of pacman package to check if the aforementioned packages are installed in the computer. If they are, the libraries will be called into R.\n\npacman::p_load(tidyverse, lubridate, janitor, fs,\n               knitr, kableExtra, dt, \n               plotly, ggiraph,\n               ggridges, gganimate, patchwork)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#the-data",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "2.2 The Data",
    "text": "2.2 The Data\nThe data for this analysis comes from Meteorological Service Singapore (MSS), who collects and maintains long-term records on Singapore’s weather. The information collected includes daily total rainfall and maximum temperature, broken down into daily readings since 1980. The readings are captured by 5 staffed weather stations (including the climate station at Changi Airport), nearly 100 automated weather stations, spread throughout the landscape of Singapore.\nBefore deciding on a weather station for analysis, it’s crucial to check Station Records to ascertain the available records at a given point in time. For our analysis, we examine the data from the Changi weather station spanning the years 1983, 1993, 2003, 2013, and 2023. This station stands out as the most suitable choice due to its comprehensive mean temperature records, dating all the way back to January 1982. Located in close proximity to developed residential areas and adjacent to the airport runway, the Changi weather station is deemed representative of a semi-urban environment by the MSS (2023). In contrast, the Tengah weather station is located near the Tengah River and is surrounded by forested areas, making it representative of a rural environment. While the data availability from the Tengah weather station may not be as extensive as that of the Changi weather station, comparing data from both areas could still provide valuable insights.\n\n2.2.1 Data Extraction\n\n\n\n\n\n\n\n\nStep\nDetails\nScreenshot\n\n\n1\nAt the MSS Historical Daily Records page, there are 3 dropdown menus that allow us to select the weather station, month, and year for data extraction. For our study, we will choose Changi from the first dropdown menu.\n\n\n\n2\nFor the 2nd dropdown menu, we will select December to extract daily records from that month.\n\n\n\n3\nIn the third dropdown menu, we will choose the year 2023 for extraction.\n\n\n\n4\nOnce the options have been selected, scroll further down to confirm that the daily records are reflecting the correct weather station and period. You can then proceed to download the files in CSV format.\nRepeat these steps for other weather stations, months, or years as required.\n\n\n\n\n\n\n2.2.2 Importing Dataset\nThe code chunk below loads the necessary files into R environment using the following functions:\n\ndir_ls() function from the fs package in R to list filenames in our directory where we have saved the monthly historical records.\nmap_df() function from the purrr package is used to iterate over each file in the directory.\n\nFor each file, represented by .x, read_csv() is applied with the following arguments:\n\nread_csv() from the readr package reads the first file in the directory and extracts the column names via colnames(), before saving it as a headers vector.\n\nThe locale argument is set to specify the encoding as Latin-1, as some of the headers contain special characters, like the degree symbol (°). The Latin-1 encoding ensures R can read and process such special characters.\ncol_types argument imports all columns as character data type.\n\nclean_names() of the janitor package converts into snake case and transliterates special characters such as the degree symbol (°) to ASCII.\n\n\n# Get the list of filenames\nfilenames &lt;- fs::dir_ls(\"data/\") \n\n# Read all files and clean the column names\ndata &lt;- filenames %&gt;%\n  map_df(~ read_csv(.x, \n                    locale = locale(encoding = \"latin1\"),\n                    col_types = cols(.default = \"character\")\n                    ) %&gt;% \n           janitor::clean_names()\n  ) \n\nglimpse(data)\n\nRows: 549\nColumns: 16\n$ station                     &lt;chr&gt; \"Tengah\", \"Tengah\", \"Tengah\", \"Tengah\", \"T…\n$ year                        &lt;chr&gt; \"1993\", \"1993\", \"1993\", \"1993\", \"1993\", \"1…\n$ month                       &lt;chr&gt; \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6…\n$ day                         &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9…\n$ daily_rainfall_total_mm     &lt;chr&gt; \"6.5\", \"0\", \"0\", \"2.2\", \"8\", \"55.1\", \"0.5\"…\n$ highest_30_min_rainfall_mm  &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ highest_60_min_rainfall_mm  &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ highest_120_min_rainfall_mm &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ mean_temperature_c          &lt;chr&gt; \"27.4\", \"29.1\", \"29.5\", \"28.7\", \"27.4\", \"2…\n$ maximum_temperature_c       &lt;chr&gt; \"32.6\", \"33.8\", \"33.1\", \"33.3\", \"32.4\", \"3…\n$ minimum_temperature_c       &lt;chr&gt; \"24.6\", \"25.1\", \"26.6\", \"24.8\", \"22.9\", \"2…\n$ mean_wind_speed_km_h        &lt;chr&gt; \"6.3\", \"7.7\", \"9.8\", \"7.2\", \"8.8\", \"5.7\", …\n$ max_wind_speed_km_h         &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ mean_temperature_a_c        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ maximum_temperature_a_c     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ minimum_temperature_a_c     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\nA quick peep at the data shows that there are two sets of variables for mean, maximum, and minimum temperature records:\n\nmean_temperature_c, maximum_temperature_c, and minimum_temperature_c; and,\nmean_temperature_a_c, maximum_temperature_a_c, and minimum_temperature_a_c\n\nThe records for 2023 are shown in the second set, while the rest of the years are recorded in the first set. To merge the results, we can use coalesce() function to replace the missing values from the first set of variables with the records from the second set.\n\n# Patch in results using the second set of temperature variables\ndata$mean_temperature_c &lt;- coalesce(data$mean_temperature_c, data$mean_temperature_a_c)\ndata$maximum_temperature_c &lt;- coalesce(data$maximum_temperature_c, data$maximum_temperature_a_c)\ndata$minimum_temperature_c &lt;- coalesce(data$minimum_temperature_c, data$minimum_temperature_a_c)\n\n# Remove the now-redundant second set of temperature variables\ndata %&gt;% \n  select(-c(\"mean_temperature_a_c\", \"maximum_temperature_a_c\", \"minimum_temperature_a_c\"))\n\n# A tibble: 549 × 13\n   station year  month day   daily_rainfall_total_mm highest_30_min_rainfall_mm\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;                   &lt;chr&gt;                     \n 1 Tengah  1993  6     1     6.5                     \"\\u0097\"                  \n 2 Tengah  1993  6     2     0                       \"\\u0097\"                  \n 3 Tengah  1993  6     3     0                       \"\\u0097\"                  \n 4 Tengah  1993  6     4     2.2                     \"\\u0097\"                  \n 5 Tengah  1993  6     5     8                       \"\\u0097\"                  \n 6 Tengah  1993  6     6     55.1                    \"\\u0097\"                  \n 7 Tengah  1993  6     7     0.5                     \"\\u0097\"                  \n 8 Tengah  1993  6     8     0                       \"\\u0097\"                  \n 9 Tengah  1993  6     9     0                       \"\\u0097\"                  \n10 Tengah  1993  6     10    0                       \"\\u0097\"                  \n# ℹ 539 more rows\n# ℹ 7 more variables: highest_60_min_rainfall_mm &lt;chr&gt;,\n#   highest_120_min_rainfall_mm &lt;chr&gt;, mean_temperature_c &lt;chr&gt;,\n#   maximum_temperature_c &lt;chr&gt;, minimum_temperature_c &lt;chr&gt;,\n#   mean_wind_speed_km_h &lt;chr&gt;, max_wind_speed_km_h &lt;chr&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03-dataextraction.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03-dataextraction.html",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise - Data Extraction",
    "section": "",
    "text": "This brief post outlines the steps taken to retrieve data from Meteorological Service Singapore as part of Take-home Exercise 3.\nBefore deciding on a weather station for analysis, it’s crucial to check Station Records to ascertain the available records at a given point in time. For instance, mean temperature records for Tengah only began in August 1986, which would not suffice for our exercise requiring data from 1983. Conversely, rainfall records for Tengah are available from January 1980.\n\n\n\nStep #\nDetails\nScreenshot\n\n\n\n\n1"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#inspecting-the-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#inspecting-the-data",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "3.2 Inspecting the Data",
    "text": "3.2 Inspecting the Data\n\n3.2.1 Duplicates Check\nBefore moving on to the next step, let us check for duplicated records to prevent double counting of our results with the help of group_by_all() to detect if there are more than one instance of a row with the same details throughout all the columns.\n\nduplicate &lt;- dailytemp %&gt;% \n  group_by_all() %&gt;% \n  filter(n()&gt;1) %&gt;% \n  ungroup()\n  \nduplicate\n\n# A tibble: 0 × 8\n# ℹ 8 variables: station &lt;fct&gt;, year &lt;ord&gt;, month &lt;ord&gt;, day &lt;int&gt;,\n#   mean_temperature_c &lt;dbl&gt;, maximum_temperature_c &lt;dbl&gt;,\n#   minimum_temperature_c &lt;dbl&gt;, date &lt;date&gt;\n\n\nResults confirm that there are no duplicated records found.\n\n\n3.2.2 Check for Missing Values\nrowSums() and is.na() functions are used to identify rows in the dailytemp dataset which have missing values. kable() of the knitr package displays the results in a simple table.\n\n\nShow the code\ndailytemp[rowSums(is.na(dailytemp)) &gt; 0, ] %&gt;% \n  kable() %&gt;% \n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n                            fixed_thead = T)\n\n\n\n\n\n\nstation\nyear\nmonth\nday\nmean_temperature_c\nmaximum_temperature_c\nminimum_temperature_c\ndate\n\n\n\n\nTengah\n2013\nJun\n2\nNA\n34.7\n25.3\n2013-06-02\n\n\nTengah\n2013\nJun\n4\nNA\n33.3\n23.6\n2013-06-04\n\n\nTengah\n2013\nJun\n5\nNA\n34.3\n23.2\n2013-06-05\n\n\nTengah\n2013\nJun\n6\nNA\n34.5\n24.2\n2013-06-06\n\n\nTengah\n2013\nJun\n7\nNA\n35.0\n23.5\n2013-06-07\n\n\nTengah\n2013\nJun\n8\nNA\n33.9\n23.8\n2013-06-08\n\n\nTengah\n2013\nJun\n9\nNA\n31.0\n24.7\n2013-06-09\n\n\nTengah\n2013\nJun\n10\nNA\n32.5\n24.0\n2013-06-10\n\n\nTengah\n2013\nJun\n11\nNA\n33.2\n24.5\n2013-06-11\n\n\nTengah\n2013\nJun\n12\nNA\n33.3\n25.5\n2013-06-12\n\n\nTengah\n2013\nJun\n14\nNA\n33.3\n24.7\n2013-06-14\n\n\nTengah\n2013\nJun\n18\nNA\n34.9\n23.6\n2013-06-18\n\n\nTengah\n2013\nJun\n30\nNA\n29.3\n23.5\n2013-06-30\n\n\nTengah\n2023\nDec\n16\nNA\nNA\nNA\n2023-12-16\n\n\nTengah\n2023\nDec\n17\nNA\nNA\nNA\n2023-12-17\n\n\nTengah\n2023\nDec\n18\nNA\nNA\nNA\n2023-12-18\n\n\nTengah\n2023\nDec\n19\nNA\nNA\nNA\n2023-12-19\n\n\nTengah\n2023\nDec\n20\nNA\nNA\nNA\n2023-12-20\n\n\nTengah\n2023\nDec\n21\nNA\nNA\nNA\n2023-12-21\n\n\nTengah\n2023\nDec\n22\nNA\nNA\nNA\n2023-12-22\n\n\nTengah\n2023\nDec\n23\nNA\nNA\nNA\n2023-12-23\n\n\nTengah\n2023\nDec\n24\nNA\nNA\nNA\n2023-12-24\n\n\nTengah\n2023\nDec\n25\nNA\nNA\nNA\n2023-12-25\n\n\nTengah\n2023\nDec\n26\nNA\nNA\nNA\n2023-12-26\n\n\nTengah\n2023\nDec\n27\nNA\nNA\nNA\n2023-12-27\n\n\nTengah\n2023\nDec\n28\nNA\nNA\nNA\n2023-12-28\n\n\nTengah\n2023\nDec\n29\nNA\nNA\nNA\n2023-12-29\n\n\nTengah\n2023\nDec\n30\nNA\nNA\nNA\n2023-12-30\n\n\nTengah\n2023\nDec\n31\nNA\nNA\nNA\n2023-12-31\n\n\n\n\n\n\n\n\nA quick check on the Meteorological Service Singapore site confirms that the Tengah temperature data for the NA fields were indeed unavailable. Given this confirmation, I propose we drop the rows from the later half of Dec 2023 where mean, minimum, and maximum temperatures are all unavailable, as they offer limited value to our analysis. However, I suggest preserving the rows from June 2013 for now, as they contain recorded minimum and maximum temperatures.\nTo do that, incorporating if_all() function within filter() retains only the rows where all three specified columns (mean_temperature_c, maximum_temperature_c, and minimum_temperature_c) do not contain NA values simultaneously.\n\ndailytemp &lt;- dailytemp %&gt;% \n  filter(\n    !if_all(\n      c(mean_temperature_c, \n      maximum_temperature_c,\n      minimum_temperature_c), \n    is.na))\n\n\n\n3.2.3 Our Final Dataset"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#section",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#section",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "3.2",
    "text": "3.2\n\n\n\n\nflowchart TD\n    A[MSS Temperature Records] --&gt; A1[Across Years]\n    A --&gt; A2[Urban vs Rural]\n    A --&gt; A3[Seasons]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#exploring-the-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#exploring-the-data",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "3.1 Exploring the Data",
    "text": "3.1 Exploring the Data\nglimpse() provides a quick overview of the variables and their respective the data types.\n\nglimpse(data)\n\nRows: 549\nColumns: 16\n$ station                     &lt;chr&gt; \"Tengah\", \"Tengah\", \"Tengah\", \"Tengah\", \"T…\n$ year                        &lt;chr&gt; \"1993\", \"1993\", \"1993\", \"1993\", \"1993\", \"1…\n$ month                       &lt;chr&gt; \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6…\n$ day                         &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9…\n$ daily_rainfall_total_mm     &lt;chr&gt; \"6.5\", \"0\", \"0\", \"2.2\", \"8\", \"55.1\", \"0.5\"…\n$ highest_30_min_rainfall_mm  &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ highest_60_min_rainfall_mm  &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ highest_120_min_rainfall_mm &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ mean_temperature_c          &lt;chr&gt; \"27.4\", \"29.1\", \"29.5\", \"28.7\", \"27.4\", \"2…\n$ maximum_temperature_c       &lt;chr&gt; \"32.6\", \"33.8\", \"33.1\", \"33.3\", \"32.4\", \"3…\n$ minimum_temperature_c       &lt;chr&gt; \"24.6\", \"25.1\", \"26.6\", \"24.8\", \"22.9\", \"2…\n$ mean_wind_speed_km_h        &lt;chr&gt; \"6.3\", \"7.7\", \"9.8\", \"7.2\", \"8.8\", \"5.7\", …\n$ max_wind_speed_km_h         &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ mean_temperature_a_c        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ maximum_temperature_a_c     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ minimum_temperature_a_c     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\nOur dataset has 549 observations (rows) and 13 variables (columns), including:\n\nStation: indicates the name of the weather station which the records are taken from.\nYear, Month, Day: indicates the date which record pertains to.\nRainfall records: Daily Rainfall Total (mm), Highest 30 Min Rainfall (mm), Highest 60 Min Rainfall (mm), Highest 120 Min Rainfall (mm)\nTemperature records: Mean Temperature (°C), Maximum Temperature (°C), Minimum Temperature (°C)\nWindspeed records: Mean Wind Speed (km/h), Max Wind Speed (km/h)\n\n\nAction Points:\n\nSince the focus of our analysis is on temperature changes, we can drop the the rainfall- and windspeed-related records.\nStation should be in factor datatype.\nYear, Month, Day columns can be combined to form a date column in the datetime datatype.\nmean_temperature_c, maximum_temperature_c, minimum_temperature_c should be in numerical format.\n\n\nThe code chunk below performs the following tasks:\n\nselect() is used to retain variables of interest\nmutate():\n\nConverts station to factor datatype using as.factor().\nCombines separate year, month, and date columns into a single date column in Date data type using make_date() from the lubridate package.\nConverts year and month to ordinal factor data type via factor().\nShows month as ordinal factor using month() from lubridate package\nConverts temperature variables to numeric data types.\n\n\n\ndailytemp &lt;- data %&gt;% \n  select(station, year, month, day, mean_temperature_c, maximum_temperature_c, minimum_temperature_c) %&gt;% \n  mutate(station = as.factor(station),\n         date = make_date(year = year, month = month, day = day),\n         year = factor(year(date), \n                       ordered = TRUE, \n                       levels = c(\"1983\", \"1993\", \"2003\", \"2013\", \"2023\")),\n         month = lubridate::month(date, label = TRUE),         \n         day = day(date),\n         mean_temperature_c = as.numeric(mean_temperature_c), \n         maximum_temperature_c = as.numeric(maximum_temperature_c), \n         minimum_temperature_c = as.numeric(minimum_temperature_c)) \n\nRun glimpse() again to check the results of our code and to ensure that the changes made are according to expectations.\n\nglimpse(dailytemp)\n\nRows: 549\nColumns: 8\n$ station               &lt;fct&gt; Tengah, Tengah, Tengah, Tengah, Tengah, Tengah, …\n$ year                  &lt;ord&gt; 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, …\n$ month                 &lt;ord&gt; Jun, Jun, Jun, Jun, Jun, Jun, Jun, Jun, Jun, Jun…\n$ day                   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ mean_temperature_c    &lt;dbl&gt; 27.4, 29.1, 29.5, 28.7, 27.4, 26.8, 27.1, 29.3, …\n$ maximum_temperature_c &lt;dbl&gt; 32.6, 33.8, 33.1, 33.3, 32.4, 33.0, 33.0, 33.8, …\n$ minimum_temperature_c &lt;dbl&gt; 24.6, 25.1, 26.6, 24.8, 22.9, 23.7, 21.5, 23.7, …\n$ date                  &lt;date&gt; 1993-06-01, 1993-06-02, 1993-06-03, 1993-06-04,…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#dumbbell-plot-for-minmax-temperatures-by-season-and-year",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#dumbbell-plot-for-minmax-temperatures-by-season-and-year",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.2 Dumbbell Plot for min/max temperatures by season and year",
    "text": "4.2 Dumbbell Plot for min/max temperatures by season and year\nFacet by season y axis = year x-axis = temp\n\nmonthlytemp &lt;- dailytemp %&gt;% \n  mutate(yrmth = as.factor(paste0(month, \" \", year))) %&gt;% \n  group_by(station, yrmth) %&gt;% \n  summarise(meantemp = mean(mean_temperature_c),\n            maxtemp = max(maximum_temperature_c),\n            mintemp = min(minimum_temperature_c)) %&gt;% \n  ungroup() \n  \nmonthlytemp$yrmth &lt;- factor(monthlytemp$yrmth, levels = c(\"Jun 1983\", \"Dec 1983\", \n                                                          \"Jun 1993\", \"Dec 1993\",\n                                                          \"Jun 2003\", \"Dec 2003\", \n                                                          \"Jun 2013\", \"Dec 2013\", \n                                                          \"Jun 2023\", \"Dec 2023\"))\n\n\n\nShow the code\nplot_ly(monthlytemp) %&gt;% \n  add_segments(x = ~mintemp,\n               xend = ~maxtemp,\n               y = ~yrmth,\n               yend = ~yrmth,\n               showlegend = FALSE) %&gt;% \n add_markers(x = ~mintemp, \n             y = ~yrmth, \n             name = \"Min\", \n             color = I(\"#206280\")) %&gt;% \n add_markers(x = ~maxtemp, \n             y = ~yrmth, \n             name = \"Max\", \n             color = I(\"#c71e1d\")) %&gt;% \n layout(\n    title = \"Temperature Disparity\",\n    xaxis = list(title = \"Temperature in Celcius\"),\n    yaxis = list(title = \"Periods\"),\n    margin = list(l = 70)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#calendar-heatmap-by-season-and-year",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#calendar-heatmap-by-season-and-year",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.3 Calendar Heatmap by Season and Year",
    "text": "4.3 Calendar Heatmap by Season and Year"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#installing-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#installing-launching-r-packages",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Installing & Launching R Packages",
    "text": "Installing & Launching R Packages\nFor this exercise, the scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse packages will be used.\n\npacman::p_load(scales, viridis, lubridate, \n               ggthemes, gridExtra, readxl, \n               knitr, data.table, \n               CGPfunctions, ggHoriPlot, \n               tidyverse, ggHoriPlot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#distribution-of-daily-mean-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#distribution-of-daily-mean-temperature",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.1 Distribution of Daily Mean Temperature",
    "text": "4.1 Distribution of Daily Mean Temperature\nWe will first visualise the distribution of daily mean temperatures using a histogram and a boxplot to determine the variation of values across the sample population.\n\nPlotNormality Test\n\n\n\n\nShow the code\n# Computing summary statistics of mean, median and lower and upper whiskers in boxplot\nmeantemp &lt;- round(mean(dailytemp$mean_temperature_c, na.rm = TRUE), digits=1)\nmediantemp &lt;- round(median(dailytemp$mean_temperature_c, na.rm=TRUE), digits=1)\nmintemp &lt;- round(min(dailytemp$mean_temperature_c, na.rm=TRUE), digits=1)\nmaxtemp &lt;- round(max(dailytemp$mean_temperature_c, na.rm=TRUE), digits=1)\nleftwhisk_temp &lt;- round(quantile(dailytemp$mean_temperature_c, probs = .25, na.rm=TRUE)-1.5*IQR(dailytemp$mean_temperature_c, na.rm=TRUE),1)\n\n# Histogram\nhist_temp &lt;- \n  ggplot(data = dailytemp, \n         aes(x = mean_temperature_c)) + \n  geom_histogram(color=\"#f5f5f5\", \n                 fill=\"#c7c8cc\") + \n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    \n    # Set same limits for both plots for consistency\n    limits = c(22,31),\n                     ) +\n  labs(x = \"Mean Temperature in Celcius\", \n       y = \"No. of Occurrences\") +\n\n  geom_vline(\n             aes(xintercept = meantemp), \n             col=\"#e0218a\", \n             linewidth=0.7,\n             linetype = \"dashed\") +\n  annotate(\"text\", x=meantemp+1, \n           y=55, \n           label= paste0(\"Mean Temp: \", meantemp), \n           size=3, \n           color=\"#e0218a\") +\n  geom_vline(aes(xintercept = mediantemp), \n            colour=\"#595DE5\", \n            linewidth = 0.7, \n            linetype = \"dashed\") +\n  annotate(\"text\", \n           x=mediantemp-1.2, \n           y=55, \n           label = paste0(\"Median Temp: \", mediantemp),\n           color=\"#595DE5\",\n           size=3\n           ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(size=8),\n        #axis.text.y = element_blank(),\n        panel.grid.major = element_blank(),\n        plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n        )\n\n# Boxplot\nbox_temp &lt;- \n  ggplot(data = dailytemp, \n         aes(y = mean_temperature_c,\n             x=\"\")) + \n  geom_boxplot(fill=\"#c7c8cc\",\n               outlier.colour=\"#d18a7d\", \n               outlier.shape=16,\n               outlier.size=2, \n               notch=FALSE) + \n  stat_summary(geom = 'point',\n               fun.y='mean',\n               colour = '#e0218a',\n               size=4) +  \n  coord_flip() + \n  scale_y_continuous(limits = c(22, 31),\n                     ) +\n  labs(\n    title = \"Daily mean temperatures not normally distributed\",\n    subtitle = \"Histogram reveals multiple peaks and troughs\",    \n    y = \"\",\n    x = \"\")+\n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(), \n        xis.ticks.x=element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        panel.grid.major = element_blank(),\n        plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")) + \n  \n  theme_minimal() +\n  \n  stat_boxplot(geom=\"errorbar\", \n               width=0.5) + \n  \n  #Annotate outlier\n  annotate(\n    geom = \"text\", \n    x = 0.5, \n    y = mintemp,\n    label = paste0(mintemp),\n    color = \"#d18a7d\",\n    size=3\n  ) \n\n# Combining plots\nhbox_temp &lt;- (box_temp / hist_temp) + \n  plot_layout(heights = c(1, 4)) \n\nhbox_temp & theme(plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\nWe can confirm our visual interpretation from the histogram by performing a normality assumption test with the following null hypothesis:\n\\[H_0: Daily\\ mean\\ temperatures\\ are\\ normally\\ distributed.\\]\n\nad.test(dailytemp$mean_temperature_c)\n\n\n    Anderson-Darling normality test\n\ndata:  dailytemp$mean_temperature_c\nA = 1.5219, p-value = 0.0006335\n\n\nThe results of the Anderson-Darling normality test above suggests sufficient statistical evidence to reject the null hypothesis at 95% confidence level.\nGiven that daily mean temperatures do not conform to a normal distribution, we will need to use non-parametric statistical analysis methods going forward."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#are-there-differences-in-mean-temperatures-across-locations-seasons-and-time",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#are-there-differences-in-mean-temperatures-across-locations-seasons-and-time",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.2 Are there differences in mean temperatures across locations, seasons, and time?",
    "text": "4.2 Are there differences in mean temperatures across locations, seasons, and time?\nThe following plot offers a visual representation of daily mean temperatures distribution across key variables. It combines three essential components: a violin plot, boxplot, and dot plot. The violin plot captures the distribution’s shape and density, providing insights into its overall pattern. The boxplot provides a summary of central tendency, spread, and identifies any outliers. Lastly, the dot plot displays individual data points, allowing for a detailed examination of specific values or patterns within the data. Together, these components offer a comprehensive view of the data distribution.\nConsiderations for Visual and Interactivity\n\nThe dropdown menu allows users to select variables for the x-axis, enabling focused exploration.\nTooltips provide access to statistical descriptions such as mean, median, and range when hovering over the box-violin plot.\nPlot can be zoomed-in or out to analyse the jitters. Tip: a quick double click on the plot enables zoom out.\nA red mean line enhances visibility.\nDots are rendered with low opacity to visualise density at each temperature.\nThe use of spanmode = hard ensures that the violin plot spans the actual data range, preventing distortion and ensuring accurate representation.\n\n\n\nShow the code\n# Initiate base plot\nplot_ly(data = dailytemp,\n        x = ~ station,\n        y = ~mean_temperature_c,\n        #hoveron = \"points+kde\",\n        line = list(width=1),\n        type = \"violin\",\n        spanmode = 'hard',\n        marker = list(opacity = 0.5,\n                      line = list(width = 2)),\n        box = list(visible = T),\n        points = 'all',\n        scalemode = 'count',\n        meanline = list(visible = T,\n                        color = \"red\"),\n        color = I('#caced8'),\n        marker = list(\n          line = list(\n            width = 2,\n            color = '#caced8'\n          ),\n          symbol = 'line-ns'\n        )\n        ) %&gt;% \n\n# Cosmetic edits  \n  layout(title = \"&lt;b&gt;Mean Temperatures across locations, seasons, and over time.&lt;/b&gt;\",\n         xaxis = list(title = \"\", \n                      autotypenumbers='strict'),\n         yaxis = list(title = \"Temperature (°C)\"),\n         plot_bgcolor = \"#f5f5f5\",\n         paper_bgcolor = \"#f5f5f5\",\n\n# Dropdown menu options                  \n         updatemenus = list(list(type = 'dropdown',\n                                 xref = \"paper\",\n                                 yref = \"paper\",\n                                 xanchor = \"left\",\n                                 x = 0.84, \n                                 y = 1.0,\n                                 buttons = list(\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$station)),\n                                                    list(xaxis = list(categoryorder = \"category ascending\"))),\n                                        label = \"Urban/Rural\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$month)),\n                                                    list(xaxis = list(categoryorder = \"category descending\"))),\n                                        label = \"Season\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$year)),\n                                                    list(xaxis = list(categoryorder = \"category ascending\"))),\n                                        label = \"Year\")\n                              \n                                   )\n                                 )\n                            )\n         )         \n\n\n\n\n\n\n\nInsights:\n\nTemperature comparisons between urban (Changi) and rural areas (Tengah) show a notable difference in temperature range. In Changi, daily mean temperatures ranged from 23° to 30.5° Celsius, while in Tengah, the range was narrower, from 24.3°C to 29.9°C. Mean and median temperatures were similar between the two locations, with Tengah slightly cooler by approximately 0.2°C.\nAnalysis of wet and dry seasons indicates a significant difference in mean and median temperatures. Temperatures during the wet season (December) were higher than during the dry season (June). However, it’s important to note missing data from Tengah during the latter half of December 2023, which may affect the reliability of these observations.\nWhen plotted by year, noticeable trends emerge. In 1983, there was high variability in mean temperatures, spanning 7°C. Subsequent years showed narrower ranges, with 2023 having a range of 4.7°C. Overall, there is a slight upward trend in mean and median temperatures over the years, with a median increase of 0.8°C from 1983 to 2023."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#visualising-uncertainty",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#visualising-uncertainty",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.2 Visualising Uncertainty",
    "text": "4.2 Visualising Uncertainty\nA Tufte-style weather chart is used to convey the average temperature over a period time, alongside the historical maximum and minimum range, as well as the 95% confidence interval for the mean temperature. The 2-way facet aims to provide a comprehensive visualisation of three variables simultaneously.\n\nConsiderations for Visual and Interactivity\n\nMean temperatures for the period are represented by a single point on the chart, connected by a line to illustrate the trend over time.\nCustomised tooltips provide users with key statistics such as the number of recorded days, mean temperature, calculated standard error, and minimum and maximum temperatures, ehnhancing interactive exploration.\nThe bright yellow zone surrounding the geom_line signifies the uncertainty in predicting monthly mean temperatures. Its width is determined by the 95% confidence interval, chosen as an acceptable level of risk for analysis. If higher risks were involved, the zone’s width would need to be increased accordingly.\nPale yellow areas depict the range of temperatures according to the minimum and maximum temperature, offering additional context to the visualisation.\n\n\n\nmonthlytemp &lt;- dailytemp %&gt;% \n  na.omit() %&gt;% \n  group_by(station, month, year) %&gt;% \n  summarise(n = n(),\n            mean = mean(mean_temperature_c),\n            max = max(maximum_temperature_c), # identify max value for each month per station\n            min = min(minimum_temperature_c), # identify min value for each month per station\n            sd = sd(minimum_temperature_c)) %&gt;% # calculate standard deviation for each month per station\n  mutate(\n         se = sd/sqrt(n-1), # calculate standard error of mean\n               avg_upper = mean+(1.96*se),  # calculate 95% CI for mean\n               avg_lower = mean-(1.96*se),\n         yrmth = as.factor(paste0(month, \" \", year))) %&gt;%  # calculate 95% CI for mean\n  ungroup() \n\nmonthlytemp$yrmth &lt;- factor(monthlytemp$yrmth, levels = c(\"Jun 1983\", \"Dec 1983\", \n                                                          \"Jun 1993\", \"Dec 1993\",\n                                                          \"Jun 2003\", \"Dec 2003\", \n                                                          \"Jun 2013\", \"Dec 2013\", \n                                                          \"Jun 2023\", \"Dec 2023\"))\n\n\n\nShow the code\nmonthlytemp$tooltip2 &lt;- c(paste0(\"Station: \", monthlytemp$station,\n                              \"\\nPeriod: \", monthlytemp$yrmth,                                 \n                              \"\\nDays Recorded: \", monthlytemp$n,\n                              \"\\nMean Temp (with standard error): \",  round(monthlytemp$mean, 1), \"°\", \n                              \"+/-\",  round(monthlytemp$se,1) ,\"°\",\n                              \"\\nMax Temp: \", monthlytemp$max, \"°\",\n                              \"\\nMin Temp: \", monthlytemp$min, \"°\"))\n\n# Style tooltip\ntooltip_css &lt;- \"background-color:#3E4254; font-style:bold; color:#f5f5f5;\" \n\ntuftedec &lt;- \n  ggplot(monthlytemp[monthlytemp$month==\"Jun\",]) +\n\n# Plot min to max temp\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = min,\n        ymax = max,\n        group = 1),\n    alpha = 0.2,\n    fill=\"wheat2\") +\n  \n# Plot 95% confidence interval\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = avg_lower,\n        ymax = avg_upper,\n        group = 1),\n    alpha = 0.5,\n    fill=\"#d6ac5e\") +  \n\n# Plot mean temp    \n  geom_line(\n    aes(\n    x = yrmth,\n    y = mean,\n    group = 1),\n    color = \"black\",\n    size = 0.8\n  ) +\n  geom_point_interactive(\n    aes(x = yrmth,\n        y= mean,\n        tooltip=tooltip2),\n    size=1.2)+\n  \n  facet_wrap(~station,\n           ncol = 1\n           )+\n  \n  scale_y_continuous(limits = c(20, 37.5),\n                     breaks = seq(20,40, \n                                by=5), \n                   labels = ~ paste0(.x, \"°\")) +\n  theme(\n    panel.grid.major = element_line(colour = \"white\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"white\", linetype = 1, linewidth= 0.5),\n    panel.grid.major.x = element_line(color = \"wheat4\",linetype=3, size=0.5),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    strip.background = element_rect(color=\"#f5f5f5\", fill=\"#f5f5f5\")\n  )\n\ntuftejun &lt;- \n  ggplot(monthlytemp[monthlytemp$month==\"Dec\",]) +\n\n# Plot min to max temp\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = min,\n        ymax = max,\n        group = 1),\n    alpha = 0.2,\n    fill=\"wheat2\") +\n  \n# Plot 95% confidence interval\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = avg_lower,\n        ymax = avg_upper,\n        group = 1),\n    alpha = 0.5,\n    fill=\"#d6ac5e\") +  \n\n# Plot mean temp    \n  geom_line(\n    aes(\n    x = yrmth,\n    y = mean,\n    group = 1),\n    color = \"black\",\n    size = 0.8\n  ) +\n  geom_point_interactive(\n    aes(x = yrmth,\n        y= mean,\n        tooltip=tooltip2),\n    size=1.2)+\n  \n  facet_wrap(~station,\n           ncol = 1\n           )+\n  \n  scale_y_continuous(limits = c(20, 37.5),\n                    breaks = seq(20,40, \n                                by=5), \n                   labels = ~ paste0(.x, \"°\")) +\n  theme(\n    panel.grid.major = element_line(colour = \"white\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"white\", linetype = 1, linewidth= 0.5),\n    panel.grid.major.x = element_line(color = \"wheat4\",linetype=3, size=0.5),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    strip.background = element_rect(color=\"#f5f5f5\", fill=\"#f5f5f5\")\n  )\n\npw &lt;- (tuftedec + tuftejun) +\n  plot_annotation(title = \"Uncertainty of point estimates\",\n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\ngirafe(ggobj = pw,\n       options = list(\n       opts_hover_inv(css = \"stroke-width: 1;opacity:0.6;\"),\n       opts_hover(css = \"fill:cyan; stroke-width: 4; opacity: 1;\")       \n       ))\n\n\n\n\n\n\nInsights:\n\nThe interative line chart illustrates how temperatures changes across seasons and"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "plotting a calender heatmap\nplotting a cycle plot\nplotting a slopegraph\nplotting a horizon chart\n\n\n\n\n\n\n\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)\n\n\n\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nkable() can be used to review the structure of the imported data frame\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\ntimestamp field stores date-time values in POSIXct format\nsource_country field stores the source of attack.\ntz field stores time zone of the source IP address\n\n\n\n\nStep 1: Deriving weekday and hour of dayfields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\nStep 2: Deriving the attacks tibble data frame: put the label for weekday\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nmutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn:\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\nObjective: Building multiple heatmaps for the top four countries with the highest number of attacks\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks,\n\ncount number of attacks by country\ncalculate the percent of attacks by country\nsave the results in a tibble data frame\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the multiple calender heatmap\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\nIn this section, you will learn how to plot a cycle plot showing the time-series pattern and trend of visitor arrivals from vn programmatically\n\n\n\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n\n\n\n\n\n\n\n\n\n\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html#learning-outcome",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "plotting a calender heatmap\nplotting a cycle plot\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html#loading-r-package",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html#loading-r-package",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html#plotting-calender-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html#plotting-calender-heatmap",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "For the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nkable() can be used to review the structure of the imported data frame\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\ntimestamp field stores date-time values in POSIXct format\nsource_country field stores the source of attack.\ntz field stores time zone of the source IP address\n\n\n\n\nStep 1: Deriving weekday and hour of dayfields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\nStep 2: Deriving the attacks tibble data frame: put the label for weekday\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nmutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn:\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\nObjective: Building multiple heatmaps for the top four countries with the highest number of attacks\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks,\n\ncount number of attacks by country\ncalculate the percent of attacks by country\nsave the results in a tibble data frame\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the multiple calender heatmap\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\nIn this section, you will learn how to plot a cycle plot showing the time-series pattern and trend of visitor arrivals from vn programmatically\n\n\n\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex6_AC.html#plotting-slopegraph",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "rice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#no.-of-very-warm-days-34c",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#no.-of-very-warm-days-34c",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.5 No. of very warm days (>= 34°C)",
    "text": "4.5 No. of very warm days (&gt;= 34°C)\nMSS defines very warm days as days when the daily maximum temperature exceeds 34°C.\n\nwarmdays &lt;- dailytemp %&gt;% \n  mutate(warmday = ifelse(maximum_temperature_c &gt;= 34, 1, 0)) %&gt;% \n  group_by(station, year, month) %&gt;% \n  summarise(\n    totaldays = n(),\n    wdays = sum(warmday == 1),\n    pct_warmdays = (sum(warmday)/n())*100) %&gt;% \n  mutate(desc = paste0(station, \" in \", month, \" \", year)) %&gt;% \n  filter(pct_warmdays != 0)\n\n\n\nShow the code\nbar &lt;- ggplot(warmdays,\n              aes(x = reorder(desc, -pct_warmdays),\n                  y = pct_warmdays,\n                  fill = month)\n              ) +\n  geom_bar_interactive(stat = \"identity\",\n           alpha = 0.5,\n           aes(data_id = desc,\n               tooltip = paste0(\n                 \"Station: \", station,\n                 \"\\nYear: \", year,\n                 \"\\nMonth: \", month,\n                 \"\\nTotal Days Recorded: \", totaldays,\n                 \"\\nWarm Days:\", wdays,\n                 \"\\n% of Warm Days Experienced: \", round(pct_warmdays,2), \"%\"\n               ))\n           ) +\n  scale_fill_manual(values = c(\"#a79271\", \"#4d6575\")) +\n  scale_y_continuous(labels = ~ paste0(.x, \"%\"))+  \n  scale_x_discrete(labels = scales::label_wrap(6)) +\n  labs(x = \"\",\n      y = \"\",\n      title=\"Percentage of Warm Days (≥ 34°C)\",\n      fill = \"Month\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    plot.title = element_text(size = 8, hjust = 0.5),  \n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.grid = element_blank(),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    axis.line.y = element_line(),\n    axis.ticks.y = element_line(),\n    axis.text  = element_text(angle=0, vjust=0.5, size=5)\n    ) \n\n\n# Prepare data for boxplot\ndailytemp &lt;- dailytemp %&gt;% \n  group_by(station, month, year) %&gt;% \n  mutate(desc = paste0(station, \" in \", month, \" \", year),\n         tooltip_bp = paste0(\n                 \"Station: \", station,\n                 \"\\nYear: \", year,\n                 \"\\nMonth: \", month,           \n                 \"\\nMedian Temp: \", round(median(maximum_temperature_c), 2), \"°C\",\n                 \"\\nQ1: \", round(quantile(maximum_temperature_c, 0.25), 2), \"°C\",\n                 \"\\nQ3: \", round(quantile(maximum_temperature_c, 0.25), 2), \"°C\",\n                 \"\\nMax Temp: \", round(max(maximum_temperature_c), 2), \"°C\",\n                 \"\\nMin Temp: \", round(min(maximum_temperature_c), 2), \"°C\"\n  )) %&gt;%  \n  ungroup()\n           \n\n# Plot boxplot\nbp &lt;-\n  ggplot(dailytemp, \n  aes(x = maximum_temperature_c,\n      y = reorder(desc, \n                  maximum_temperature_c, \n                  FUN = median),\n      fill = month\n      )) +\n  geom_boxplot_interactive(\n               outlier.shape = NA,\n               alpha = 0.5,\n               aes(data_id = desc,\n                   tooltip = tooltip_bp\n                   )\n                   ) +\n  geom_jitter_interactive(aes(data_id = desc,\n                              color = month,\n                              tooltip = paste0(\n                                \"Station: \", station,\n                                \"\\nDate: \", date,\n                                \"\\nMaximum Temp: \", maximum_temperature_c, \"°C\"\n                              )), \n                              position = position_dodge2(width = 0.75), \n                              size = 0.75,\n                              alpha = 0.55)+\n    scale_fill_manual(values = c(\"#a79271\", \"#4d6575\"))+\n    scale_color_manual(values = c(\"#a79271\", \"#4d6575\"))+\n  scale_x_continuous(labels = ~ paste0(.x, \"°\"))+    \n  labs(x = \"\",\n      y = \"\",\n      title=\"Distribution of Maximum Temperatures\",\n      fill = \"Month\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    plot.title = element_text(size = 8, hjust = 0.5),  \n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.grid = element_blank(),\n    legend.title = element_text(size = 5, face = \"bold\"),\n    legend.text = element_text(size = 6),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    axis.line.x = element_line(),\n    axis.ticks.x = element_line(),\n    axis.text  = element_text(size=5)    \n    )   \n\nggiraph::girafe(code = print(bp + bar),\n                width_svg = 6,\n                height_svg = 6*0.7,\n                options = list(opts_tooltip(css = tooltip_css),\n                               opts_hover(css=\"fill: #fe0569;\"),\n                               opts_zoom(min = 1, \n                                         max = 5)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#are-there-differences-in-mean-and-maximum-temperatures-across-locations-seasons-and-time",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#are-there-differences-in-mean-and-maximum-temperatures-across-locations-seasons-and-time",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.1 Are there differences in mean and maximum temperatures across locations, seasons, and time?",
    "text": "4.1 Are there differences in mean and maximum temperatures across locations, seasons, and time?\nThe following plot offers a visual representation of daily mean temperatures distribution across key variables. It combines three essential components: a violin plot, boxplot, and dot plot. The violin plot captures the distribution’s shape and density, providing insights into its overall pattern. The boxplot provides a summary of central tendency, spread, and identifies any outliers. Lastly, the dot plot displays individual data points, allowing for a detailed examination of specific values or patterns within the data. Together, these components offer a comprehensive view of the data distribution.\nConsiderations for Visual and Interactivity\n\nThe dropdown menu allows users to select variables for the x-axis, enabling focused exploration.\nTooltips provide access to statistical descriptions such as mean, median, and range when hovering over the box-violin plot.\nPlot can be zoomed-in or out to analyse the jitters. Tip: a quick double click on the plot enables zoom out.\nA red mean line enhances visibility.\nDots are rendered with low opacity to visualise density at each temperature.\nThe use of spanmode = hard ensures that the violin plot spans the actual data range, preventing distortion and ensuring accurate representation.\n\n\nDaily Mean TemperatureDaily Maximum Temperature\n\n\n\n\nShow the code\n# Initiate base plot\nplot_ly(data = dailytemp,\n        x = ~ station,\n        y = ~mean_temperature_c,\n        #hoveron = \"points+kde\",\n        line = list(width=1),\n        type = \"violin\",\n        spanmode = 'hard',\n        marker = list(opacity = 0.5,\n                      line = list(width = 2)),\n        box = list(visible = T),\n        points = 'all',\n        scalemode = 'count',\n        meanline = list(visible = T,\n                        color = \"red\"),\n        color = I('#bebada'),\n        marker = list(\n          line = list(\n            width = 2,\n            color = '#bebada'\n          ),\n          symbol = 'line-ns'\n        )\n        ) %&gt;% \n\n# Cosmetic edits  \n  layout(title = \"&lt;b&gt;Mean Temperatures across locations, seasons, and over time.&lt;/b&gt;\",\n         xaxis = list(title = \"\", \n                      autotypenumbers='strict'),\n         yaxis = list(title = \"Temperature in Celcius\"),\n         plot_bgcolor = \"#f5f5f5\",\n         paper_bgcolor = \"#f5f5f5\",\n\n# Dropdown menu options                  \n         updatemenus = list(list(type = 'dropdown',\n                                 xref = \"paper\",\n                                 yref = \"paper\",\n                                 xanchor = \"left\",\n                                 x = 0.84, \n                                 y = 1.0,\n                                 buttons = list(\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$station)),\n                                                    list(xaxis = list(categoryorder = \"category ascending\"))),\n                                        label = \"Urban/Rural\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$month)),\n                                                    list(xaxis = list(categoryorder = \"category descending\"))),\n                                        label = \"Season\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$year)),\n                                                    list(xaxis = list(categoryorder = \"category ascending\"))),\n                                        label = \"Year\")\n                              \n                                   )\n                                 )\n                            )\n         )         \n\n\n\n\n\n\n\n\n\n\nShow the code\n# Initiate base plot\nplot_ly(data = dailytemp,\n        x = ~ station,\n        y = ~maximum_temperature_c,\n        #hoveron = \"points+kde\",\n        line = list(width=1),\n        type = \"violin\",\n        spanmode = 'hard',\n        marker = list(opacity = 0.5,\n                      line = list(width = 2)),\n        box = list(visible = T),\n        points = 'all',\n        scalemode = 'count',\n        meanline = list(visible = T,\n                        color = \"red\"),\n        color = I('#bebada'),\n        marker = list(\n          line = list(\n            width = 2,\n            color = '#bebada'\n          ),\n          symbol = 'line-ns'\n        )\n        ) %&gt;% \n\n# Cosmetic edits  \n  layout(title = \"&lt;b&gt;Max Temperatures across locations, seasons, and over time.&lt;/b&gt;\",\n         xaxis = list(title = \"\", \n                      autotypenumbers='strict'),\n         yaxis = list(title = \"Temperature in Celcius\"),\n         plot_bgcolor = \"#f5f5f5\",\n         paper_bgcolor = \"#f5f5f5\",\n\n# Dropdown menu options                  \n         updatemenus = list(list(type = 'dropdown',\n                                 xref = \"paper\",\n                                 yref = \"paper\",\n                                 xanchor = \"left\",\n                                 x = 0.84, \n                                 y = 1.0,\n                                 buttons = list(\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$station)),\n                                                    list(xaxis = list(categoryorder = \"category ascending\"))),\n                                        label = \"Urban/Rural\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$month)),\n                                                    list(xaxis = list(categoryorder = \"category descending\"))),\n                                        label = \"Season\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(dailytemp$year)),\n                                                    list(xaxis = list(categoryorder = \"category ascending\"))),\n                                        label = \"Year\")\n                              \n                                   )\n                                 )\n                            )\n         )         \n\n\n\n\n\n\n\n\n\n\nInsights:\nDaily Mean Temperature\n\nTemperature comparisons between urban (Changi) and rural areas (Tengah) show a notable difference in temperature range. In Changi, daily mean temperatures ranged from 23° to 30.5° Celsius, while in Tengah, the range was narrower, from 24.3°C to 29.9°C. Mean and median temperatures were similar between the two locations, with Tengah slightly cooler by 0.2°C.\nAnalysis of wet and dry seasons indicates a significant difference in mean and median temperatures. Temperatures during the wet season (December) were higher than during the dry season (June). However, it’s important to note missing data from Tengah during the latter half of December 2023, which may affect the reliability of these observations.\nWhen plotted by year, noticeable trends emerge. In 1983, there was high variability in mean temperatures, spanning 7°C. Subsequent years showed narrower ranges, with 2023 having a range of 4.7°C. Overall, there is a slight upward trend in mean and median temperatures over the years, with a median increase of 0.8°C from 1983 to 2023.\n\nDaily Maximum Temperature\n\nThe disparity between temperatures from June and December is more visible when daily maximum temperature is plotted, with June warmer by almost 2°C on average. The range is also much smaller as more measurements recorded are on the warmer scale."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#how-warm-is-singapore-becoming",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#how-warm-is-singapore-becoming",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.1 How warm is Singapore becoming?",
    "text": "4.1 How warm is Singapore becoming?\nWe will first visualise the distribution of daily mean temperatures using a histogram and a boxplot to determine the variation of values across the sample population.\n\n\nShow the code\n# Computing summary statistics of mean, median and lower and upper whiskers in boxplot\nmeantemp &lt;- round(mean(dailytemp$mean_temperature_c, na.rm = TRUE), digits=1)\nmediantemp &lt;- round(median(dailytemp$mean_temperature_c, na.rm=TRUE), digits=1)\nmintemp &lt;- round(min(dailytemp$mean_temperature_c, na.rm=TRUE), digits=1)\nmaxtemp &lt;- round(max(dailytemp$mean_temperature_c, na.rm=TRUE), digits=1)\nleftwhisk_temp &lt;- round(quantile(dailytemp$mean_temperature_c, probs = .25, na.rm=TRUE)-1.5*IQR(dailytemp$mean_temperature_c, na.rm=TRUE),1)\n\n\n# Axis Styles\nax_h &lt;- list(\n  title = \"\",\n  zeroline = FALSE,\n  showline = FALSE,\n  showticklabels = TRUE,\n  showgrid = FALSE\n)\n\naax_b &lt;- list(\n  title = \"\",\n  zeroline = FALSE,\n  showline = FALSE,\n  showticklabels = FALSE,\n  showgrid = FALSE\n)\n\n# Plot Histogram\nhistog &lt;- \n  plot_ly(dailytemp,\n                color = I(\"#c7c8cc\")) %&gt;% \n  group_by(station) %&gt;% \n  add_histogram(x = ~ mean_temperature_c,\n                histnorm = \"count\",\n                hoverlabel = list(\n                  bgcolor = \"black\",\n                  bordercolor = \"#f5f5f5\"),\n                hovertemplate=paste('Temp: %{x}°C&lt;br&gt;',\n                                    'Frequency: %{y}&lt;extra&gt;&lt;/extra&gt;')\n                ) %&gt;% \n  # Add mean line \n  add_lines(y = c(0,70),\n            x = meantemp,\n            line = list(\n              color = \"#e0218a\",\n              width = 3\n              #dash = 'dash'\n              ),\n            inherit = FALSE,\n            showlegend = FALSE\n  ) %&gt;% \n  # Add annotation for mean line\n  add_annotations(text = paste0(\"Mean: \", meantemp, \"°C\"),\n                  x = 27.4,\n                  y = 73,\n                  showarrow = FALSE,\n                  font = list(color = \"#e0218a\",\n                              size = 14)\n                  ) %&gt;% \n  layout(\n         xaxis = list(title = \"Temperature (°C)\",   \n                      showticklabels = TRUE),\n         yaxis = ax_h,\n         plot_bgcolor = \"#f5f5f5\",\n         paper_bgcolor = \"#f5f5f5\",\n         bargap = 0.1\n         #barmode = \"overlay\"\n         )\n\n\n# Plot Boxplot\nboxp &lt;- plot_ly(dailytemp,\n                x = ~ mean_temperature_c,\n                color = I(\"#c7c8cc\"),\n                type = \"box\",\n                fillcolor = \"\",\n                line = list(color = \"gray\",\n                          width = 1.5),\n                hoverlabel = list(\n                  bgcolor = \"black\",\n                  bordercolor = \"#f5f5f5\"\n                ),\n                 marker = list(color = 'rgb(8,81,156)',\n                            outliercolor = 'rgba(219, 64, 82, 0.6)',\n                            line = list(outliercolor = 'rgba(219, 64, 82, 1.0)',\n                                        outlierwidth = 2))\n                ) %&gt;% \n  layout(xaxis = aax_b,\n         yaxis = aax_b)\n\nsubplot(boxp, histog, \n              nrows = 2,\n              heights = c(0.2, 0.8),\n              #widths = c(0.8, 0.2),\n              shareX = TRUE) %&gt;% \n  layout(showlegend = FALSE,\n         title = \"&lt;b&gt;Uneven distribution of daily mean temperatures&lt;/b&gt;\",\n         xaxis = list(range = c(19, 36))\n  )\n\n\n\n\n\n\n\nInsights:\n\nThe mean is close to the median, indicating a relatively balanced distribution, although there are multiple peaks and troughs observed in the data.\nDaily mean temperatures exhibit fluctuations, ranging from a minimum of 23°C to a maximum of 30.7°C. Notably, the lowest temperature of 23°C is marked as a statistical outlier, occurring only once within the dataset. This suggests that it deviates significantly from the typical range of temperature values observed, indicating an unusual occurrence compared to the rest of the dataset."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#visualising-uncertainty-of-point-estimates",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#visualising-uncertainty-of-point-estimates",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.3 Visualising uncertainty of point estimates",
    "text": "4.3 Visualising uncertainty of point estimates\nA Tufte-style weather chart is used to convey the average temperature over a period time, alongside the historical maximum and minimum range, as well as the 95% confidence interval for the mean temperature. The 2-way facet aims to provide a comprehensive visualisation of three variables simultaneously.\nConsiderations for Visual and Interactivity\n\nMean temperatures for the period are represented by a single point on the chart, connected by a line to illustrate the trend over time.\nCustomised tooltips provide users with key statistics such as the number of recorded days, mean temperature, calculated standard error, and minimum and maximum temperatures, ehnhancing interactive exploration.\nThe bright yellow zone surrounding the geom_line signifies the uncertainty in predicting monthly mean temperatures. Its width is determined by the 95% confidence interval, chosen as an acceptable level of risk for analysis. A narrower zone width would mean that the variance is small and that the mean is more representative of the temperature for the weather station at the point in time.\nGrey areas depict the range of temperatures according to the minimum and maximum temperature, offering additional context to the visualisation.\n\nData Prep\n\nTo analyse monthly maximum, minimum, and mean temperatures over the years, we need to group daily temperature data by station and month/year using group_by(). Maximum temperature is the maximum of all the maximum temperatures given in the region at any particular month. Minimum temperature is the minimum of all the minimum temperatures at any particular month. Similarly, the mean temperature is the mean of the mean temperatures given in the region at any particular month.\nUsing daily mean temperatures for each station and month, we calculate the standard deviation and then the standard error. Lastly, avg_lower and avg_higher are computed, representing the mean minus and plus 1.96 times the standard error, respectively. This multiplier of 1.96 corresponds to approximately two standard deviations in a normal distribution, allowing us to construct a 95% confidence interval for the mean temperature.\n\n\nmonthlytemp &lt;- dailytemp %&gt;% \n  na.omit() %&gt;% \n  group_by(station, month, year) %&gt;% \n  summarise(n = n(),\n            mean = mean(mean_temperature_c),\n            max = max(maximum_temperature_c), # identify max value for each month per station\n            min = min(minimum_temperature_c), # identify min value for each month per station\n            sd = sd(minimum_temperature_c)) %&gt;% # calculate standard deviation for each month per station\n  mutate(\n         se = sd/sqrt(n-1), # calculate standard error of mean\n               avg_upper = mean+(1.96*se),  # calculate 95% CI for mean\n               avg_lower = mean-(1.96*se),\n         range = max - min,\n         yrmth = as.factor(paste0(month, \" \", year))) %&gt;%  # calculate 95% CI for mean\n  ungroup() \n\nmonthlytemp$yrmth &lt;- factor(monthlytemp$yrmth, levels = c(\"Jun 1983\", \"Dec 1983\", \n                                                          \"Jun 1993\", \"Dec 1993\",\n                                                          \"Jun 2003\", \"Dec 2003\", \n                                                          \"Jun 2013\", \"Dec 2013\", \n                                                          \"Jun 2023\", \"Dec 2023\"))\n\n\n\nShow the code\n# Customise tooltip information\nmonthlytemp$tooltip2 &lt;- c(paste0(\"Station: \", monthlytemp$station,\n                              \"\\nPeriod: \", monthlytemp$yrmth,                                 \n                              \"\\nDays Recorded: \", monthlytemp$n,\n                              \"\\nMean Temp (with standard error): \",  round(monthlytemp$mean, 1), \"°\", \n                              \"+/-\",  round(monthlytemp$se,1) ,\"°\",\n                              \"\\nMin Temp: \", monthlytemp$min, \"°\",\n                              \"\\nMax Temp: \", monthlytemp$max, \"°\",\n                              \"\\nRange: \", monthlytemp$range, \"°\"))\n\n# Style tooltip\ntooltip_css &lt;- \"background-color:#caced8; font-style:bold; color:#f5f5f5;\" \n\ntuftedec &lt;- \n  ggplot(monthlytemp[monthlytemp$month==\"Jun\",]) +\n\n# Plot min to max temp\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = min,\n        ymax = max,\n        group = 1),\n    alpha = 0.4,\n    fill=\"#caced8\") +\n  \n# Plot 95% confidence interval\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = avg_lower,\n        ymax = avg_upper,\n        group = 1),\n    alpha = 0.5,\n    fill=\"#d6ac5e\") +  \n\n# Plot mean temp    \n  geom_line(\n    aes(\n    x = yrmth,\n    y = mean,\n    group = 1),\n    color = \"black\",\n    size = 0.8\n  ) +\n  geom_point_interactive(\n    aes(x = yrmth,\n        y= mean,\n        tooltip=tooltip2),\n    size=1.2)+\n  \n  facet_wrap(~station,\n           ncol = 1\n           )+\n  \n  scale_y_continuous(limits = c(20, 37.5),\n                     breaks = seq(20,40, \n                                by=5), \n                   labels = ~ paste0(.x, \"°\")) +\n  theme(\n    panel.grid.major = element_line(colour = \"white\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"white\", linetype = 1, linewidth= 0.5),\n    panel.grid.major.x = element_line(color = \"wheat4\",linetype=3, size=0.5),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    strip.background = element_rect(color=\"#f5f5f5\", fill=\"#f5f5f5\")\n  )\n\ntuftejun &lt;- \n  ggplot(monthlytemp[monthlytemp$month==\"Dec\",]) +\n\n# Plot min to max temp\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = min,\n        ymax = max,\n        group = 1),\n    alpha = 0.4,\n    fill=\"#caced8\") +\n  \n# Plot 95% confidence interval\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = avg_lower,\n        ymax = avg_upper,\n        group = 1),\n    alpha = 0.5,\n    fill=\"#d6ac5e\") +  \n\n# Plot mean temp    \n  geom_line(\n    aes(\n    x = yrmth,\n    y = mean,\n    group = 1),\n    color = \"black\",\n    size = 0.8\n  ) +\n  geom_point_interactive(\n    aes(x = yrmth,\n        y= mean,\n        tooltip=tooltip2),\n    size=1.2)+\n  \n  facet_wrap(~station,\n           ncol = 1\n           )+\n  \n  scale_y_continuous(limits = c(20, 37.5),\n                    breaks = seq(20,40, \n                                by=5), \n                   labels = ~ paste0(.x, \"°\")) +\n  theme(\n    panel.grid.major = element_line(colour = \"white\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"white\", linetype = 1, linewidth= 0.5),\n    panel.grid.major.x = element_line(color = \"wheat4\",linetype=3, size=0.5),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#f5f5f5\", fill=\"#f5f5f5\")\n  )\n\npw &lt;- (tuftedec + tuftejun) +\n  plot_annotation(title = \"Uncertainty of point estimates\",\n                  theme=theme(plot.title = element_text(hjust = 0),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\ngirafe(ggobj = pw,\n       options = list(\n       opts_hover_inv(css = \"opacity:0.1;\"),\n       opts_hover(css = \"fill:cyan; stroke-width: 4; opacity: 1;\")       \n       ))\n\n\n\n\n\n\n\nInsights:\n\nThe most notable observation is the consistent increase in mean temperatures from June 1983 to December 2023, evident across all locations. This upward tilt is visually represented by the rising line depicting average temperature values, aligning with projections by Singapore’s National Climate Change Secretariat regarding the expected rise in daily mean temperatures. It is important to note that the rate of increase is gradual. Particularly significant is the observed change in Changi during the wet December period, with temperatures rising approximately 1.9°C over the 50-year period. Conversely, Tengah during the dry June period experienced minimal changes over a 40-year period, as indicated by the relatively flat line, with a rise of only 0.3°C. This suggests that the projected rise in temperature may not be uniformly distributed across locations and seasons.\nTengah recorded the widest range of temperatures within a single month during June 2013, indicating significant variability in weather conditions during that time.\n\n\nWhile lacking interactive features, an animated density plot presents an alternative approach by visually transitioning through changing distributions across different years. To achieve this, we can utilise the gganimate package in conjunction with geom_density_ridges_gradient() from the ggridges package. This animation provides a dynamic visualisation of how temperature distributions evolve over time, offering insights into long-term trends and variations.\nConsiderations for Visual\n\nThe geom_density function displays the density distribution of temperatures across years. Similarly, faceting is used to provide a three-pronged split by the three variables of interest.\nA colour scale is utilised to visually represent warmer temperatures with warmer/brighter colours such as yellow, while cooler temperatures are depicted using cold-toned blues. This colour scheme enhances the intuitive understanding of temperature variations within the plot.\n\n\nMean TemperatureMaximum TemperatureMinimum Temperature\n\n\n\n\nShow the code\n# Base density plot\nggplot(data = dailytemp, \n       aes(x = mean_temperature_c, \n           y = station, \n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  facet_wrap(~month) +\n    labs(title = \"Distribution of Mean Temperatures by Location & Season\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Temperature (°C)\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(hjust=1, angle=0, size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  \n  # Selecting colour palette, sets midpoint, and reverses default RdBu palette\n  #viridis::scale_fill_viridis(name = \"mean_temperature_c\", option = \"C\") +\n  colorspace::scale_fill_continuous_divergingx(palette = 'RdBu', \n                                               mid = mediantemp,\n                                               rev = TRUE)+\n\n  transition_states(year) +\n  ease_aes('linear')\n\n\n\n\n\n\n\n\n\nShow the code\nmediantemp_max &lt;- round(median(dailytemp$maximum_temperature_c, na.rm=TRUE), digits=1)\n\n# Base density plot\nggplot(data = dailytemp, \n       aes(x = maximum_temperature_c, \n           y = station, \n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  facet_wrap(~month) +\n    labs(title = \"Distribution of Maximum Temperatures by Location & Season\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Temperature (°C)\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(hjust=1, angle=0, size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  \n  # Selecting colour palette, sets midpoint, and reverses default RdBu palette\n  #viridis::scale_fill_viridis(name = \"mean_temperature_c\", option = \"C\") +\n  colorspace::scale_fill_continuous_divergingx(palette = 'RdBu', \n                                               mid = mediantemp_max,\n                                               rev = TRUE)+\n\n  transition_states(year) +\n  ease_aes('linear')\n\n\n\n\n\n\n\n\n\nShow the code\nmediantemp_min &lt;- round(median(dailytemp$minimum_temperature_c, na.rm=TRUE), digits=1)\n\n# Base density plot\nggplot(data = dailytemp, \n       aes(x = minimum_temperature_c, \n           y = station, \n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  facet_wrap(~month) +\n    labs(title = \"Distribution of Minimum Temperatures by Location & Season\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Temperature (°C)\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(hjust=1, angle=0, size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  \n  # Selecting colour palette, sets midpoint, and reverses default RdBu palette\n  #viridis::scale_fill_viridis(name = \"mean_temperature_c\", option = \"C\") +\n  colorspace::scale_fill_continuous_divergingx(palette = 'RdBu', \n                                               mid = mediantemp_min,\n                                               rev = TRUE)+  \n  \n  transition_states(year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#plotting-change-in-temp",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#plotting-change-in-temp",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.4 Plotting change in temp",
    "text": "4.4 Plotting change in temp\nto calculate the change in mean temperature at the Changi station over time.\nThis code filters the dailytemp dataframe to include only rows where the station is “Changi”, arranges the data by date, and then calculates the change in mean temperature (mean_temperature_c) from one day to the next using the lag() function.\nConsiderations for Visual and Interactivity\n\n\n\nData Prep\n\n\n\n\nchange_changi &lt;- dailytemp %&gt;% \n  filter(station == \"Changi\") %&gt;% \n  arrange(date) %&gt;% \n  mutate(change = mean_temperature_c - lag(mean_temperature_c),\n         pos = change &gt;=0 ) \n\n\n\nShow the code\nchange &lt;- \n  ggplot(change_changi[change_changi$month==\"Dec\",], \n       aes(x = day,\n           y = change, \n           fill = pos,\n           data_id = date,\n           tooltip = paste(\"Station: \", station, \"&lt;br&gt;\",\n                        \"Date: \", date, \"&lt;br&gt;\",\n                        \"Mean temp: \", mean_temperature_c, \"°C\", \"&lt;br&gt;\",\n                        \"Change: \", round(change,1), \"°C\"))) +\n  geom_col_interactive(position = \"identity\",\n           colour = \"#f5f5f5\",\n           size = 0.25\n           ) +\n  scale_fill_manual(\n                    values = c(\"#3f7cb8\", \"#bf3836\"), \n                    guide = FALSE) +\n  facet_wrap(~ year, ncol = 1, strip.position=\"right\") +\n  scale_y_continuous(breaks = seq(-2,2, by = 2),\n                     labels = ~ paste0(.x, \"°\"))+\n  scale_x_continuous(breaks = seq(1,31, by = 5))+\n   labs(title =\"Daily Change in Mean Temperature\",\n    x = \"Day in  December\",\n    y = NULL\n  ) +\n  theme(\n  strip.text.y = element_blank(),\n  plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n  axis.title.x = element_text(size = 8),\n  axis.title.y = element_text(hjust=1, angle=0, size = 8),\n  axis.ticks.x = element_blank(),\n  axis.text = element_text(size = 6),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"),\n  panel.background = element_rect(fill = \"#f5f5f5\", color = \"grey60\"),\n  panel.grid.major = element_blank(), \n  panel.grid.minor = element_blank()\n  )\n\n\n\n\nShow the code\n# Tooltip style\ntooltip_css &lt;- \"background-color:black; font-style:bold; color:#f5f5f5;\" \n\n# Tile Plot as Heatmap\nhm &lt;-\n  ggplot(\n    change_changi,\n    aes(x = day, \n        y = year) # Reverse order to align with bar plot\n  ) +\n  \n  # Interactive tile plots\n  geom_tile_interactive(\n    aes(fill = mean_temperature_c,\n        data_id = date,\n        tooltip = paste(\"Station: \", station, \"&lt;br&gt;\",\n                        \"Date: \", date, \"&lt;br&gt;\",\n                        \"Mean temp: \", mean_temperature_c, \"°C\", \"&lt;br&gt;\",\n                        \"Change: \", round(change,1), \"°C\")))+\n  \n  # Specify gradient colors for divergent scale \n  scale_fill_gradient(\n    low = \"white\",\n    high = \"#bf3836\",\n    space = \"Lab\",\n    na.value = \"grey50\",\n    aesthetics = \"fill\",\n    guide = guide_colorbar(\n    title = \"Temp (°C)\", \n    title.position = \"left\", \n    title.vjust = 1,\n    barheight = 1,\n    barwidth = 5)\n  ) +  \n labs(\n    title=\"Daily Mean Temperature\",\n    x = \"Day in December\",\n    y = NULL\n  ) +\n  theme(\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    #axis.line.x = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n    axis.title.x = element_text(size = 8),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 10, ),\n    axis.text.y = element_text(size = 8, face = \"bold\"),\n    axis.text.x = element_text(size = 6),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    legend.title = element_text(size = 8, face = \"bold\"),\n    legend.text = element_text(size = 6),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    )+ \n  scale_y_discrete(position = \"right\",\n                   limits = rev)+\n  scale_x_continuous(breaks = seq(1,31, by = 5))\n  \n\n\n# Combine both barplot and heatmap to form a coordinated-linked visualisation\nggiraph::girafe(code = print(hm + change),\n                width_svg = 6,\n                height_svg = 6*0.7,\n                options = list(opts_tooltip(css = tooltip_css),\n                               opts_hover(\"stroke: black;\")))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#mean-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#mean-temperature",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Mean Temperature",
    "text": "Mean Temperature\n\n# Base density plot\nggplot(data = dailytemp, \n       aes(x = mean_temperature_c, \n           y = station, \n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  facet_wrap(~month) +\n    labs(title = \"Distribution of Mean Temperatures by Location & Season\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Mean Temperatures\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  \n  # Selecting colour palette\n  viridis::scale_fill_viridis(name = \"mean_temperature_c\", option = \"C\") +\n\n  transition_states(year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#maximum-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#maximum-temperature",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Maximum Temperature",
    "text": "Maximum Temperature\n\n# Base density plot\nggplot(data = dailytemp, \n       aes(x = maximum_temperature_c, \n           y = station, \n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  facet_wrap(~month) +\n    labs(title = \"Distribution of Maximum Temperatures by Location & Season\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Maximum Temperatures\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  \n  # Selecting colour palette\n  viridis::scale_fill_viridis(name = \"maximum_temperature_c\", option = \"C\") +\n\n  transition_states(year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#minimum-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#minimum-temperature",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Minimum Temperature",
    "text": "Minimum Temperature\n\n# Base density plot\nggplot(data = dailytemp, \n       aes(x = minimum_temperature_c, \n           y = station, \n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  facet_wrap(~month) +\n    labs(title = \"Distribution of Minimum Temperatures by Location & Season\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Minimum Temperatures\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  \n  # Selecting colour palette\n  viridis::scale_fill_viridis(name = \"minimum_temperature_c\", option = \"C\") +\n\n  transition_states(year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-is-the-uncertainty-in-the-temperature-rise",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-is-the-uncertainty-in-the-temperature-rise",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.3 What is the uncertainty in the temperature rise?",
    "text": "4.3 What is the uncertainty in the temperature rise?\nIn eliminate any seasonal patterns, we can segment our data to focus on the average temperature during for a month and its evolution over the years.\nA Tufte-style weather chart is used to convey the average temperature over a period time, alongside the historical maximum and minimum range, as well as the 95% confidence interval for the mean temperature. The 2-way facet aims to provide a comprehensive visualisation of three variables simultaneously.\nData Prep\n\nTo analyse monthly maximum, minimum, and mean temperatures over the years, we need to group daily temperature data by station and month/year using group_by().\nMaximum temperature is the maximum of all the maximum temperatures given in the region at any particular month. Minimum temperature is the minimum of all the minimum temperatures at any particular month. Similarly, the mean temperature is the mean of the mean temperatures given in the region at any particular month.\nUsing daily mean temperatures for each station and month, we calculate the standard deviation and then the standard error. Lastly, avg_lower and avg_higher are computed, representing the mean minus and plus 1.96 times the standard error, respectively. This multiplier of 1.96 corresponds to approximately two standard deviations in a normal distribution, allowing us to construct a 95% confidence interval for the mean temperature.\n\n\nmonthlytemp &lt;- dailytemp %&gt;% \n  na.omit() %&gt;% \n  group_by(station, month, year) %&gt;% \n  summarise(n = n(),\n            mean = mean(mean_temperature_c),\n            max = max(maximum_temperature_c), # identify max value for each month per station\n            min = min(minimum_temperature_c), # identify min value for each month per station\n            sd = sd(minimum_temperature_c)) %&gt;% # calculate standard deviation for each month per station\n  mutate(\n         se = sd/sqrt(n-1), # calculate standard error of mean\n               avg_upper = mean+(1.96*se),  # calculate 95% CI for mean\n               avg_lower = mean-(1.96*se),\n         range = max - min,\n         yrmth = as.factor(paste0(month, \" \", year))) %&gt;%  # calculate 95% CI for mean\n  ungroup() \n\nmonthlytemp$yrmth &lt;- factor(monthlytemp$yrmth, levels = c(\"Jun 1983\", \"Dec 1983\", \n                                                          \"Jun 1993\", \"Dec 1993\",\n                                                          \"Jun 2003\", \"Dec 2003\", \n                                                          \"Jun 2013\", \"Dec 2013\", \n                                                          \"Jun 2023\", \"Dec 2023\"))\n\nConsiderations for Visual and Interactivity\n\nMean temperatures for the period are represented by a single point on the chart, connected by a line to illustrate the trend over time.\nThe current chart provides a comprehensive overview of trends across four quadrants. For more detailed analysis, users can either double-click on the chart or apply the magnifying glass on particular areas to zoom in. This feature allows for a closer examination of specific data points and trends within the chart.\nCustomised tooltips provide users with key statistics such as the number of recorded days, mean temperature, calculated standard error, and minimum and maximum temperatures, enhancing interactive exploration.\nThe bright yellow zone surrounding the geom_line signifies the uncertainty in predicting monthly mean temperatures. Its width is determined by the 95% confidence interval, chosen as an acceptable level of risk for analysis. A narrower zone width would mean that the variance is small and that the mean is more representative of the temperature for the weather station at the point in time.\nGrey areas depict the range of temperatures according to the minimum and maximum temperature, offering additional context to the visualisation.\n\n\n\nShow the code\n# Customise tooltip information\nmonthlytemp$tooltip2 &lt;- c(paste0(\"Station: \", monthlytemp$station,\n                              \"\\nPeriod: \", monthlytemp$yrmth,                                 \n                              \"\\nDays Recorded: \", monthlytemp$n,\n                              \"\\nMean Temp (with standard error): \",  round(monthlytemp$mean, 1), \"°\", \n                              \"+/-\",  round(monthlytemp$se,1) ,\"°\",\n                              \"\\nMin Temp: \", monthlytemp$min, \"°\",\n                              \"\\nMax Temp: \", monthlytemp$max, \"°\",\n                              \"\\nRange: \", monthlytemp$range, \"°\"))\n\n# Style tooltip\ntooltip_css &lt;- \"background-color:black; font-style:bold; color:#f5f5f5;\" \n\ntuftedec &lt;- \n  ggplot(monthlytemp[monthlytemp$month==\"Jun\",]) +\n\n# Plot min to max temp\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = min,\n        ymax = max,\n        group = 1),\n    alpha = 0.4,\n    fill=\"#caced8\") +\n  \n# Plot 95% confidence interval\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = avg_lower,\n        ymax = avg_upper,\n        group = 1),\n    alpha = 0.5,\n    fill=\"#d6ac5e\") +  \n\n# Plot mean temp    \n  geom_line(\n    aes(\n    x = yrmth,\n    y = mean,\n    group = 1),\n    color = \"black\",\n    size = 0.8\n  ) +\n  geom_point_interactive(\n    aes(x = yrmth,\n        y= mean,\n        tooltip=tooltip2),\n    size=1.2)+\n  \n  facet_wrap(~station,\n           ncol = 1\n           )+\n  \n  scale_y_continuous(limits = c(20, 37.5),\n                     breaks = seq(20,40, \n                                by=5), \n                   labels = ~ paste0(.x, \"°\")) +\n  theme(\n    plot.title = element_text(face= 'bold'),\n    panel.grid.major = element_line(colour = \"white\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"white\", linetype = 1, linewidth= 0.5),\n    panel.grid.major.x = element_line(color = \"wheat4\",linetype=3, size=0.5),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#f5f5f5\", fill=\"#f5f5f5\")\n  )\n\ntuftejun &lt;- \n  ggplot(monthlytemp[monthlytemp$month==\"Dec\",]) +\n\n# Plot min to max temp\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = min,\n        ymax = max,\n        group = 1),\n    alpha = 0.4,\n    fill=\"#caced8\") +\n  \n# Plot 95% confidence interval\n  geom_ribbon(\n    aes(x = yrmth,\n        ymin = avg_lower,\n        ymax = avg_upper,\n        group = 1),\n    alpha = 0.5,\n    fill=\"#d6ac5e\") +  \n\n# Plot mean temp    \n  geom_line(\n    aes(\n    x = yrmth,\n    y = mean,\n    group = 1),\n    color = \"black\",\n    size = 0.8\n  ) +\n  geom_point_interactive(\n    aes(x = yrmth,\n        y= mean,\n        tooltip=tooltip2),\n    size=1.2)+\n  \n  facet_wrap(~station,\n           ncol = 1\n           )+\n  \n  scale_y_continuous(limits = c(20, 37.5),\n                    breaks = seq(20,40, \n                                by=5), \n                   labels = ~ paste0(.x, \"°\")) +\n  theme(\n    panel.grid.major = element_line(colour = \"white\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"white\", linetype = 1, linewidth= 0.5),\n    panel.grid.major.x = element_line(color = \"wheat4\",linetype=3, size=0.5),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#f5f5f5\", fill=\"#f5f5f5\")\n  )\n\npw &lt;- (tuftedec + tuftejun) +\n  plot_annotation(title = \"Uncertainty of point estimates\",\n                  theme=theme(plot.title = element_text(hjust = 0, face=\"bold\"),\n                  plot.background = element_rect(fill=\"#f5f5f5\", colour = \"#f5f5f5\"),\n                  panel.border = element_blank()))\n\ngirafe(ggobj = pw,\n       options = list(opts_tooltip(css = tooltip_css),\n                      opts_hover(css=\"fill: #fe0569;\"),\n                      opts_zoom(max=5),\n                      hover_nearest = TRUE\n       ))\n\n\n\n\n\n\n\nInsights:\n\nThe most notable observation is the consistent increase in mean temperatures across time, evident across all locations. This upward tilt is visually represented by the rising line depicting average temperature values, aligning with projections by Singapore’s National Climate Change Secretariat regarding the expected rise in daily mean temperatures.\nIt is important to note that the rate of increase is gradual. Particularly noteworthy is the observed change in Changi during the wet December period, with temperatures rising approximately 1.9°C over the 50-year period. Conversely, Tengah during the dry June period experienced minimal changes over a 40-year period, as indicated by the relatively flat line, with a rise of only 0.3°C. This suggests that the projected rise in temperature may not be uniformly distributed across locations and seasons.\nThe trend does not indicate a faster rate of change in recent decades. In fact, mean temperatures seem to be rising at a slower rate in later years.\nTengah recorded the widest range of temperatures within a single month during June 2013, indicating significant variability in weather conditions during that time.\n\n\nWhile lacking interactive features, an animated density plot presents an alternative approach by visually transitioning through changing distributions across different years. To achieve this, we can utilise the gganimate package in conjunction with geom_density_ridges_gradient() from the ggridges package. This animation provides a dynamic visualisation of how temperature distributions evolve over time, offering insights into long-term trends and variations.\nConsiderations for Visual\n\nThe geom_density function illustrates the density distribution of temperatures across years. Likewise, faceting is applied to offer a three-way split by the three variables of interest, enhancing the clarity of the plot.\nA colour scale is employed to visually represent warmer temperatures with warmer/brighter colours such as yellow, while cooler temperatures are portrayed using cool-toned blues. This colour scheme enhances the intuitive understanding of temperature variations within the plot. The midpoint of the colours is determined by the median temperature for each category (eg. mean, max, or min), ensuring accurate representation of temperature distribution.\n\n\n\nShow the code\n# Base density plot\nggplot(data = dailytemp, \n       aes(x = mean_temperature_c, \n           y = station, \n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  facet_wrap(~month) +\n    labs(title = \"Distribution of Mean Temperatures by Location & Season\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Temperature (°C)\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(hjust=1, angle=0, size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n  \n  # Selecting colour palette, sets midpoint, and reverses default RdBu palette\n  #viridis::scale_fill_viridis(name = \"mean_temperature_c\", option = \"C\") +\n  colorspace::scale_fill_continuous_divergingx(palette = 'RdBu', \n                                               mid = mediantemp,\n                                               rev = TRUE)+\n\n  transition_states(year) +\n  ease_aes('linear')\n\n\n\n\n\n\nInsights:\n\nOver the years, we observe a greater degree of left-skewness in daily mean temperatures, as evidenced by higher peaks and larger areas of red in our density plots.\nHowever, June 2013 appears to be an outlier, with mean temperatures exhibiting even more left-skewed distribution compared to other years. By June 2023, the skewness returns to typical levels."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#how-much-hotter-or-colder-or-anomalous-was-the-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#how-much-hotter-or-colder-or-anomalous-was-the-temperature",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.4 How much hotter or colder, or anomalous was the temperature?",
    "text": "4.4 How much hotter or colder, or anomalous was the temperature?\nHaving established the upward trend of monthly temperatures across the years, our next goal is to quantify the extent of this increase and examine if it manifests on a daily basis, particularly focusing on anomalous days with extreme temperature spikes. In the following section, we use a heatmap to illustrate temperature variations over time and a bar plot to visualise day-to-day temperature changes.\nData Prep\n\nThe code chunk below filters the dailytemp dataframe to include only Changi data, arranges the data by date via arrange(), and then calculates the change in mean temperature from one day to the next using the lag() function.\nThe variable pos identifies whether the change is an increase and decrease in order to assign a colour when plotting the bar chart.\n\n\nchange_changi &lt;- dailytemp %&gt;% \n  filter(station == \"Changi\") %&gt;% \n  arrange(date) %&gt;% \n  mutate(change = mean_temperature_c - lag(mean_temperature_c),\n         pos = change &gt;=0 ) \n\nConsiderations for Visual and Interactivity\n\nHeatmap: Visualises temperature variations over time, with warmer temperatures depicted by brighter red colors and cooler temperatures by lighter shades. This facilitates the identification of patterns and trends in temperature fluctuations across the dataset.\nBar Chart: The bar chart complements the heatmap by illustrating the direction and extent of day-to-day changes in mean temperature. It highlights increases in red and decreases in blue, enabling a detailed examination of temperature changes on a daily basis.\nCoordinated Highlighting: Coordinated highlighting between the heatmap and bar chart ensures that when a user hovers over a specific day on the heatmap, the corresponding day-on-day temperature change is highlighted on the bar chart, and vice versa. This feature allows users to visualise temperature intensity and day-to-day movement simultaneously, enhancing their understanding of temperature variations over time.\nUse of Borders for Highlighting: Black borders draw attention to the corresponding point in the neighboring plot when hovered upon, avoiding the obscuration of analysis with color changes.\nTooltips: Provide users with additional information such as specific temperature values, changes, and dates, enhancing the interactive exploration experience.\nhover_nearest= TRUE: Enhances accessibility by allowing users to display tooltips and highlights by simply hovering around the area of interest, rather than needing to be directly over the specific area of the bar plot.\nShared y-axis: Prevents space wasted on chart junk.\n\n\nDecembers in ChangiJunes in ChangiWaterfall Chart\n\n\n\n\nShow the code\n# Tooltip style\ntooltip_css &lt;- \"background-color:black; font-style:bold; color:#f5f5f5;\" \n\nchange &lt;- \n  ggplot(change_changi[change_changi$month==\"Dec\",], \n       aes(x = day,\n           y = change, \n           fill = pos,\n           data_id = date,\n           tooltip = paste(\"Station: \", station, \"&lt;br&gt;\",\n                        \"Date: \", date, \"&lt;br&gt;\",\n                        \"Mean temp: \", mean_temperature_c, \"°C\", \"&lt;br&gt;\",\n                        \"Change: \", round(change,1), \"°C\"))) +\n  geom_col_interactive(position = \"identity\",\n           colour = \"#f5f5f5\",\n           size = 0.25,\n           hover_nearest= TRUE\n           ) +\n  scale_fill_manual(\n                    values = c(\"#3f7cb8\", \"#bf3836\"), \n                    guide = FALSE) +\n  facet_wrap(~ year, ncol = 1, strip.position=\"right\") +\n  scale_y_continuous(breaks = seq(-2,2, by = 2),\n                     labels = ~ paste0(.x, \"°\"))+\n  scale_x_continuous(breaks = seq(1,31, by = 5))+\n   labs(title =\"Day-on-Day Change\",\n    x = \"Day in  December\",\n    y = NULL\n  ) +\n  theme(\n  strip.text.y = element_blank(),\n  plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n  axis.title.x = element_text(size = 8),\n  axis.title.y = element_text(hjust=1, angle=0, size = 8),\n  axis.ticks.x = element_blank(),\n  axis.text = element_text(size = 6),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"),\n  panel.background = element_rect(fill = \"#f5f5f5\", color = \"grey60\"),\n  panel.grid.major = element_blank(), \n  panel.grid.minor = element_blank()\n  )\n\n\n# Tile Plot as Heatmap\nhm &lt;-\n  ggplot(\n    change_changi[change_changi$month==\"Dec\",],\n    aes(x = day, \n        y = year) # Reverse order to align with bar plot\n  ) +\n  \n  # Interactive tile plots\n  geom_tile_interactive(\n    aes(fill = mean_temperature_c,\n        data_id = date,\n        tooltip = paste(\"Station: \", station, \"&lt;br&gt;\",\n                        \"Date: \", date, \"&lt;br&gt;\",\n                        \"Mean temp: \", mean_temperature_c, \"°C\", \"&lt;br&gt;\",\n                        \"Change: \", round(change,1), \"°C\")))+\n  \n  # Specify gradient colors for divergent scale \n  scale_fill_gradient(\n    low = \"white\",\n    high = \"#bf3836\",\n    space = \"Lab\",\n    na.value = \"grey50\",\n    aesthetics = \"fill\",\n    guide = guide_colorbar(\n    title = \"Temp (°C)\", \n    title.position = \"left\", \n    title.vjust = 1,\n    barheight = 1,\n    barwidth = 5)\n  ) +  \n labs(\n    title=\"Daily Mean Temperature\",\n    x = \"Day in December\",\n    y = NULL\n  ) +\n  theme(\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    #axis.line.x = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n    axis.title.x = element_text(size = 8),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 10, ),\n    axis.text.y = element_text(size = 8, face = \"bold\"),\n    axis.text.x = element_text(size = 6),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    legend.title = element_text(size = 6, face = \"bold\"),\n    legend.text = element_text(size = 6),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    )+ \n  scale_y_discrete(position = \"right\",\n                   limits = rev)+\n  scale_x_continuous(breaks = seq(1,31, by = 5))\n\n\n\n# Combine both barplot and heatmap to form a coordinated-linked visualisation\nggiraph::girafe(code = print(hm + change),\n                width_svg = 6,\n                height_svg = 6*0.7,\n                options = list(opts_tooltip(css = tooltip_css),\n                               opts_hover(\"stroke: black;\"),\n                               opts_zoom(min = 1, max = 3)))               \n\n\n\n\n\n\n\n\n\n\nShow the code\n# Tooltip style\ntooltip_css &lt;- \"background-color:black; font-style:bold; color:#f5f5f5;\" \n\nchange2 &lt;- \n  ggplot(change_changi[change_changi$month==\"Jun\",], \n       aes(x = day,\n           y = change, \n           fill = pos,\n           data_id = date,\n           tooltip = paste(\"Station: \", station, \"&lt;br&gt;\",\n                        \"Date: \", date, \"&lt;br&gt;\",\n                        \"Mean temp: \", mean_temperature_c, \"°C\", \"&lt;br&gt;\",\n                        \"Change: \", round(change,1), \"°C\"))) +\n  geom_col_interactive(position = \"identity\",\n           colour = \"#f5f5f5\",\n           size = 0.25,\n           hover_nearest= TRUE\n           ) +\n  scale_fill_manual(\n                    values = c(\"#3f7cb8\", \"#bf3836\"), \n                    guide = FALSE) +\n  facet_wrap(~ year, ncol = 1, strip.position=\"right\") +\n  scale_y_continuous(breaks = seq(-2,2, by = 2),\n                     labels = ~ paste0(.x, \"°\"))+\n  scale_x_continuous(breaks = seq(2,31, by = 5))+\n   labs(title =\"Day-on-Day Change\",\n    x = \"Day in  June\",\n    y = NULL\n  ) +\n  theme(\n  strip.text.y = element_blank(),\n  plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n  axis.title.x = element_text(size = 8),\n  axis.title.y = element_text(hjust=1, angle=0, size = 8),\n  axis.ticks.x = element_blank(),\n  axis.text = element_text(size = 6),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"),\n  panel.background = element_rect(fill = \"#f5f5f5\", color = \"grey60\"),\n  panel.grid.major = element_blank(), \n  panel.grid.minor = element_blank()\n  )\n\n\n# Tile Plot as Heatmap\nhm2 &lt;-\n  ggplot(\n    change_changi[change_changi$month==\"Jun\",],\n    aes(x = day, \n        y = year) # Reverse order to align with bar plot\n  ) +\n  \n  # Interactive tile plots\n  geom_tile_interactive(\n    aes(fill = mean_temperature_c,\n        data_id = date,\n        tooltip = paste(\"Station: \", station, \"&lt;br&gt;\",\n                        \"Date: \", date, \"&lt;br&gt;\",\n                        \"Mean temp: \", mean_temperature_c, \"°C\", \"&lt;br&gt;\",\n                        \"Change: \", round(change,1), \"°C\")))+\n  \n  # Specify gradient colors for divergent scale \n  scale_fill_gradient(\n    low = \"white\",\n    high = \"#bf3836\",\n    space = \"Lab\",\n    na.value = \"grey50\",\n    aesthetics = \"fill\",\n    guide = guide_colorbar(\n    title = \"Temp (°C)\", \n    title.position = \"left\", \n    title.vjust = 1,\n    barheight = 1,\n    barwidth = 5)\n  ) +  \n labs(\n    title=\"Daily Mean Temperature\",\n    x = \"Day in June\",\n    y = NULL\n  ) +\n  theme(\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    #axis.line.x = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n    axis.title.x = element_text(size = 8),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 10, ),\n    axis.text.y = element_text(size = 8, face = \"bold\"),\n    axis.text.x = element_text(size = 6),\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    legend.title = element_text(size = 6, face = \"bold\"),\n    legend.text = element_text(size = 6),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    )+ \n  scale_y_discrete(position = \"right\",\n                   limits = rev)+\n  scale_x_continuous(breaks = seq(1,31, by = 5))\n  \n\n\n# Combine both barplot and heatmap to form a coordinated-linked visualisation\nggiraph::girafe(code = print(hm2 + change2),\n                width_svg = 6,\n                height_svg = 6*0.7,\n                options = list(opts_tooltip(css = tooltip_css),\n                               opts_hover(\"stroke: black;\"),\n                               opts_zoom(min = 1, max = 3)))     \n\n\n\n\n\n\n\n\nA waterfall chart is an alternative visualisation which shows how the initial temperature at the start of each period can be affected by the cumulative effect of temperature fluctuations. Day-to-day changes are calculated and represented using different colours: red indicating an increase and blue indicating cooler weathers.\nAfter careful consideration, I personally found this chart to be less useful. The day-to-day fluctuations seem insignificant when compared to the starting temperature, resulting in a lot of wasted space. Additionally, it does not provide added value beyond what the previous bar charts can already show us.\n\n\nShow the code\nmeanchange &lt;- dailytemp %&gt;% \n  arrange(date) %&gt;% \n  filter(station == \"Changi\") %&gt;% \n  group_by(station, year, month) %&gt;% \n  mutate(\n         change = mean_temperature_c - lag(mean_temperature_c),\n         measure = ifelse(is.na(change), \"total\", \"relative\"),\n         change = ifelse(is.na(change), mean_temperature_c, change),\n         day = as.factor(day),\n         yrmth = as.factor(paste0(month, \" \", year))\n         ) %&gt;% \n  ungroup() %&gt;% \n  select(-year, -month, -mean_temperature_c, -maximum_temperature_c, -minimum_temperature_c, -date) \n\nplot_ly(meanchange,\n              type = \"waterfall\",\n              x = ~ day,\n              y = ~ change,\n              connector = list(line = list(color= \"rgb(63, 63, 63)\")),\n              decreasing = list(marker=list(color = \"#3f7cb8\")),\n              increasing = list(marker=list(color = \"#bf3836\")),\n              transforms = list(\n                list(\n                  type = 'filter',\n                  target = ~ yrmth,\n                  operation = '=',\n                  value = meanchange$yrmth\n                )\n              )\n              ) %&gt;% \n      layout(title = \"&lt;b&gt;Temperature fluctuations observed at Changi&lt;/b&gt;\",\n             xaxis = list(title = \"\"),\n            yaxis = list(title = \"Temperature (°C)\"),\n            autosize = TRUE,\n            showlegend = FALSE,\n         plot_bgcolor = \"#f5f5f5\",\n         paper_bgcolor = \"#f5f5f5\",\n         \n         # Dropdown menu options                  \n         updatemenus = list(\n           list(type = 'dropdown',\n                xref = \"paper\",\n                yref = \"paper\",\n                #xanchor = \"left\",\n                #y = 0.99,\n                buttons = list(\n                  #list(method = \"restyle\",\n                  #     args = list(list(y = list(meanchange$Changi))),\n                  #     label = \"Changi\"),\n                  #list(method = \"restyle\",\n                  #     args = list(list(y = list(meanchange$Tengah))),\n                  #     label = \"Tengah\")\n                                   )),\n         list(\n           type = 'dropdown',\n           active = 0,\n           xanchor = \"left\",\n           x= 0.85,\n           y = 1.2,\n           buttons = list(\n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[1]),\n                  label = \"June 1983\"),\n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[2]),\n                  label = \"Dec 1983\"),              \n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[3]),\n                  label = \"June 1993\"),             \n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[4]),\n                  label = \"Dec 1993\"),\n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[5]),\n                  label = \"June 2003\"),             \n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[6]),\n                  label = \"Dec 2003\"),  \n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[7]),\n                  label = \"June 2013\"),             \n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[8]),\n                  label = \"Dec 2013\"),\n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[9]),\n                  label = \"June 2023\"),             \n             list(method = \"restyle\",\n                  args = list(\"transforms[0].value\", unique(meanchange$yrmth)[10]),\n                  label = \"Dec 2023\")             \n           )\n         ))\n         )\n\n\n\n\n\n\n\n\n\n\nInsights:\n\nThe combined plots highlight the natural variation in temperature data.\nIn December, darker patches of red are concentrated at the lower end of the heatmap, indicating more recent records and generally warmer days compared to half a century ago.\nThe bar plot reveals that the increase in temperature over the years has not been attributed to a particular day. There are ebbs and flows in the chart, as indicated by the presence of blue and red panels.\n\nShort periods of consistent increases are observed, such as four days of consecutive temperature increases from 11th to 14th December 1983.\nThe extent of increases and decreases in temperatures are often uneven; for example, the cumulative increase of 2.4°C from the 11th to 14th December 1983 is not fully offset by the subsequent decrease of 1.8°C on the 15th.\nThe highest day-on-day increase was recorded on the 22nd of December 2003, with a rise of 2.3°C.\nRecent years showed more decreases in temperatures, suggesting a possible reversal or slowdown in the upward trend."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#feeling-hot-more-often",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#feeling-hot-more-often",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4.5 Feeling hot, more often?",
    "text": "4.5 Feeling hot, more often?\nIn this section, we investigate the occurrence of extreme heat by identifying “very warm days,” defined as days when the daily maximum temperature exceeds 34°C by the MSS.\nData Prep\n\nmutate() is used to:\n\nDefine a new variable, warmday, which takes a value of 1 for days where the maximum temperature exceeds 34°C, indicating a very warm day.\ndesc is created to establish a link between the boxplot and the bar plot, enabling coordinated highlighting for enhanced data exploration and analysis.\n\nsummarise() function is used to calculate the number of warm days (wdays) at each combination of weather station and time period. Additionally, we compute the proportion of warm days to the total number of days (pct_warmdays) to assess the frequency of extreme heat events.\n\n\nwarmdays &lt;- dailytemp %&gt;% \n  mutate(warmday = ifelse(maximum_temperature_c &gt;= 34, 1, 0)) %&gt;% \n  group_by(station, year, month) %&gt;% \n  summarise(\n    totaldays = n(),\n    wdays = sum(warmday == 1),\n    pct_warmdays = (sum(warmday)/n())*100) %&gt;% \n  mutate(desc = paste0(station, \" in \", month, \" \", year)) %&gt;% \n  filter(pct_warmdays != 0)\n\nConsiderations for Visual and Interactivity\n\nOrdered by Ranks: The boxplots and bar plots are ordered based on their medians and percentages respectively. This facilitates easier identification of patterns and comparisons.\nTooltip Information: Jitter points display a description of the corresponding record upon hovering, providing contextual information. The tooltips for boxplots offer a statistical summary at the weather station and period level, including details such as median, minimum, maximum, and quartiles.\nZooming Functionality: The Zoom with rectangle function enables users to conduct detailed exploration of specific areas of the graph, particularly useful for densely plotted jitter points.\nColor Coding: Both charts are color-coded according to month, distinguishing between wet and dry seasons. Blue is used to represent the wet season, while brown is used for the dry season, aiding in seasonal identification within the visualisation.\nCoordinated Highlighting: Unlike the previous plot, this visualisation employs color to emphasize the corresponding point in the neighboring plot, as borders are less distinct against the backdrop of the boxplot, rendering highlights less effective. In this case, a light purple hue is utilized to direct attention to the selected boxplot or bar without obscuring pertinent information.\n\n\n\nShow the code\nbar &lt;- ggplot(warmdays,\n              aes(x = reorder(desc, -pct_warmdays),\n                  y = pct_warmdays,\n                  fill = month)\n              ) +\n  geom_bar_interactive(stat = \"identity\",\n           alpha = 0.5,\n           aes(data_id = desc,\n               tooltip = paste0(\n                 \"Station: \", station,\n                 \"\\nYear: \", year,\n                 \"\\nMonth: \", month,\n                 \"\\nTotal Days Recorded: \", totaldays,\n                 \"\\nWarm Days:\", wdays,\n                 \"\\n% of Warm Days Experienced: \", round(pct_warmdays,2), \"%\"\n               ))\n           ) +\n  scale_fill_manual(values = c(\"#a79271\", \"#4d6575\")) +\n  scale_y_continuous(labels = ~ paste0(.x, \"%\"))+  \n  scale_x_discrete(labels = scales::label_wrap(6)) +\n  labs(x = \"\",\n      y = \"\",\n      title=\"% of Very Warm Days (≥ 34°C)\",\n      fill = \"Month\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),  \n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.grid = element_blank(),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    axis.line.y = element_line(linewidth = 0.2),\n    axis.ticks.y = element_line(linewidth = 0.2),\n    axis.text  = element_text(angle=0, vjust=0.5, size=5)\n    ) \n\n\n# Prepare data for boxplot\ndailytemp &lt;- dailytemp %&gt;% \n  group_by(station, month, year) %&gt;% \n  mutate(desc = paste0(station, \" in \", month, \" \", year),\n         tooltip_bp = paste0(\n                 \"Station: \", station,\n                 \"\\nYear: \", year,\n                 \"\\nMonth: \", month,           \n                 \"\\nMedian Temp: \", round(median(maximum_temperature_c), 2), \"°C\",\n                 \"\\nQ1: \", round(quantile(maximum_temperature_c, 0.25), 2), \"°C\",\n                 \"\\nQ3: \", round(quantile(maximum_temperature_c, 0.25), 2), \"°C\",\n                 \"\\nMax Temp: \", round(max(maximum_temperature_c), 2), \"°C\",\n                 \"\\nMin Temp: \", round(min(maximum_temperature_c), 2), \"°C\"\n  )) %&gt;%  \n  ungroup()\n           \n\n# Plot boxplot\nbp &lt;-\n  ggplot(dailytemp, \n  aes(x = maximum_temperature_c,\n      y = reorder(desc, \n                  maximum_temperature_c, \n                  FUN = median),\n      fill = month\n      )) +\n  geom_boxplot_interactive(\n               outlier.shape = NA,\n               alpha = 0.5,\n               aes(data_id = desc,\n                   tooltip = tooltip_bp\n                   )\n                   ) +\n  geom_jitter_interactive(aes(data_id = desc,\n                              color = month,\n                              tooltip = paste0(\n                                \"Station: \", station,\n                                \"\\nDate: \", date,\n                                \"\\nMaximum Temp: \", maximum_temperature_c, \"°C\"\n                              )), \n                              position = position_dodge2(width = 0.75), \n                              size = 0.75,\n                              alpha = 0.55,\n                              show_guide = FALSE)+\n    scale_fill_manual(values = c(\"#a79271\", \"#4d6575\"))+\n    scale_color_manual(values = c(\"#a79271\", \"#4d6575\"))+\n  scale_x_continuous(labels = ~ paste0(.x, \"°\"))+    \n  labs(\n      title=\"Distribution of Max. Temperatures\",\n      fill = \"Month\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),  \n    panel.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    panel.grid = element_blank(),\n    legend.title = element_text(size = 5, face = \"bold\"),\n    legend.text = element_text(size = 6),\n    legend.background = element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"),\n    axis.line.x = element_line(linewidth = 0.2),\n    axis.ticks.x = element_line(linewidth = 0.2),\n    axis.text  = element_text(size=5),\n    axis.title = element_blank(),\n    legend.margin=margin(0,0,0,0),\n    #legend.box.margin=margin(-10,-10,-10,-10)\n    )   \n\nggiraph::girafe(code = print(bp + bar),\n                width_svg = 6,\n                height_svg = 6*0.7,\n                options = list(opts_tooltip(css = tooltip_css),\n                               opts_hover(css=\"fill: #d1c2de;\"),\n                               opts_zoom(min = 1, \n                                         max = 5)))   \n\n\n\n\n\n\n\nInsights:\n\nThe dry June season, observed across all locations, consistently displayed higher median maximum temperatures and narrower ranges, as depicted in the boxplot. Correspondingly, the barplot illustrates a higher proportion of very warm days during dry seasons.\nInterestingly, there are certain periods within the dataset where no very warm days were recorded, indicating temporary relief from extreme heat events.\nThe lower proportion of extreme heat events in 2023 aligns with our earlier analysis indicating a potential slowdown in temperature increases. This suggests a deviation from the previously observed upward trend in temperatures."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-geospatial-data",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "3.1 Importing Geospatial Data",
    "text": "3.1 Importing Geospatial Data\n\n\n\n\n\n\n\n\n\nFunction\nPackage\nDescription\nOutput\n\n\n\n\nst_read()\nsf\nImport MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame.\nSimple feature; multipolygon\n\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kytjy\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nLet us examine the content of mpsz by using the code chunk below.\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n1\n1\nMARINA SOUTH\nMSSZ01\nY\nMARINA SOUTH\nMS\nCENTRAL REGION\nCR\n5ED7EB253F99252E\n2014-12-05\n31595.84\n29220.19\n5267.381\n1630379.3\nMULTIPOLYGON (((31495.56 30...\n\n\n2\n1\nPEARL'S HILL\nOTSZ01\nY\nOUTRAM\nOT\nCENTRAL REGION\nCR\n8C7149B9EB32EEFC\n2014-12-05\n28679.06\n29782.05\n3506.107\n559816.2\nMULTIPOLYGON (((29092.28 30...\n\n\n3\n3\nBOAT QUAY\nSRSZ03\nY\nSINGAPORE RIVER\nSR\nCENTRAL REGION\nCR\nC35FEFF02B13E0E5\n2014-12-05\n29654.96\n29974.66\n1740.926\n160807.5\nMULTIPOLYGON (((29932.33 29...\n\n\n4\n8\nHENDERSON HILL\nBMSZ08\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n3775D82C5DDBEFBD\n2014-12-05\n26782.83\n29933.77\n3313.625\n595428.9\nMULTIPOLYGON (((27131.28 30...\n\n\n5\n3\nREDHILL\nBMSZ03\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n85D9ABEF0A40678F\n2014-12-05\n26201.96\n30005.70\n2825.594\n387429.4\nMULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-attribute-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-attribute-data",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "3.2 Importing Attribute Data",
    "text": "3.2 Importing Attribute Data\n\n\n\n\n\n\n\n\n\nFunction\nPackage\nDescription\nOutput\n\n\n\n\nread_csv()\nreadr\nImport respopagsex2011to2020.csv file into R as a dataframe called popagsex\ndataframe\n\n\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nLet us examine the content of mpsz.\n\n\n\n\n\n\nPA\nSZ\nAG\nSex\nTOD\nPop\nTime\n\n\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0_to_4\nMales\nHDB 1- and 2-Room Flats\n0\n2011\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0_to_4\nMales\nHDB 3-Room Flats\n10\n2011\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0_to_4\nMales\nHDB 4-Room Flats\n30\n2011\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0_to_4\nMales\nHDB 5-Room and Executive Flats\n50\n2011\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0_to_4\nMales\nHUDC Flats (excluding those privatised)\n0\n2011"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#data-wrangling",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "4.1 Data wrangling",
    "text": "4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\n\n\n\nPA\nSZ\nYOUNG\nECONOMY ACTIVE\nAGED\nTOTAL\nDEPENDENCY\n\n\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1440\n2610\n760\n4810\n0.8429119\n\n\nAng Mo Kio\nCheng San\n6640\n15460\n6050\n28150\n0.8208279\n\n\nAng Mo Kio\nChong Boon\n6150\n13950\n6470\n26570\n0.9046595\n\n\nAng Mo Kio\nKebun Bahru\n5540\n12090\n5120\n22750\n0.8817204\n\n\nAng Mo Kio\nSembawang Hills\n2100\n3410\n1310\n6820\n1.0000000"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#joining-the-attribute-data-and-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#joining-the-attribute-data-and-geospatial-data",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "4.2 Joining the attribute data and geospatial data",
    "text": "4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nImportant\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\nPA\nYOUNG\nECONOMY ACTIVE\nAGED\nTOTAL\nDEPENDENCY\ngeometry\n\n\n\n\n1\n1\nMARINA SOUTH\nMSSZ01\nY\nMARINA SOUTH\nMS\nCENTRAL REGION\nCR\n5ED7EB253F99252E\n2014-12-05\n31595.84\n29220.19\n5267.381\n1630379.3\nNA\nNA\nNA\nNA\nNA\nNA\nMULTIPOLYGON (((31495.56 30...\n\n\n2\n1\nPEARL'S HILL\nOTSZ01\nY\nOUTRAM\nOT\nCENTRAL REGION\nCR\n8C7149B9EB32EEFC\n2014-12-05\n28679.06\n29782.05\n3506.107\n559816.2\nOUTRAM\n1200\n2860\n2120\n6180\n1.1608392\nMULTIPOLYGON (((29092.28 30...\n\n\n3\n3\nBOAT QUAY\nSRSZ03\nY\nSINGAPORE RIVER\nSR\nCENTRAL REGION\nCR\nC35FEFF02B13E0E5\n2014-12-05\n29654.96\n29974.66\n1740.926\n160807.5\nSINGAPORE RIVER\n0\n40\n10\n50\n0.2500000\nMULTIPOLYGON (((29932.33 29...\n\n\n4\n8\nHENDERSON HILL\nBMSZ08\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n3775D82C5DDBEFBD\n2014-12-05\n26782.83\n29933.77\n3313.625\n595428.9\nBUKIT MERAH\n3150\n6900\n3320\n13370\n0.9376812\nMULTIPOLYGON (((27131.28 30...\n\n\n5\n3\nREDHILL\nBMSZ03\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n85D9ABEF0A40678F\n2014-12-05\n26201.96\n30005.70\n2825.594\n387429.4\nBUKIT MERAH\n2900\n6020\n1740\n10660\n0.7707641\nMULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#write-and-read-as-.rds",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#write-and-read-as-.rds",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "4.3 Write and Read as .rds",
    "text": "4.3 Write and Read as .rds\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\nread_rds(\"data/rds/mpszpop2020.rds\")\n\nSimple feature collection with 323 features and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area              PA YOUNG ECONOMY ACTIVE AGED\n1  29220.19   5267.381  1630379.3            &lt;NA&gt;    NA             NA   NA\n2  29782.05   3506.107   559816.2          OUTRAM  1200           2860 2120\n3  29974.66   1740.926   160807.5 SINGAPORE RIVER     0             40   10\n4  29933.77   3313.625   595428.9     BUKIT MERAH  3150           6900 3320\n5  30005.70   2825.594   387429.4     BUKIT MERAH  2900           6020 1740\n6  29991.38   4428.913  1030378.8     BUKIT MERAH  3340           6800 3420\n7  30230.86   3275.312   551732.0     BUKIT MERAH  3130           7700 3610\n8  30222.86   2208.619   290184.7 SINGAPORE RIVER     0             50   10\n9  29893.78   6571.323  1084792.3      QUEENSTOWN  1290           2600  610\n10 30104.18   3454.239   631644.3      QUEENSTOWN    50            140   60\n   TOTAL DEPENDENCY                       geometry\n1     NA         NA MULTIPOLYGON (((31495.56 30...\n2   6180  1.1608392 MULTIPOLYGON (((29092.28 30...\n3     50  0.2500000 MULTIPOLYGON (((29932.33 29...\n4  13370  0.9376812 MULTIPOLYGON (((27131.28 30...\n5  10660  0.7707641 MULTIPOLYGON (((26451.03 30...\n6  13560  0.9941176 MULTIPOLYGON (((25899.7 297...\n7  14440  0.8753247 MULTIPOLYGON (((27746.95 30...\n8     60  0.2000000 MULTIPOLYGON (((29351.26 29...\n9   4500  0.7307692 MULTIPOLYGON (((20996.49 30...\n10   250  0.7857143 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "5.1 Plotting a choropleth map quickly by using qtm()",
    "text": "5.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\n\\[QTM = Quick\\ Thematic\\ Maps\\]\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\npar(bg = '#f5f5f5')\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "5.2 Creating a choropleth map by using tmap’s elements",
    "text": "5.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\n\n\n\n\n\n5.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons() +\n  \n  tm_layout(bg.color = \"#f5f5f5\",\n            frame= FALSE)\n\n\n\n\n\n\n5.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\") +\n\n  tm_layout(bg.color = \"#f5f5f5\",\n            frame = FALSE)\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”.\nThe default colour scheme used is YlOrRd of ColorBrewer.\nBy default, Missing value will be shaded in grey.\n\n\n\n5.2.3 Drawing a choropleth map using tm_fill() and tm_border()\ntm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\n\nfill &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  \n  tm_layout(bg.color = \"#f5f5f5\",\n            frame= FALSE)\n\nborder &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1) +\n  \n  tm_layout(bg.color = \"#f5f5f5\",\n            frame= FALSE)\n\ntmap_arrange(fill, border, nrow =1, ncol =2)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map when tm_borders() is used.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "5.3 Data Classification Methods of tmap",
    "text": "5.3 Data Classification Methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total 10 data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n5.3.1 Plotting choropleth maps with built-in classification methods\n\n5.3.1.1 Different Classification Methods\n\n\nShow the code\npretty &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Pretty\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"bottom\"),\n            legend.height = .45,\n            legend.width = .2,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            )\n\njenks &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Jenks\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"bottom\"),\n            legend.height = .45,\n            legend.width = .2,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            )  \n\nequal &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"bottom\"),\n            legend.height = .45,\n            legend.width = .2,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            )  \n\nkmeans &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Kmeans\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"bottom\"),\n            legend.height = .45,\n            legend.width = .2,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            )  \n\ntmap_arrange(pretty, jenks,\n             equal, kmeans)\n\n\n\n\n\n\n\n5.3.1.2 Different Number of Classes\n\n\nShow the code\np2 &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"n = 2\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"bottom\"),\n            legend.height = .45,\n            legend.width = .2,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            )\n\np5 &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"n = 5\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"bottom\"),\n            legend.height = .45,\n            legend.width = .2,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            )\n\np7 &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 7,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"n = 7\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"bottom\"),\n            legend.height = .45,\n            legend.width = .2,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            )  \n\np10 &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"n = 10\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"bottom\"),\n            legend.height = .45,\n            legend.width = .2,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            ) \n\ntmap_arrange(p2, p5,\n             p7, p10)\n\n\n\n\n\n\n\n\n5.3.2 Plotting choropleth map with custom break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). In tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\n  tm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5) +\n  \n  tm_layout(frame = FALSE,\n            bg.color = \"#f5f5f5\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#colour-scheme",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "5.4 Colour Scheme",
    "text": "5.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\nUsing ColourBrewer paletteReverse Colours\n\n\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5) +\n  \n  tm_layout(frame = FALSE,\n            bg.color = \"#f5f5f5\")\n\n\n\n\n\n\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#map-layouts",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "5.5 Map Layouts",
    "text": "5.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks\n\n5.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE,          #&lt;&lt;\n          legend.is.portrait = TRUE,   #&lt;&lt;\n          legend.hist.z = 0.1) +       #&lt;&lt;\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.42, \n            legend.width = 0.33,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE,\n            bg.color = \"#f5f5f5\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n5.5.2 Map Style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n5.2.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nThe code chunk below resets to the default style:\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "5.6 Drawing Small Multiple Choropleth Maps",
    "text": "5.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the aesthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n5.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill().\n\nmultival &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            main.title = c(\"Young vs Aged\"),\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            frame = FALSE,\n            bg.color = \"#f5f5f5\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\") \n\ntmap_arrange(multival, nrow = 1, ncol = 1)\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\nmultival2 &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE,\n            bg.color = \"#f5f5f5\")\n\ntmap_arrange(multival2, nrow = 1,  ncol=1)\n\n\n\n\n\n\n5.6.2 Fun features I learnt from ISSS624 Geospatial Analytics :)\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(mpsz_pop2020)+ \n  tm_fill(c(\"DEPENDENCY\",\"AGED\"),\n          palette = list(\"Blues\", \"Purples\"),\n          alpha = 0.7,\n          style=\"jenks\",\n          id = \"SUBZONE_N\",\n          popup.vars=c(\"Planning Area: \" = \"PA\",\n                       \"Subzone\" = \"SUBZONE_N\",\n                       \"No. of Aged\" = \"AGED\",\n                       \"Dependency Ratio\" = \"DEPENDENCY\")) +\n  #tm_scale_bar(width= 0.15) +\n  tm_layout(\n    title = c(\"Dependency Ratio\", \"Number of Aged\"))+\n  tm_view(view.legend.position = c(\"right\", \"bottom\"))+\n  tm_facets(sync = TRUE,\n           ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFun Stuff!\n\ntm_basemap(OpenStreetMap): Helps plot different types of the background maps. Default CartoDB.Positron, CartoDB.DarkMatter, OpenStreetMap, Esri.WorldImagery, OpenTopoMap see here for available map types\nalpha: Can be used to adjust oapacity of fills (regions), enabling users to still peek through the basemap.\nstyle = \"cont\": Three continuous methods exist in tmap: cont, order, and log10. The cont style creates a smooth, linear gradient. In other words, the change in values is proportionally related to the change in colours.\nid: Maps the variable shown when an area is hovered upon.\npopup.vars: Popup on click which allows for more information to be included.\nfacet and sync: Navigation in view mode (zooming and panning) is synchronized between facets.\ntm_view(): Options for interactive tmap viewer.\n\n\n\n\n5.6.3 By defining a group-by variable in tm_facets()\n\ntmap_mode(\"plot\")\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n5.6.4 Animated tmaps\nOne problem with the faceted maps is that with more values of a variable (e.g. time), more maps are created, which quickly clutters our vision. We can solve this by using animated maps.\nTo create an animated map:\nStep 1: Create a set of separate maps by using the along argument of the function tm_facets(), the same function that we just used to create faceted maps.\nStep 2: Combine those separate maps and save the result as a GIF file using the function tmap_animation().\nSome important arguments of tmap_animation():\n\ndelay: specify how many milliseconds should elapse between each image.\nloop: specify whether the GIF is an endless loop or ends after a certain number of rounds. Default is TRUE.\n\n\nm1 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(along=\"REGION_N\")\n\ntmap_animation(m1, filename=\"images/m1.gif\", width=800, delay=40)\n\n\n\n\n\n\n\n\n5.6.5 By creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\") +\n  tm_layout(frame = FALSE,\n            bg.color = \"#f5f5f5\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")+\n  tm_layout(frame = FALSE,\n            bg.color = \"#f5f5f5\")\n\ntmap_arrange(youngmap, agedmap, ncol=2, nrow=1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "5.7 Mapping Spatial Object Meeting a Selection Criterion",
    "text": "5.7 Mapping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE,\n            bg.color = \"#f5f5f5\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "",
    "text": "In this chapter, you will learn how to plot functional and truthful choropleth maps in R by using the tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#the-data",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nIt consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#data-import-and-preparation",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "3.2 Data Import and Preparation",
    "text": "3.2 Data Import and Preparation\n\n\n\n\n\n\n\n\n\nFunction\nPackage\nDescription\nOutput\n\n\n\n\nread_csv()\nreadr\nImport SGPools_svy21.csv into R\nTibble data frame\n\n\n\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nLet’s examine if the datafile has been imported correctly:\n\n\n[[1]]\n# A tibble: 5 × 7\n  NAME            ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n  &lt;chr&gt;           &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n1 Livewire (Mari… 2 Bayf…    18972 30842. 29599. Branch                        5\n2 Livewire (Reso… 26 Sen…    98138 26704. 26526. Branch                       11\n3 SportsBuzz (Kr… Lotus …   738078 20118. 44888. Branch                        0\n4 SportsBuzz (Po… 1 Sele…   188306 29777. 31382. Branch                       44\n5 Prime Serangoo… Blk 54…   552542 32239. 39519. Branch                        0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "3.3 Creating a sf data frame from an aspatial data frame",
    "text": "3.3 Creating a sf data frame from an aspatial data frame\n\n\n\n\n\n\n\n\n\nFunction\nPackage\nDescription\nOutput\n\n\n\n\nst_as_sf()\nsf\nConverts sgpools data frame into a simple feature data frame\nSimple feature\n\n\n\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by refering to epsg.io.\n\nQuick Comparison of the 2 datasets:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNAME\nADDRESS\nPOSTCODE\nXCOORD\nYCOORD\nOUTLET TYPE\nGp1Gp2 Winnings\n\n\n\n\nLivewire (Marina Bay Sands)\n2 Bayfront Avenue, #01-01 The Shoppes at Marina Bay Sands Singapore 018972\n18972\n30841.56\n29598.56\nBranch\n5\n\n\nLivewire (Resorts World Sentosa)\n26 Sentosa Gateway #B1-208 Singapore 098138\n98138\n26703.87\n26525.70\nBranch\n11\n\n\nSportsBuzz (Kranji)\nLotus Lounge, Level 2, 1 Turf Club Avenue Singapore Racecourse Singapore 738078\n738078\n20117.93\n44888.06\nBranch\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNAME\nADDRESS\nPOSTCODE\nOUTLET TYPE\nGp1Gp2 Winnings\ngeometry\n\n\n\n\nLivewire (Marina Bay Sands)\n2 Bayfront Avenue, #01-01 The Shoppes at Marina Bay Sands Singapore 018972\n18972\nBranch\n5\nPOINT (30841.56 29598.56)\n\n\nLivewire (Resorts World Sentosa)\n26 Sentosa Gateway #B1-208 Singapore 098138\n98138\nBranch\n11\nPOINT (26703.87 26525.7)\n\n\nSportsBuzz (Kranji)\nLotus Lounge, Level 2, 1 Turf Club Avenue Singapore Racecourse Singapore 738078\n738078\nBranch\n0\nPOINT (20117.93 44888.06)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#interactive-point-symbol-map",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "4.1 Interactive Point Symbol Map",
    "text": "4.1 Interactive Point Symbol Map\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"salmon\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1,\n           alpha = 0.7)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#proportional-symbols",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#proportional-symbols",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "4.2 Proportional Symbols",
    "text": "4.2 Proportional Symbols\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"salmon\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1,\n           alpha = 0.7)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#qualitative-colours",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#qualitative-colours",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "4.3 Qualitative Colours",
    "text": "4.3 Qualitative Colours\nA continuous variable is mapped to size while a categorical variable is mapped to colour.\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1,\n          alpha = 0.7)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#coordinated-facet",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#coordinated-facet",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "4.4 Coordinated Facet",
    "text": "4.4 Coordinated Facet\nThe argument sync in tm_facets() can be used to produce multiple maps with synchronised zoom and pan settings.\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1,\n          id = \"Name\",\n          popup.vars=c(\"Name: \" = \"NAME\",\n                       \"Address: \" = \"ADDRESS\",\n                       \"Winnings: \" = \"Gp1Gp2 Winnings\")\n          ) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSwitch tmap’s Viewer back to plot mode to revert settings back to default.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "",
    "text": "# 1 Overview\nIn this in-class exercise, qw will gain hands-on experience on using appropriate R methods to plot analytical maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#loading-packages",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "2.1 Loading Packages",
    "text": "2.1 Loading Packages\nIn this exercise, we will be using the following packages:\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\ntmap\nFor choropleth mapping.\n\n\ntidyverse\nreadr: For importing delimited text file.\ntidyr: For tidying data.\ndplyr: For data wrangling.\n\n\nsf\nFor handling geospatial data.\n\n\nknitr\nFor html tables\n\n\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#importing-data",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level.\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n\n\n\n\n\n\n\nFunction\nPackage\nDescription\nOutput\n\n\n\n\nread_rds()\nreadr\nImport NGA_wp.rds into R | R object |"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#checking-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#checking-the-data",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "2.3 Checking the Data",
    "text": "2.3 Checking the Data\n\nlist(head(NGA_wp, 5))\n\n[[1]]\nSimple feature collection with 5 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 481088 ymin: 98142.39 xmax: 1248985 ymax: 1079710\nProjected CRS: Minna / Nigeria Mid Belt\n    ADM2_EN ADM2_PCODE                   ADM1_EN ADM1_PCODE\n1 Aba North   NG001001                      Abia      NG001\n2 Aba South   NG001002                      Abia      NG001\n3    Abadam   NG008001                     Borno      NG008\n4     Abaji   NG015001 Federal Capital Territory      NG015\n5      Abak   NG003001                 Akwa Ibom      NG003\n                        geometry total_wp wp_functional wp_nonfunctional\n1 MULTIPOLYGON (((548795.5 11...       17             7                9\n2 MULTIPOLYGON (((547286.1 11...       71            29               35\n3 MULTIPOLYGON (((1248985 104...        0             0                0\n4 MULTIPOLYGON (((510864.9 57...       57            23               34\n5 MULTIPOLYGON (((594269 1209...       48            23               25\n  wp_unknown\n1          1\n2          7\n3          0\n4          0\n5          0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#deriving-proportion-of-functional-water-points-and-non-functional-water-points",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#deriving-proportion-of-functional-water-points-and-non-functional-water-points",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points",
    "text": "4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#plotting-map-of-rate",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#plotting-map-of-rate",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "4.2 Plotting map of rate",
    "text": "4.2 Plotting map of rate\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = .5) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            main.title.size = 1,\n            main.title.position = \"center\",          \n            legend.outside = TRUE,\n            frame = FALSE,\n            bg.color = \"#f5f5f5\"\n            )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#percentile-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#percentile-map",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "8.1 Percentile Map",
    "text": "8.1 Percentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#box-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#box-map",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "8.2 Box Map",
    "text": "8.2 Box Map"
  }
]