[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_bar",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.1 geom_bar",
    "text": "7.1 geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data = exam_data, \n       aes(x = reorder(RACE, RACE, function(x)-length(x)))) +\n    geom_bar()+\n    ylim(0, 220) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n    labs(x = \"Race\",\n         y = \"No. of\\nStudents\",\n         title = \"Number of Students by Race\") + \n    theme_grey() +\n    theme(\n      axis.title.y = element_text(hjust=1, angle=0),\n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_dotplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.2 geom_dotplot",
    "text": "7.2 geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks= NULL) +     \n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_histogram",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.3 geom_histogram",
    "text": "7.3 geom_histogram\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(binwidth=10,color='white') +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.4 Modifying a geometric object by changing geom()",
    "text": "7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20\nfill argument is used to shade the histogram with color\ncolor argument is used to change the outline colour of the bars\ngeom_vline is used to add mean and median lines\nannotate is used to include descriptions for each line\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) + \n    geom_histogram(bins=20, \n                   color=\"grey30\", \n                   fill=\"#E1C8C4\") +\n    labs(x = \"Math Score\",\n         y = \"No. of Pupils\",\n         title = \"Distribution of Math Scores\") + \n    geom_vline(aes(xintercept=median(exam_data$MATHS, na.rm=T)),\n               color=\"#595DE5\", linewidth=1, linetype=\"dashed\") + \n    # Add line annotations\n    annotate(\n      \"text\", \n      x = 82, \n      y = 50,\n      label = paste(\"Median =\", round(median(exam_data$MATHS, na.rm=T), 3)),\n      color = \"#595DE5\",\n      size = 3.5\n    ) +\n    geom_vline(aes(xintercept=mean(exam_data$MATHS, na.rm=T)),\n               colour=\"red\", linewidth=1, linetype=\"dashed\") + \n      # Add line annotations\n    annotate(\n      \"text\", \n      x = 60, \n      y = 42,\n      label = paste(\"Mean =\", round(mean(exam_data$MATHS, na.rm=T), 3)),\n      color = \"red\",\n      size = 3.5\n    ) +\n    theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\nChanged no. of binsUsing binwidthBin alignment using boundary & center\n\n\n\n\nShow the code\n# Original\nb_p1 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"20 bins\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n# Changed\nb_p2 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=30, \n                 boundary = 100,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"30 bins\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n# format plot layout\nb_p1 + b_p2\n\n\n\n\n\n\n\n\n\nShow the code\n# Original\nbw_p1 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"20 bins\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))  \n\n# Changed\nbw_p2 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(#bins=20, \n                 boundary = 100,\n                 binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"Binwidth 5 = 19 bins\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n# format plot layout\nbw_p1 + bw_p2\n\n\n\n\n\n\n\nBe mindful of the boundaries of the bins and whether a point will fall into the left or right bin if it is on a boundary.\n\n\nShow the code\n# Original\nbb_p1 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"Bin alignment using boundary\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n  \n# Changed\nbb_p2 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20, \n                 center = 50,\n                 #binwidth=5, \n                 color= 'white',\n                 fill='grey') +\n  theme_gray() +\n  theme(panel.background=element_rect(fill='grey96')) +\n  labs(x = \"Math Score\",\n       y = \"No. of Pupils\",\n       title = \"Bin alignment using center\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n# format plot layout\nbb_p1 + bb_p2\n\n\n\n\n\nNote: Don’t use both boundary and center for bin alignment. Just pick one.\n\n\n\n\nbins: default bin number is 30 in ggplot2\nboundary: bin position specifier\nbinwidth: bin breaks automatically based on a specific binwidth; can be used to specify the endpoint of any bin or center to specify the center of any bin"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.5 Modifying a geometric object by changing aes()",
    "text": "7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of *aesthetic()*.\nscale_fill_manual() allow you to specify your own set of mappings from levels in the data to aesthetic values.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill = GENDER)) +\n         geom_histogram(bins =20,\n                        color='grey40')+\n  scale_fill_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_density",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.6 geom_density",
    "text": "7.6 geom_density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot, where y = relative frequency / binwidth.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density(color='#7F948F')+\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\nChanges: - color within geom_density needs to be removed. - added fill and color within aes() - scale_color_manual() for changing line color - scale_fill_manual() for changing area fill colors.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill = GENDER,\n           color=GENDER)) +\n  geom_density(size=2, \n               alpha=0.6)+\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n  scale_fill_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n    labs(x = \"Maths Score\",\n       y = \"Density\",\n       title = \"Density of Maths Score by Gender\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_boxplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.7 geom_boxplot",
    "text": "7.7 geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nWe can also incorporate facet_wrap() to create boxplots of math scores for each class that is separated by gender.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_violin",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.8 geom_violin",
    "text": "7.8 geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_point",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.9 geom_point",
    "text": "7.9 geom_point\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point(), grouped by gender.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= ENGLISH,\n           color = GENDER)) +\n  geom_point() +\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\")) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nTo add reference lines and x/y axis limits:\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y = MATHS, \n           color = GENDER)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\")) +\n  geom_vline(aes(xintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\") + \n  geom_hline(aes(yintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\") +  \n  labs(x = \"English Score\",\n       y = \"Maths Score\",\n       title = \"Maths against English Score by Gender\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combination-of-geom-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combination-of-geom-objects",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.10 Combination of geom objects",
    "text": "7.10 Combination of geom objects\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\nImportant:\nOrder of geom layer matters! In the code below, boxplot is plotted after/above the scatter and thus covers parts of the scatterplot.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n\n  geom_point(position = 'jitter',\n             size=0.5) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.1 Working with stat()",
    "text": "8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data,\n       aes( y= MATHS, x = GENDER)) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.2 Working with stat - the stat_summary() method",
    "text": "8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = 'point',\n               fun.y='mean',\n               colour = 'red',\n               size=4) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.3 Working with stat - the geom() method",
    "text": "8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)  +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-best-fit-curve",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-best-fit-curve",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.4 Adding best fit curve",
    "text": "8.4 Adding best fit curve\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=1) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe default method used is loess.\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=1, method = lm) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nTo add equation and R^2 to the plot, we can use the library ggpmisc.\n\npacman::p_load(ggpmisc)\n\nstat_poly_line() is used to add lm line and stat_poly_eq() displays the equation and R-square value.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  stat_poly_line() +\n  stat_poly_eq(use_label(c(\"eq\", \"R2\"))) +\n  geom_point() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "9.1 Working with facet_wrap()",
    "text": "9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Class\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nTilde Operator:\nThe operator ~ is used to define the relationship between dependent variable and independent variables in a formula; it separates the lefthand side and righthand side.\nThe basic syntax for the lm() function is: model &lt;- lm(y ~ x1 + x2, data=df)\nThe variable name on the left side of the tilde operator (y) represents the response variable. The variable names on the right side of the tilde operator (x1, x2) represent the predictor variables.\nFor multiple predictor variables: model &lt;- lm(y ~ x1 + x2 + x3, data=df)\nFor unknown number of predictor variables: model &lt;- lm(y ~ ., data=df)\n\n9.1.1 Subsetting Data\nIf we only want to visualise classes 3A, 3B, 3C, 3D, we could subset the exam data to include only these students using filter() from the dplyr package.\n\nsub_data &lt;- exam_data %&gt;% \n  filter(CLASS %in% c('3A', '3B', '3C', '3D'))\n\nggplot(data=sub_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores for Classes 3A, 3B, 3C, 3D\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n9.1.2 Multiple Overlaid Histograms\n\nggplot(data=exam_data,\n       aes(x=MATHS, fill = GENDER)) + #Add fill to split histogram categories\n  geom_histogram(position = \"identity\", alpha=0.2, bins=20) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Gender\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nReferences: StatisticsGlobe and Facetted histograms with overlaid normal curves\n\n\n9.1.3 Grouped Data\n\nBy ColumnBy Row\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER, nrow = 2, strip.position = \"right\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "9.2 facet_grid() function",
    "text": "9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Class\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "10.1 Working with Coordinate",
    "text": "10.1 Working with Coordinate\nBar chart of ggplot2 is in vertical form by default.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n    labs(y='Number of students', \n       x='Race',\n       title = \"Number of Students by Race\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\nNote: No changes to x-, y- axis names under labs().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n    labs(y='Number of students', \n       x='Race',\n       title = \"Number of Students by Race\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "10.2 Changing the y- and x-axis range",
    "text": "10.2 Changing the y- and x-axis range\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n      labs(y='English', \n       x='Maths',\n       title = \"Graph of English against Maths scores\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n  coord_cartesian (xlim=c(0,100),\n                   ylim= c(0,100))+\n        labs(y='English', \n       x='Maths',\n       title = \"Graph of English against Maths scores\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.1 Working with ggtheme package",
    "text": "4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\ntheme_economisttheme_hc()\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90',size=0.8) +\n  theme_economist() +\n  labs(y= 'No. of \\nPupils') +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle('Distribution of Math scores')\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90',size=0.8) +\n  theme_solarized() +\n  labs(y= 'No. of \\nPupils') +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle('Distribution of Math scores')\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Refer to this vignette and ggthemes to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthemes-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.2 Working with hrbthemes package",
    "text": "4.2 Working with hrbthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used. The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\n\nOriginalWith Elements\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90') +\n  theme_ipsum() +\n  labs(y= 'No. of \\nPupils') +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle('Distribution of Math scores')\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_histogram(binwidth=5,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90') +\n  theme_ipsum(axis_title_size = 15,\n              base_size=12,\n              grid= 'Y') +\n labs(y= 'No. of \\nPupils') +\n theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle('Distribution of Math scores')\n\n\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 15,\nbase_size argument is used to increase the default axis label to 12, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.1 Creating Composite Graphics: pathwork methods",
    "text": "5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, we use ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax, such as:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.2 Combining two ggplot2 graphs",
    "text": "5.2 Combining two ggplot2 graphs\nFigure below shows a composite of two histograms created using patchwork.\n\nHorizontalVerticalChange relative area\n\n\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\nShow the code\np1 / p2\n\n\n\n\n\n\n\n\n\nShow the code\np1 + p2 + plot_layout(ncol=2,widths=c(2,1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.3 Combining three ggplot2 graphs",
    "text": "5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n/ and | Operators- Operator For Subtrack PlacementNested LayoutsAdding non-ggplot content\n\n\n\n\nShow the code\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\nShow the code\np1 + p2 - p3 + plot_layout(ncol=1)\n\n\n\n\n\n\n\n\n\nShow the code\np3 + {\n  p1 + p2 + plot_layout(ncol=1)\n}\n\n\n\n\n\n\n\n\n\nShow the code\n((p1 / p2) | p3) + grid:: textGrob('I can add \\nother content here.',\n                                   hjust=0, \n                                   x=-0, \n                                   gp=grid::gpar(font=3, \n                                                 fontsize = 12))\n\n\n\n\n\n\n\n\nTo learn more about, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.4 Creating a composite figure with tag",
    "text": "5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nEnumerationCustom / multilevel tagging\n\n\n\n\nShow the code\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I') # Can also use tag_levels ='A'\n\n\n\n\n\n\n\n\n\nShow the code\n((p1 / p2) | p3)  + \n  plot_layout(tag_level = 'new') +\n  plot_annotation(tag_levels = c('A', '1'), tag_prefix = 'Fig. ', tag_sep = '.', \n                  tag_suffix = ':')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-inset",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-inset",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.5 Creating figure with inset",
    "text": "5.5 Creating figure with inset\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n\nShow the code\np4 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np5 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np6 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Correlation between\\nEnglish & Maths scores\")\n\np6 +  inset_element(p5,\n                    left = 0.02,\n                    bottom=0.7,\n                    right= 0.5,\n                    top=1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\ntheme_economisttheme_solarized_2\n\n\n\npatchwork &lt;- ((p4/p5) | p6)\n\npatchwork & theme_economist() +\n  theme(plot.title=element_text(size =10),\n                                        axis.title.y=element_text(size = 9,\n                                                                  angle = 0,\n                                                                  vjust=0.9),\n                                         axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\npatchwork & theme_solarized_2() +\n  theme(plot.title=element_text(size =10),\n                                        axis.title.y=element_text(size = 9,\n                                                                  angle = 0,\n                                                                  vjust=0.9),\n                                         axis.title.x=element_text(size = 9))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "3.1 Tooltip effect with tooltip aesthetic",
    "text": "3.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\nSteps in creating an interactive graphic:\n\nInstead of geom_point (i.e.), use geom_point_interactive - provide at least one of the aesthetics tools (tooltip, data_id or onclick)\nCall function girafe with the ggplot object to translate graphic into a web interactive graphic.\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=ID),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)  #null to suppress axis labels\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed. To set index as the tooltip, replace with row.names(exam_data). To set numeric values as tooltip, replace with factor(MATHS).\n\n3.1.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. We create a new column [tooltip] in exam_data by concatenating ID and Class.\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\nShow the code\nexam_data$tooltip &lt;- c(paste0(\"Name = \",\n                              exam_data$ID,\n                              \"\\n Class = \",\n                              exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=tooltip),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)  #null to suppress axis labels\n\ngirafe(ggobj=p,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n3.1.2 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by adding css declarations.\n\nCodeInteractive Plot 1Interactive Plot 2\n\n\n\ntooltip_css &lt;- 'background-color:#dfdfeb; font-style:bold; color:black;'  #&lt;&lt;&lt;\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=tooltip),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)  #null to suppress axis labels\n\ngirafe(ggobj=p,\n       width_svg = 8,\n       height_svg = 8*0.618,\n       options = list(          #&lt;&lt;&lt;\n         opts_tooltip(          #&lt;&lt;&lt;\n           css=tooltip_css\n         )\n       ))\n\n\n\nNotice that the background colour of the tooltip is gray and the font colour is black and bold.\n\n\n\n\n\n\n\n\nFor demonstration purposes, we can also make the font italic and change the font size.\n\n\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n3.1.3 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\nShow the code\ntooltip &lt;- function(y, ymax, accuracy = 0.01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales:: number (ymax-y, accuracy = accuracy)\n  paste(\"Mean maths scores (with standard error):\" , mean, \"+/-\", sem)\n}\n\n\ngg_point &lt;- ggplot(data=exam_data,\n                   aes(x = RACE)) +\n  stat_summary(aes(y=MATHS,\n                   tooltip = after_stat(tooltip(y, ymax))),\n               fun.data = mean_se,\n               geom = GeomInteractiveCol,\n               fill = 'lightblue') +\n  stat_summary(aes(y= MATHS),\n               fun.data = mean_se,\n               geom= 'errorbar',\n               width = 0.2,\n               size = 0.2)\n\ngirafe(ggobj=gg_point,\n       width_svg = 8,\n       height_svg = 8 * 0.618)\n\n\n\n\n\n\nExplanation of the codes above:\n\nTooltip self-defined function:\n\n\nIt takes in two arguments y and ymax from results of stat_summary() via after_stat().\naccuracy is a fixed parameter with a value of 0.01. It takes a number to round to, ie 0.01 is used to show 2 decimal places of precision.\nscales:: number is to convert number to text, with formatting.\nsem output: Since ymax = y + se, thus, sem = ymax-y\nIt outputs “Mean maths scores (with standard error): 57.44 +/- 2.03”\n\n\nStat_summary function creates 2 other geom layers. The first stat summary function has two aes mappings to visual: (1) MATHS as Y (2) tooltip output\n\n\nIt first applies mean_se method to output y, ymin, ymax for each MATHS score by RACE\nAfter this, these groups of 3 values are send into tooltip function via after_stat() helper function\nGeomInteractive makes the columns interactive so tooltips is displayed when users hover over\n\n\nThe second stat summary uses y, ymin, ymax obtained from method= mean_se to plot the error bar\n\nDocumentation of mean_se:\nstat_summary(aes(fun.data=mean_se) is default. mean_se(x, mult = 1). When input a list of values, it returns a data frame with three columns:\n\ny: The mean.\nymin: The mean minus the multiples of the standard error.\nymax: The mean plus the multiples of the standard error.\n\nThere are a few summary functions from the Hmisc package which are reformatted for use in stat_summary(). They all return aesthetics for y, ymax, and ymin.\n\nmean_cl_normal(): Returns sample mean and 95% confidence intervals assuming normality (i.e., t-distribution based)\nmean_sdl(): Returns sample mean and a confidence interval based on the standard deviation times some constant\nmean_cl_boot(): Uses a bootstrap method to determine a confidence interval for the sample mean without assuming normality.\nmedian_hilow(): Returns the median and an upper and lower quantiles.\n\n\n\n3.1.4 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\nShow the code\np &lt;- ggplot(data= exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(data_id=CLASS),\n                           stackgroups = TRUE,\n                           binwidth= 1,\n                           method = 'histodot') +\n  scale_y_continuous( NULL,\n                      breaks = NULL)\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6 *0.618)\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n3.1.5 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(data_id = CLASS),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)  #null to suppress axis labels\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(                          #&lt;&lt;&lt;\n         opts_hover(css='fill: #202020;'),      #&lt;&lt;&lt;\n         opts_hover_inv(css = 'opacity: 0.2;')  #&lt;&lt;&lt;\n         )\n       )\n\n\n\n\n\n\nNote: Different from previous example (tooltip_css is pre-defined as input to a parameter in girafe(options=list(opts_tooltip(css=tooltip_css)))), in this example the ccs customisation request are encoded directly as girafe(options=list(opts_hover(css='tooltip_css'fill:#202020;')))\n\n\n3.1.6 Combining tooltip and hover effect\nThere are times that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip = CLASS,  #&lt;&lt;&lt; Tooltip popup\n                               data_id = CLASS), #&lt;&lt;&lt;\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)  #null to suppress axis labels\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(                          #&lt;&lt;&lt;\n         opts_hover(css='fill: blue;'),         #&lt;&lt;&lt;\n         opts_hover_inv(css = 'opacity: 0.2;')  #&lt;&lt;&lt;\n         )\n       )\n\n\n\n\n\n\n\n\n3.1.7 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick. Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\nShow the code\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n\n\n\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n3.1.8 Coordinated Linked Plots with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),      #&lt;&lt;&lt; Added          \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) +    #&lt;&lt;&lt; p1 same as p2 x-axis\n  scale_y_continuous(NULL,            # suppress y axis\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),      #&lt;&lt;&lt; Added                \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) +    #&lt;&lt;&lt; p1 same as p2 x-axis\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),         #&lt;&lt;&lt; coordinated multiple views\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nNote: hover effects can be encoded directly in girafe unlike tooltips and data_id . Added tooltip aes effects as well.\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "4.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example an interactive plot created by using plot_ly()\n\n\nShow the code\nplot_ly(data=exam_data,\n        x=~MATHS,\n        y=~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.2 Working with visual variable: plot_ly() method",
    "text": "4.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE). Click on the colour symbol at the legend to only show the RACE selected.\n\n\nShow the code\nplot_ly(data=exam_data,\n        x= ~ENGLISH,\n        y= ~MATHS,\n        color=~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "4.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\nBasicCustomised Tooltip\n\n\n\np &lt;- ggplot(data = exam_data,\n            aes(x= MATHS,\n                y= ENGLISH)) +\n  geom_point (size =1) +\n  geom_smooth(method=lm)+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  labs(y= 'ENGLISH') +                                    \n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +   #&lt;&lt;&lt; does not work in ggplotly\n  ggtitle('English and Math scores')\n\nggplotly(p)\n\n\n\n\n\n\n\n\np_c &lt;- ggplot(data = exam_data,\n            aes(x= MATHS,\n                y= ENGLISH,\n                color=CLASS,\n                label1=ID,\n                label1=GENDER,\n                label2=RACE\n                )) +\n  geom_point (size =1) +\n  geom_smooth(method=lm)+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  labs(x='Math', \n       y= 'English',\n       color=\"Class\") +                                    \n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +   #&lt;&lt;&lt; does not work in ggplotly\n  ggtitle('English and Math scores')\n\nggplotly(p_c, tooltip=c(\"label1\", \"label2\", \"label3\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-linked-plots-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-linked-plots-with-plotly",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.4 Coordinated Linked Plots with plotly",
    "text": "4.4 Coordinated Linked Plots with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\nShow the code\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) \n# labs(x='Maths',\n#       y='English')\n\nsubplot(ggplotly(p1),\n        ggplotly(p2)) %&gt;% \n  layout(xaxis = list(title = \"Math\"),\n         yaxis = list(title = \"English\"))\n\n\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk\n\nDifference between 3.1.8 and 4.4\n3.1.8:interactive geom functions of ggiraph & girafe(patchwork) used\n4.4 : highlight_key() , normal ggplot + geom_obj , subplot(ggplot(p1), ggplot(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "5.1 Interactive Data Table: DT package",
    "text": "5.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\n\nShow the code\nDT::datatable(exam_data, \n              class='compact',\n              options = list(pageLength = 3))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "5.2 Linked brushing: crosstalk method",
    "text": "5.2 Linked brushing: crosstalk method\n\n\nShow the code\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,\n                  DT::datatable(d, options = list(pageLength = 3)),\n                  widths=5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhighlight_key(): used to create a unique identifier for each row in a data frame, based on its values. The resulting identifier is used to keep track of the rows that have been selected or highlighted on a plot, particularly when using the highlight() function.\nplotly_selected: a built-in plotly attribute that represents the currently selected points on the plot.\nSo, highlight(ggplotly(p), \"plotly_selected\") is taking the ggplotly(p) object and highlighting the currently selected points on the plot by changing their appearance in some way, such as by changing their color or size.\ncrosstalk::bscols(): creates a Bootstrap column layout. The first argument is the left column, and the second argument is the right column. The widths argument is used to specify the relative width of the two columns, with the default value being 6 for both.\ncrosstalk::bscols(): particularly useful when working with interactive data visualizations, as it allows for easy linking of different components of the dashboard, such as brushing and highlighting on the plot and filtering on the data table."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "6.1 ggiraph",
    "text": "6.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "6.2 plotly for R",
    "text": "6.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "3.1 Building a static population bubble plot",
    "text": "3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot. A bubble plot is created when a third numeric variable is assigned to size argument inside a ggplot with geom_point.\n\nThe scale_size(range= c(2,12)) sets the range of point sizes to be used in the plot to between 2 and 12.\nPopulation is mapped to size aes in ggplot, thus this range parameter controls the min nad max size of the points."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "3.2 Building the animated bubble plot",
    "text": "3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.1 Building an animated bubble plot: ggplotly() method\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2 Building an animated bubble plot: plot_ly() method"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1:",
    "section": "",
    "text": "1 Overview\n\n\n2 Getting Started\n\nInstalling and loading librariesImporting DataUnderstanding the Data\n\n\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nCategorical attributes are: ID, CLASS, GENDER and RACE.\nContinuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "Visual Analytics and Application",
    "section": "Latest Posts:",
    "text": "Latest Posts:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "1.1 Basic concepts of animation",
    "text": "1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "1.2 Terminology",
    "text": "1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  }
]