---
title: "Hands-on Exercise 4b: Visualising Statistical Analysis"
date: "27 Jan 2024"
date-modified: "last-modified"
editor: visual
toc-depth: 4
execute:
  freeze: true #never re-render during project render
  echo: true #if false, displays charts without codes
  eval: true #if false, displays codes without charts
  warning: false #dont display if there are any warnings
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: false
---

![](images/4b.PNG){fig-align="center"}

# 1 Learning Outcome

In this hands-on exercise, you will gain hands-on experience on using:

-   ggstatsplot package to create visual graphics with rich statistical information,

-   performance package to visualise model diagnostics, and

-   parameters package to visualise model parameters

# 2 Getting Started

::: panel-tabset
## Installing and loading libraries

Use the pacman package to check, install and launch the R packages **ggstatplot** and **tidyverse**.

```{r}
pacman::p_load(ggstatsplot, tidyverse,
               nortest, ggdist)
```

[**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.

## Importing Data

In this section, *Exam_data.csv* provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.

The code chunk below `read_csv()` of **readr** package is used to import *Exam_data.csv* data file into R and save it as an tibble data frame called `exam_data`.

```{r}
exam <- read_csv("data/Exam_data.csv")
```

The data is a tibble dataframe and contains 322 observations across 7 attributes.

## Understanding the Data

```{r}
#| echo: false
head(exam, 5)
```

```{r}
glimpse(exam)
summary(exam)

```

## Converting data types

```{r}
col <- c("CLASS", "GENDER", "RACE")

exam <- exam %>% 
  mutate(across(col, as.factor)) %>% 
  mutate(ID = as.character(ID))
```
:::

# 3 Tests

## 3.1 One-sample test: *gghistostats()* method

In the code chunk below, [*gghistostats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to to build an visual of one-sample test on English scores.

-   A one-sample test is a statistical hypothesis test used to determine whether the mean of **a single sample of data** differs significantly from a known or hypothesized value.

-   It is a statistical test that compares the mean of a sample to a specified value, such as a population mean, to see if there is enough evidence to reject the null hypothesis that the sample comes from a population with the specified mean.

**H0: EL average score is 60.**

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,          #<< H0: EL = 60
  xlab = "English scores"
) +
  theme_classic() +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5")) 
```

### 3.1.1 Bayes Factor

-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.

-   That's because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.

-   When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as **B10**.

-   The [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.

**How to interpret Bayes Factor**

A **Bayes Factor** can be any positive number.

### 3.1.2 Perform a one-sample wilcoxon test

[Reference website from r-bloggers](https://www.r-bloggers.com/2022/07/one-sample-wilcoxon-test-in-r/)

The one-sample Wilcoxon test (non parametric) will tell us whether the scores are [*significantly*]{.underline} different from 60 or not (and thus whether they are different from 60 in the population or not)

**H0: EL scores = 60**

**H1: EL scores != 60**

The scores are assumed to be independent (a student's score is not impacted or influenced by the score of another student)

```{r}
wilcox.test(exam$ENGLISH,
            mu = 60)
```

**Interpretation**

P-value\<0.05, we have enough statistical evidence to reject the null hypothesis and conclude that the EL scores are significantly different from 60.

::: {.nursebox .nurse data-latex="nurse"}
By default, it is a two-tailed test that is done. As for the `t.test()` function, we can specify that a one-sided test is required by using either the `alternative = "greater"` or `alternative = "less"` argument in the `wilcox.test()` function.
:::

**Combine statistical test and plot**

```{r}
set.seed(1234)

gghistostats(data=exam,
             x = ENGLISH,
             type='nonparametric', #nonparametric (median) = Wilcoxon, parametric = t-test (default is look for mean and unequal variance method)
             test.value =60,
             conf.level = 0.95,
             xlab = 'English scores') +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5"))   
```

Did we forget to check if English scores follow a normal distribution? Use `ad.test` from **nortest** library.

**H0: EL scores follows normal distribution**

**H1: EL scores do not follow normal distribution.**

```{r}
ad.test(exam$ENGLISH)
```

Results from the Anderson-Darling normality test shows enough statistical evidence to reject the null hypothesis and conclude that the EL scores [do not]{.underline} follow normal distribution . Thus the use of **non parametric test** is correct.

::: {.nursebox .nurse data-latex="nurse"}
**On Parametric and Non-parametric types**

type= parametric: default look for **mean** and assumes **unequal variance** method

type = Non parametric: student-t test and use **median** (not mean!!)
:::

## 3.2 Two-sample mean test: *ggbetweenstats()*

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender (independent).

**H0: Mean of F and M Math scores are the same.**

**H1: Mean of F and M Math scores are not the same.**

```{r}
ggbetweenstats(data=exam,
               x=GENDER,
               y=MATHS,
               type='np',        #<< Non-parametric
               messages=FALSE) +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5"))     
```

Since p-value \> 0.05, we do not have enough statistical evidence to reject the null hypothesis that mean of Math scores of both gender are the same.

However, if we check for normality of Math scores of each gender.

```{r}
# Perform Shapiro-Wilk test on math scores by gender
shapiro_test <- by(exam$MATHS, exam$GENDER, shapiro.test)

# Extract p-values
p_values <- sapply(shapiro_test, function(x) x$p.value)

# Print results
print(p_values)
```

::: {.nursebox .nurse data-latex="nurse"}
The **`by()`** function is used to apply a function to subsets of a data frame or vector split by one or more factors. In the above code, we use **`by()`** to split the **`math_score`** column by **`gender`**, and apply the **`shapiro.test()`** function to each group.
:::

**H0: Math scores by gender follows normal distribution.**

**H1: Math scores by gender do not follow normal distribution.**

From the Shapiro-Wilk test results, we have enough statistical evidence to reject the null hypothesis and conclude that the Math scores by gender does not follow a normal distribution. Thus the use of 'np' is appropriate.

## 3.3 One-way ANOVA Test: *ggbetweenstats()* method

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for One-way ANOVA test on English score by race (Independent 4 sample mean).

```{r}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci=TRUE,
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",  # 'ns': shows only non-sig, 's': shows only sig, 'all': both 
  p.adjust.method = "fdr",
  messages = FALSE
) +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5"))  

## might need to call library(PMCMRplus) and library(rstantools) if this code chunck doesnt work.
```

Since p-value \< 0.05, we have enough statistical evidence to reject the null hypothesis and conclude that NOT ALL means of EL scores by race are the same. The results shows that the means of EL scores of Chinese, Indian and Malay are significantly different.

Once again, lets go backwards and confirm that the distribution of EL scores by RACE conforms to normal distribution.

```{r}
# Perform Shapiro-Wilk test on math scores by gender
shapiro_test <- by(exam$ENGLISH, exam$RACE, shapiro.test)

# Extract p-values
p_values <- sapply(shapiro_test, function(x) x$p.value)

# Print results
print(p_values)
```

**H0: EL scores by Race follow normal distribution.**

**H1: EL scores by Race do not follow normal distribution.**

The results of the Shapiro-Wilk test shows p_value of all EL score distribution by race follows normal distribution.

### 3.3.1 ggbetweenstats - Summary of tests

Type argument entered by us will determine the centrality tendency measure displayed

-   **mean** for parametric statistics

-   **median** for non-parametric statistics

-   **trimmed mean** for robust statistics

-   **MAP estimator** for Bayesian statistics

## 3.4 Significant Test of Correlation: *ggscatterstats()*

Earlier, we have checked that EL scores do not follow a normal distribution. Now we will do the same for Math scores.

```{r}
ad.test(exam$MATHS)
```

Since the p-value \< 0.05, we have enough statistical evidence to reject the null hypothesis and conclude that the Math scores also do not follow normal distribution.

In the code chunk below, [*ggscatterstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  type='nonparametric', # 'parametric', 'robust', 'bayes'
  marginal = FALSE,
  ) +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5")) 
```

The plot above uses type = "non-parametric" as both Math and EL scores do not follow normal distribution.

## 3.5 Significant Test of Association (Dependence) : *ggbarstats()* methods

In the code chunk below, the Maths scores is binned into a 4-class variable by using [*cut()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).

We will create a new dataframe exam1 similar to exam df but with extra column called 'MATHS_bins'.

```{r}
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
```

```{r}
exam1
```

In this code chunk below [*ggbarstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association (2 categorical variables).

**H0: There is no association between math_bin and gender.**

**H1: There is an association between math_bin and gender.**

```{r}
ggbarstats(exam1,
            x=MATHS_bins,
            y=GENDER) +
  
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f5f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5")) 
```

From the results above , p-value \> 0.05 thus we have not enough statistical evidence to reject the null hypothesis that there is not association between the math_bin and gender variables.

# 4 Visualising Models

In this section, I will learn how to visualise model diagnostic and model parameters by using parameters package.

Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

## 4.1 Getting Started

::: panel-tabset
## Installing and loading the required libraries

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

### Importing Excel file: readxl methods

In the code chunk below, [*read_xls()*](https://readxl.tidyverse.org/reference/read_excel.html) of [**readxl**](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.

```{r}
car_resale <- read_xls('data/ToyotaCorolla.xls',
                       sheet='data')
```

```{r}
glimpse(car_resale)
```

Notice that the output object `car_resale` is a tibble data frame.
:::

## 4.2 Multiple Regression Model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using *lm()* of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + 
              Mfg_Year + 
              KM + 
              Weight + 
              Guarantee_Period,
            data=car_resale)
model
```

## 4.3 Model Diagnostic: checking for multicolinearity

In the code chunk, [*check_collinearity()*](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c) +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5")) 
```

We can see high collinearity between Age and Mfg_Year. One is derived from the other. We should remove one of them and repeat muliti collinearity check again for the new model.

## 4.4 Model Diagnostic: checking normality assumption

In the code chunk, [*check_normality()*](https://easystats.github.io/performance/reference/check_normality.html) of [**performance**](https://easystats.github.io/performance/) package.

Notice that the Mfg_Year variable has been removed from the independent variables list.

```{r}
model1 <- lm(Price ~ Age_08_04 + 
              #Mfg_Year +        #<<
              KM + 
              Weight + 
              Guarantee_Period,
            data=car_resale)
```

```{r}
check_c1 <- check_collinearity(model1)
plot(check_c1) +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5"))  
```

```{r}
check_n <- check_normality(model1)
```

```{r}
plot(check_n) +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5")) 
```

::: {.chatterbox .chatter data-latex="chatter"}
**Recap: Assumptions of linear regression**

In linear regression, one of the key assumptions is that the residuals (the differences between the predicted values and the actual values) are normally distributed. The normality assumption is important because it affects the validity of statistical inference procedures such as hypothesis testing and confidence intervals.

If the residuals are not normally distributed, it may indicate that the linear regression model is not a good fit for the data and that alternative modeling approaches may be needed.
:::

## 4.5 Model Diagnostic: Check model for homogeneity of variances

In the code chunk, [*check_heteroscedasticity()*](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [**performance**](https://easystats.github.io/performance/) package.

Heteroscedasticity refers to a situation where the variance of the **errors (or residuals)** in the linear regression model is not constant across different levels of the predictor variable(s).

If heteroscedasticity is detected, there are several ways to address it, including transforming the data, using weighted least squares regression, or using robust standard errors. In DAl, we rebuild another model by creating subclasses out of the original Y variable.

```{r}
check_h <- check_heteroscedasticity(model1)
```

```{r}
plot(check_h) +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5")) 
```

From the graph above, there is a slight sign of heteroscedasticity as the residuals seem to be funnelled outwards as the fitted values increase.

## 4.6 Model Diagnostic: Complete check

We can also perform the complete check by using [*check_model()*](https://easystats.github.io/performance/reference/check_model.html).

```{r}
#| fig-width: 14
#| fig-height: 25
check_model(model1)
```

## 4.7 Visualising Regression Parameters: see() methods

In the code below, `plot()` of **see** package and `parameters()` of **parameters** package are used to visualise the parameters of a regression model.

```{r}
plot(parameters(model1)) +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5")) 
```

## 4.8 Visualising Regression Parameters: *ggcoefstats()* methods

In the code below, [*ggcoefstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1, 
            output = "plot") +
  theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
        legend.background = element_rect(fill="#f5f5f5"),
        panel.background = element_rect(fill="#f5f5f5")) 
```

# 5 Reference

-   Kam, T.S. (2023). [Visual Statistical Analysis](https://r4va.netlify.app/chap10).
