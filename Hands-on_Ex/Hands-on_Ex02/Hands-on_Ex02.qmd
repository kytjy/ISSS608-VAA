---
title: "Hands-on Exercise 2: Beyond ggplot2 Fundamentals"
date: "08 Jan 2024"
date-modified: "last-modified"
editor: visual
toc-depth: 4
execute:
  freeze: auto
  echo: true #if false, displays charts without codes
  eval: true #if false, displays codes without charts
  warning: false #dont display if there are any warnings
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-bg: "#ECEBEB"
---

![](Images/cover.PNG){fig-align="center"}

# 1 Overview

In this chapter, we will be learning about ggplot2 extensions for creating more elegant and effective statistical graphics. The goals of this exercise is to:

-   control the placement of annotation on a graph by using functions provided in ggrepel package,
-   create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages, and
-   plot composite figure by combining ggplot2 graphs by using patchwork package.

# 2 Getting Started

::: panel-tabset
## Installing and loading libraries

In this exercise, beside tidyverse, four R packages will be used. They are:

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.
-   ggthemes: an R package provides some extra themes, geoms, and scales for 'ggplot2'.
-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.
-   patchwork: an R package for preparing composite figure created using ggplot2.

Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse, ggpmisc) 
```

## Importing Data

-   The code chunk below imports **exam_data.csv** into R environment by using [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.
-   **readr** is one of the tidyverse package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## Understanding the Data

```{r}
glimpse(exam_data)
```

-   Year end examination grades of a cohort of primary 3 students from a local school.
-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.
    -   Categorical attributes are: ID, CLASS, GENDER and RACE.
    -   Continuous attributes are: MATHS, ENGLISH and SCIENCE.
:::

# 3 Beyond ggplot2 Annotation: ggrepel

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

```{r}
ggplot(data=exam_data,
       aes(y=ENGLISH, x=MATHS)) + 
  geom_point() +
  geom_smooth(method=lm, size = 0.5) +
  coord_cartesian(xlim=c(0,100),
                       ylim=c(0,100)) +
  geom_label(aes(label=ID),
             hjust=0.5,
             vjust=-0.5) +
  ggtitle('English score vesus Math Score for Primary 3')+
  theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))
```

[**ggrepel**](https://ggrepel.slowkow.com/) is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text as in our example above.

We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=1) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold", 
                   max.overlaps = 15) +  #Labels increase as max overlaps increase
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")+
  theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))  
```

# 4 Beyond ggplot2 Themes

**ggplot2** comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html): `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data=exam_data, 
       aes(x=MATHS)) +
  geom_histogram(bins=20, 
                 color= 'white',
                 fill='grey') +
  theme_gray() +
  theme(panel.background=element_rect(fill='grey96')) +
  ggtitle('Distribution of Math scores')+
  theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))    
```

## 4.1 Working with ggtheme package

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/) provides ['ggplot2' themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), 'Stata', 'Excel', and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

::: panel-tabset
## theme_economist

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data=exam_data, 
       aes(x=MATHS)) +
  geom_histogram(bins=20,
                 boundary=100,
                 color='grey25',
                 fill='grey90',size=0.8) +
  theme_economist() +
  labs(y= 'No. of \nPupils') +
  theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9)) +
  ggtitle('Distribution of Math scores')
```

## theme_hc()

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data=exam_data, 
       aes(x=MATHS)) +
  geom_histogram(bins=20,
                 boundary=100,
                 color='grey25',
                 fill='grey90',size=0.8) +
  theme_solarized() +
  labs(y= 'No. of \nPupils') +
  theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9)) +
  ggtitle('Distribution of Math scores')
```
:::

It also provides some extra geoms and scales for 'ggplot2'. Refer to [this vignette](https://mran.microsoft.com/snapshot/2016-12-28/web/packages/ggthemes/vignettes/ggthemes.html) and [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) to learn more.

## 4.2 Working with hrbthemes package

[**hrbrthemes**](https://cinc.rud.is/web/packages/hrbrthemes/) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used. The second goal centers around productivity for a production workflow. In fact, this "production workflow" is the context for where the elements of hrbrthemes should be used.

::: panel-tabset
## Original

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data=exam_data, 
       aes(x=MATHS)) +
  geom_histogram(bins=20,
                 boundary=100,
                 color='grey25',
                 fill='grey90') +
  theme_ipsum() +
  labs(y= 'No. of \nPupils') +
  theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9)) +
  ggtitle('Distribution of Math scores')
```

## With Elements

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data=exam_data, 
       aes(x=MATHS)) +
  geom_histogram(binwidth=5,
                 boundary=100,
                 color='grey25',
                 fill='grey90') +
  theme_ipsum(axis_title_size = 15,
              base_size=12,
              grid= 'Y') +
 labs(y= 'No. of \nPupils') +
 theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9)) +
  ggtitle('Distribution of Math scores')
```

-   `axis_title_size` argument is used to increase the font size of the axis title to 15,
-   `base_size` argument is used to increase the default axis label to 12, and
-   `grid` argument is used to remove the x-axis grid lines.
:::

# 5 Beyond Single Graph

It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we create composite plot by combining multiple graphs. First, create three statistical graphics by using the code chunk below.

::: panel-tabset
## Maths Scores

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p1 <- ggplot(data=exam_data, 
       aes(x=MATHS)) +
  geom_histogram(bins=20,
                 boundary=100,
                 color='grey25',
                 fill='grey90') +
  coord_cartesian(xlim=c(0,100)) +
  theme_ipsum(axis_title_size = 8,
              base_size=8,
              grid= 'Y') +
 labs(y= 'No. of \nPupils',
      title ='Distribution of Maths scores') +
 theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9),
       plot.title=element_text(size =10),
       plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))  

p1
```

## English Scores

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p2 <- ggplot(data=exam_data, 
       aes(x=ENGLISH)) +
  geom_histogram(bins=20,
                 boundary=100,
                 color='grey25',
                 fill='grey90') +
  coord_cartesian(xlim=c(0,100)) +
  theme_ipsum(axis_title_size = 8,
              base_size=8,
              grid= 'Y') +
 labs(y= 'No. of \nPupils',
      title= 'Distribution of English scores') +
 theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9),
       plot.title=element_text(size =10),
       plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))

p2
```

## Scatterplot of English vs Maths score

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p3 <- ggplot(data=exam_data, 
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size = 0.5 )+
  stat_poly_line() +
  stat_poly_eq() +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  theme_ipsum(axis_title_size = 8,
              base_size=8) +
 labs(y= 'English\n score', x= 'Math score',
      title= 'English scores vesus Math scores\n for Primary 3') +
 theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9),
       plot.title=element_text(size =10),
       plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))

p3
```
:::

## 5.1 Creating Composite Graphics: **pathwork** methods

There are several ggplot2 extension's functions support the needs to prepare composite figure by combining several graphs such as [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/) package. In this section, we use ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/) which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax, such as:

-   Two-Column Layout using the Plus Sign +.
-   Parenthesis () to create a subplot group.
-   Two-Row Layout using the Division Sign `/`

## 5.2 Combining two ggplot2 graphs

Figure below shows a composite of two histograms created using patchwork.

::: panel-tabset
## Horizontal

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p1 + p2
```

## Vertical

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p1 / p2
```

## Change relative area

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p1 + p2 + plot_layout(ncol=2,widths=c(2,1))
```
:::

## 5.3 Combining three ggplot2 graphs

We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:

-   "\|" operator to stack two ggplot2 graphs,
-   "/" operator to place the plots beside each other,
-   "()" operator the define the sequence of the plotting.

::: panel-tabset
## `/` and `|` Operators

```{r}
#| code-fold: true
#| code-summary: "Show the code"

(p1 / p2) | p3
```

## `-` Operator For Subtrack Placement

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p1 + p2 - p3 + plot_layout(ncol=1)
```

## Nested Layouts

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p3 + {
  p1 + p2 + plot_layout(ncol=1)
}
```

## Adding non-ggplot content

```{r}
#| code-fold: true
#| code-summary: "Show the code"

((p1 / p2) | p3) + grid:: textGrob('I can add \nother content here.',
                                   hjust=0, 
                                   x=-0, 
                                   gp=grid::gpar(font=3, 
                                                 fontsize = 12))
```
:::

To learn more about, refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html).

## 5.4 Creating a composite figure with tag

In order to identify subplots in text, **patchwork** also provides auto-tagging capabilities as shown in the figure below.

::: panel-tabset
## Enumeration

```{r}
#| code-fold: true
#| code-summary: "Show the code"

((p1 / p2) | p3) +
  plot_annotation(tag_levels = 'I') # Can also use tag_levels ='A'
```

## Custom / multilevel tagging

```{r}
#| code-fold: true
#| code-summary: "Show the code"

((p1 / p2) | p3)  + 
  plot_layout(tag_level = 'new') +
  plot_annotation(tag_levels = c('A', '1'), tag_prefix = 'Fig. ', tag_sep = '.', 
                  tag_suffix = ':')
```
:::

## 5.5 Creating figure with inset

Beside providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p4 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p5 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")

p6 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("Correlation between\nEnglish & Maths scores")

p6 +  inset_element(p5,
                    left = 0.02,
                    bottom=0.7,
                    right= 0.5,
                    top=1)

```

## 5.6 Creating a composite figure by using patchwork and ggtheme

Figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.

::: panel-tabset
## theme_economist

```{r}
patchwork <- ((p4/p5) | p6)

patchwork & theme_economist() +
  theme(plot.title=element_text(size =10),
                                        axis.title.y=element_text(size = 9,
                                                                  angle = 0,
                                                                  vjust=0.9),
                                         axis.title.x=element_text(size = 9))

```

## theme_solarized_2

```{r}
patchwork & theme_solarized_2() +
  theme(plot.title=element_text(size =10),
                                        axis.title.y=element_text(size = 9,
                                                                  angle = 0,
                                                                  vjust=0.9),
                                         axis.title.x=element_text(size = 9))
```
:::

# 6 References

-   Kam, T.S. (2023). [Beyond ggplot2 Fundamentals](https://r4va.netlify.app/chap02).
-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)
-   [ggrepel](https://ggrepel.slowkow.com/)
-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)
-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)
-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)
-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)
-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)
