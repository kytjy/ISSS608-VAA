---
title: "Take-home Exercise 4: Prototyping Modules for Shiny Application"
date: "?? Feb 2024"
date-modified: "last-modified"
editor: visual
toc-depth: 4
execute:
  freeze: true #never re-render during project render
  echo: true #if false, displays charts without codes
  eval: true #if false, displays codes without charts
  warning: false #dont display if there are any warnings
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: false
---

# 1 Overview

International large-scale assessments, such as PISA, provide structured and static data. With the goal of exploring which factors have a higher relevance in predicting student performance, this post proposes the use of multiple linear regression and random forest approach to detect and analyse factors linked to academic performance.

Specifically, this post details the steps, packages, prototypes, including the detailed breakdown of codes used for UI and Server in R Shiny as part of the model building module in preparation for the final Shiny app.

# 2 Loading Data and Packages

## 2.1 Packages

The packages used as part of this exercise includes:

+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
| Package                                                                                                                                                           | Description                                                         |
+===================================================================================================================================================================+=====================================================================+
| [**tidyverse**](https://www.tidyverse.org/)                                                                                                                       | For data wrangling                                                  |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
| [**ggplot2**](https://ggplot2.tidyverse.org/)**, [patchwork](https://patchwork.data-imaginist.com/), urbnthemes**                                                 | For plots and setting a consistent theme throughout this exercise.  |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
| [**htmltools**](https://rstudio.github.io/htmltools/)**, [reactable](https://glin.github.io/reactable/), [gtsummary](https://www.danieldsjoberg.com/gtsummary/)** | For dynamic and static data tables                                  |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
| [**corrplot**](https://github.com/taiyun/corrplot)                                                                                                                | For correlation matrix                                              |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
| [**caret**](https://topepo.github.io/caret/)**, [tidymodels](https://www.tidymodels.org/)**                                                                       | For packages relating to modeling, regression, and machine learning |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
| [**performance**](https://easystats.github.io/performance/)                                                                                                       | For assessment of regression models performance                     |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+

```{r}
pacman::p_load(tidyverse, 
               ggplot2, patchwork, urbnthemes, 
               gtsummary,
               ranger, rpart.plot, caret, tidymodels, gbm, 
               performance)
```

## 2.2 The PISA Survey Students Questionnaire

The code chunk below loads our dataset into R environment, in the form of a csv file created following minor data cleaning and wrangling documented [here](https://projectpisa.netlify.app/phase1/dataprep).

```{r}
stu <- read_csv("data/stu_SG_rcd.csv")
```

```{r}
#| echo: false
glimpse(stu)
```

# 3 Storyboard

The flowchart below details the features for this model building module.

```{mermaid}
%%| fig-width: 8
%%| echo: false

flowchart TD
    C[Building Predictive Model]-.->C1[Decision Tree]
    C-.-> C2[Random Forest]
    C-.-> C3[Gradient Boosting]
    C1-.->F[3. Visual Model Diagnostics]
    C2-.->F
    F -->E[4. Statistical Model Evaluation]
    E-->D[5. Variable Importance]
```

## 3.1 Draft Designs

At the initial stage of the model building module, users would be able customise various options for building 3 predictive models. We perform a detailed walkthrough of the interactivity and customisation features, including descriptions of the SHINY UI and Server in Sections 5-7.

In the subsequent parts of this section, we briefly outline the rationale behind visualisations and measurements.

## 3.2 Visual Model Diagnostic

After training the models, we can use it to predict scores for the test data we held back using `predict()`. Then we can compare these predictions to the actual values to evaluate how well (or not) the models are working. We can get a better indication by visualising a scatter plot that compares the predictions to the actual scores and residuals.

1.  **Predicted vs Actual:** This is a scatter plot that helps you visualise the performance of a regression model. The x-axis represents the actual values, and the y-axis represents the predicted values. Ideally, if the predictions are perfect, the points will lie along a straight line with a slope of 1. We'll also overlay a trend line to get a general sense for how well the predicted values align with the true values.

2.  **Residuals vs Actual:** A scatter plot of residuals (vertical axis) in function of the observed (horizontal axis) values of the dependent variable. For a "perfect" predictive model, we would expect the horizontal line at zero. For a "good" model, we would like to see a symmetric scatter of points around the horizontal line at zero, indicating random deviations of predictions from the observed values.

## 3.3 Statistical Model Evaluation

We can quantify the residuals by calculating a number of commonly used evaluation metrics, with a focus on the following:

-   Root Mean Square Error (RMSE): The square root of the MSE. This yields an absolute metric in the same unit as the response variable (in this case, scores). The smaller the value, the better the model (in a simplistic sense, it represents the average scores by which the predictions are wrong).

-   $R^2$: describes the strength of a model fit. In essence, this metric represents how much of the variance between predicted and actual label values the model is able to explain. The regular $R^2$ is a biased estimate of the amount of variability explained by the model when applied to model with more than one predictor. To get a better estimate, we use the $adjusted\ R^2$. The best fit is the one that maximises $R^2$ or $adjusted\ R^2$.

-   Mean Absolute Error (MAE): It is measured as the average absolute difference between the predicted values and the actual values and is used to assess the effectiveness of a regression model.

```{r}
#| echo: false
set_urbn_defaults(style = "print")
```

`formals()` function returns the argument list of the function specified. This can be used in the sidebar to display the options for user selection.

```{r}
eval(formals(cor)$method)
```

# 4 Prelude

The general outline of a predictive analysis is as follows:

-   Test-train split the available data using `createDataPartition()`
-   Specify possible tuning parameters for method using `expand.grid()`
-   Use resampling to find the "best model" by choosing the values of the tuning parameters
    -   `trainControl()` will specify the resampling scheme
    -   `train()` is the workhorse of caret. It takes the following information then trains (tunes) the requested model:
        -   `form`, a formula, such as `y ~ .`
            -   This specifies the response and which predictors (or transformations of) should be used.
        -   `data`, the data used for training
        -   `trControl` which specifies the resampling scheme, that is, how cross-validation should be performed to find the best values of the tuning parameters
        -   `preProcess` which allows for specification of data pre-processing such as centering and scaling
        -   `method`, a statistical learning method from a long list of availible models
    -   `tuneGrid` which specifies the tuning parameters to train over
-   Use chosen model to make predictions using `predict()`

## 4.1 Data Preparation

The goal of training the model is to find a function that performs some kind of calculation to the $x$ values (i.e. independent variables) that produces the result $y$ (i.e. dependent variable). We do this by applying a machine learning algorithm that tries to fit the $x$ values to a calculation that produces $y$ reasonably accurately for all of the cases in the training dataset.

To train the model, we start with a data sample containing the independent/explanatory variables as well as known values for the subject scores. We'll then split this data sample into two subsets:

-   A *training* dataset to which we'll apply an algorithm that determines a function encapsulating the relationship between the independent variables and the known $y$ values.

-   A *test* dataset that we can use to evaluate the model by using it to generate predictions for the label and comparing them to the actual known $y$ values.

```{r}
## Data for Model Building ##

# Remove missing cases & convert variables to factor datatype our dataset
stu <- stu %>% 
  na.omit() %>% 
  mutate(across(1:22, as.factor))

data <- stu %>% 
  dplyr::select(c(1:22, "Math")) #<< input$var, input$bm_target to change according to user selection
```

```{r}
# Set the seed before splitting the data
set.seed(1234)

# Split the data into training and test
index <- createDataPartition(data$Math, #<< input$bm_target
                             p = 0.8, #<< input$rf_partition
                             list = FALSE) 

traindata <- data[index, ]
testdata  <- data[-index, ]

```

+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+----------------------------------------------+
| Function/Object                   | Feature                                                                                                                              | UI                                                                                                                    | Server                                       |
+===================================+======================================================================================================================================+=======================================================================================================================+==============================================+
| ***data*** **for model building** | Select subject                                                                                                                       | Within ***sidebarPanel***():                                                                                          | mb_data \<- eventReactive(input\$mb_action,\ |
|                                   |                                                                                                                                      |                                                                                                                       | {stu %\>%\                                   |
|                                   |                                                                                                                                      | selectInput(\                                                                                                         | select(input\$mb_vars \| mb_target)})        |
|                                   |                                                                                                                                      | inputId = "mb_target",\                                                                                               |                                              |
|                                   |                                                                                                                                      | label = "Subject",\                                                                                                   |                                              |
|                                   |                                                                                                                                      | choices = c("Math", "Reading", "Science")                                                                             |                                              |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+----------------------------------------------+
|                                   | Checkbox for variable selection; [**sortable**](https://rstudio.github.io/sortable/) package allows drag-and-drop to order variables | Within ***sidebarPanel***():                                                                                          | mb_data \<- eventReactive(input\$mb_action,\ |
|                                   |                                                                                                                                      |                                                                                                                       | {stu %\>%\                                   |
|                                   |                                                                                                                                      | [***sortableCheckboxGroupInput***](https://yang-tang.github.io/shinyjqui/reference/sortableCheckboxGroupInput.html)(\ | select(input\$mb_vars \| mb_target)})        |
|                                   |                                                                                                                                      | inputId = "mb_vars",\                                                                                                 |                                              |
|                                   |                                                                                                                                      | label = "Variables to show:",\                                                                                        |                                              |
|                                   |                                                                                                                                      | choices = colnames(*stu*\[,1:22\]),\                                                                                  |                                              |
|                                   |                                                                                                                                      | selected = input\$variables\                                                                                          |                                              |
|                                   |                                                                                                                                      | )                                                                                                                     |                                              |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+----------------------------------------------+
|                                   | Select partition size                                                                                                                | Within ***mainPanel***() \> tabsetPanel() \> ***sliderInput***(\                                                      | mb_index \<- eventReactive(\                 |
|                                   |                                                                                                                                      | inputId = "mb_partition",\                                                                                            | input\$mb_action, {\                         |
|                                   |                                                                                                                                      | label = "Train-Test Partition Ratio:",\                                                                               | createDataPartition(\                        |
|                                   |                                                                                                                                      | min = 0.5,\                                                                                                           | data()*\[, input\$mb_target\]*,\             |
|                                   |                                                                                                                                      | max = 0.95,\                                                                                                          | p = input\$mb_partition,\                    |
|                                   |                                                                                                                                      | value = c(0.8)))                                                                                                      | list = FALSE)\                               |
|                                   |                                                                                                                                      |                                                                                                                       | })                                           |
|                                   |                                                                                                                                      |                                                                                                                       |                                              |
|                                   |                                                                                                                                      |                                                                                                                       | mb_traindata \<- eventReactive(\             |
|                                   |                                                                                                                                      |                                                                                                                       | input\$mb_action, {\                         |
|                                   |                                                                                                                                      |                                                                                                                       | data()\[mb_index(),\]\                       |
|                                   |                                                                                                                                      |                                                                                                                       | })                                           |
|                                   |                                                                                                                                      |                                                                                                                       |                                              |
|                                   |                                                                                                                                      |                                                                                                                       | mb_testdata \<- eventReactive(\              |
|                                   |                                                                                                                                      |                                                                                                                       | input\$mb_action, {\                         |
|                                   |                                                                                                                                      |                                                                                                                       | mb_dataset()\[-mb_index(),\]\                |
|                                   |                                                                                                                                      |                                                                                                                       | })                                           |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+----------------------------------------------+

# 5 Decision Tree

## 5.1 The Model's First Run

```{r}
## Specifying training choices ##

# Resampling Options
dt_fitcontrol <- trainControl(method = "cv", # input$dt_resamplingmethod
                           number = 10, # input$dt_resamplecnt
                           repeats = NA) # input$dt_repeats
```

-   `method`: Refers to the resampling method, such as `boot`, `cv` (cross validation), `repeatedcv`
-   `number`: *K-fold*, the number of times resampling should be done for methods that require resample eg `cv` and `boost`
-   `repeats`: Applies only to repeated *K-fold* cross-validation. Suppose that `method = "repeatedcv"`, `number = 10` and `repeats = 3`, then three separate 10-fold cross-validations are used as the resampling scheme.

The decision tree has two adjustable parameters: complexity parameter (*CP*) and tune length (*TL*). CP tells the algorithm to stop when the measure does not improve by this factor. TL tells how many instances to use for training. I'll let the model look for the best CP tuning parameter with `tuneLength` to get close using the initial model, then fine-tune with `tuneGrid` at a later stage.

```{r}
set.seed(1234)

dtmodel <- train(Math ~ ., 
                 data = traindata,
                 method = "rpart",
                 tuneLength = 4, #input$dt_tunelength
                 trControl = dt_fitcontrol
)

dtmodel
```

```{r}
rpart.plot(dtmodel$finalModel,
           box.palette="GnBu",
           branch.lty=3, 
           shadow.col="gray", 
           nn=TRUE)
```

The boxes show the node predicted value (mean) and the proportion of observations that are in the node (or child nodes).

+--------------------+---------------------------------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
| Function           | Feature                                                                         | UI                                                                             | Server                                                                      |
+====================+=================================================================================+================================================================================+=============================================================================+
| **trainControl()** | Select resampling method, resampling count and repeat.                          | numericInput(inputId = "dt_cvkfold_number",\                                   | Within ***mainPanel***() \> tabsetPanel() \>\                               |
|                    |                                                                                 | label = "K-fold:",\                                                            |                                                                             |
|                    |                                                                                 | min = 3,\                                                                      | [For Cross Validation]{.underline}\                                         |
|                    |                                                                                 | max = 50,\                                                                     | dt_resamplecv_kfoldnum \<- eventReactive(input\$mb_action, {\               |
|                    |                                                                                 | value = 10))),                                                                 | trainControl(\                                                              |
|                    |                                                                                 |                                                                                | method = "cv",\                                                             |
|                    |                                                                                 | numericInput(inputId = "dt_repeatkfold_number",\                               | number = input\$dt_cvkfold_number)\                                         |
|                    |                                                                                 | label = "K-fold:",\                                                            | })                                                                          |
|                    |                                                                                 | min = 3,\                                                                      |                                                                             |
|                    |                                                                                 | max = 50,\                                                                     | [For Repeated Cross Validation\                                             |
|                    |                                                                                 | value = 10))),                                                                 | ]{.underline}dt_resamplercv_kfoldnum \<- eventReactive(input\$mb_action, {\ |
|                    |                                                                                 |                                                                                | trainControl(\                                                              |
|                    |                                                                                 | numericInput(inputId = "dt_repeatkfold_repeat", label = "Number of Repeats:",\ | method = "cv",\                                                             |
|                    |                                                                                 | min = 3,\                                                                      | number = input\$dt_repeatkfold_number)\                                     |
|                    |                                                                                 | max = 10,\                                                                     | })                                                                          |
|                    |                                                                                 | value = 3))),                                                                  |                                                                             |
|                    |                                                                                 |                                                                                | dt_repeatnum \<- eventReactive(\                                            |
|                    |                                                                                 |                                                                                | input\$mb_action, {\                                                        |
|                    |                                                                                 |                                                                                | trainControl(\                                                              |
|                    |                                                                                 |                                                                                | method = "repeatedcv",\                                                     |
|                    |                                                                                 |                                                                                | number = input\$dt_repeatkfold_number,\                                     |
|                    |                                                                                 |                                                                                | repeats = input\$dt_repeatkfold_repeat)\                                    |
|                    |                                                                                 |                                                                                | })                                                                          |
+--------------------+---------------------------------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
| **train()**        | Set initial tune length                                                         | numericInput(inputId = "dt_tunelength", label = "Set Initial Tune Length:",\   | dtmodel \<- eventReactive(\                                                 |
|                    |                                                                                 | min = 2,\                                                                      | train(Math \~ .,\                                                           |
|                    |                                                                                 | max = 10,\                                                                     | data = mb_traindata,\                                                       |
|                    |                                                                                 | value = 4))),                                                                  | method = "rpart",\                                                          |
|                    |                                                                                 |                                                                                | tuneLength = input\$dt_tunelength\                                          |
|                    |                                                                                 |                                                                                | trControl = dt_fitcontrol\                                                  |
|                    |                                                                                 |                                                                                | )                                                                           |
+--------------------+---------------------------------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
| **rpart.plotO**    | Show plots when selections are completed and 'Build Model' option is triggered. | plotOutput("dt_rpartplot")                                                     | dt_rpartplot \<- eventReactive(\                                            |
|                    |                                                                                 |                                                                                | input\$mb_action, {\                                                        |
|                    |                                                                                 |                                                                                | *rpart.plot()\                                                              |
|                    |                                                                                 |                                                                                | *})\                                                                        |
|                    |                                                                                 |                                                                                | \                                                                           |
|                    |                                                                                 |                                                                                | output\$dt_rpartplot \<-\                                                   |
|                    |                                                                                 |                                                                                | renderPlot({\                                                               |
|                    |                                                                                 |                                                                                | dt_rpartplot\                                                               |
|                    |                                                                                 |                                                                                | })                                                                          |
+--------------------+---------------------------------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+

: {tbl-colwidths="\[10,20,35,35\]"}

## 5.2 Visual Model Diagnostics

```{r}
predict_dt <- bind_cols(
   Actual = testdata$Math, 
   Predicted = predict(dtmodel, newdata = testdata),
   Residuals = predict(dtmodel, newdata = testdata) - testdata$Math
)
```

```{r}
dt_predvsactual <- 
   ggplot(data = predict_dt,
          aes(x = Actual, y = Predicted)) +
   geom_point(alpha = 0.2, color = "grey40") +
   geom_smooth(method = "loess", formula = "y ~ x", color="#dfb2e9") +
   geom_abline(intercept = 0, slope = 1, linetype = 2, color = "#20948b", size = 0.8) +
   labs(title = "Predicted vs Actual") +
   theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))



dt_residvsactual <- 
   ggplot(data = predict_dt,
          aes(x = Actual, y = Residuals)) +
   geom_point(alpha = 0.2, color = "grey40") +
   geom_smooth(method = "loess", formula = "y ~ x", color="#dfb2e9") +
   geom_hline(yintercept = 0, linetype = 2, color = "#20948b", size = 0.8) +
   labs(title = "Residuals vs Predicted") +
   theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))

dt_predvsactual + dt_residvsactual + 
  plot_layout(guides = "collect") +
  plot_layout(widths=c(1,1))
```

```{r}

```

+----------------------+----------------------------------------------------------------------------------------------+------------------------------------+--------------------------------------------------------------------+
| Function             | Feature                                                                                      | UI                                 | Server                                                             |
+======================+==============================================================================================+====================================+====================================================================+
| **predict()**        | Option to allow users to choose if they want to visualise results using train or test data.\ | radioButtons(\                     | predictdt_model \<- eventReactive(\                                |
|                      | \                                                                                            | inputId = "traintest",\            | *input\$mb_action*, {\                                             |
|                      | Predict data when selections are completed and 'Build Model' option is triggered.            | label = "Display Results Using:",\ | predict(*dtmodel()*,\                                              |
|                      |                                                                                              | choices = c("Train", "Test"),\     | newdata = if (input\$*traintest* == "Test", { *testdata()* }*,\    |
|                      |                                                                                              | selected = "Test"))                | else { traindata() }*)\                                            |
|                      |                                                                                              |                                    | })                                                                 |
+----------------------+----------------------------------------------------------------------------------------------+------------------------------------+--------------------------------------------------------------------+
| **bind_cols**        | Creating a new dataframe containing actual, predicted, and residuals for visualisation.      | \-                                 | predict_dt \<- eventReactive(\                                     |
|                      |                                                                                              |                                    | input\$mb_action, {\                                               |
|                      |                                                                                              |                                    | Actual = *testdata()\$input\$mb_target*,\                          |
|                      |                                                                                              |                                    | Predicted = *predictdt_model()*,\                                  |
|                      |                                                                                              |                                    | Residuals = *predictdt_model()* - *testdata()\$input\$mb_target*)\ |
|                      |                                                                                              |                                    | })                                                                 |
+----------------------+----------------------------------------------------------------------------------------------+------------------------------------+--------------------------------------------------------------------+
| **Diagnostic plots** | Refresh plots when selections are completed and 'Build Model' option is triggered.           | tabbox() \> tabPanel() \>\         | [Plot Predicted vs Actual\                                         |
|                      |                                                                                              | plotOutput("dt_predvsactual\_")\   | ]{.underline}dt_predvsactual \<- eventReactive(\                   |
|                      |                                                                                              | \                                  | input\$bm_action, {\                                               |
|                      |                                                                                              | tabPanel() \>\                     | *ggplot(...)\                                                      |
|                      |                                                                                              | plotOutput("dt_residvsactual\_")   | *})\                                                               |
|                      |                                                                                              |                                    | \                                                                  |
|                      |                                                                                              |                                    | output\$dt_predvsactual\_ \<-\                                     |
|                      |                                                                                              |                                    | renderPlot({\                                                      |
|                      |                                                                                              |                                    | dt_predvsactual\                                                   |
|                      |                                                                                              |                                    | })                                                                 |
|                      |                                                                                              |                                    |                                                                    |
|                      |                                                                                              |                                    | [Plot Residuals vs Actual]{.underline}                             |
|                      |                                                                                              |                                    |                                                                    |
|                      |                                                                                              |                                    | dt_residvsactual \<- eventReactive(\                               |
|                      |                                                                                              |                                    | input\$dt_action, {\                                               |
|                      |                                                                                              |                                    | *ggplot(...)\                                                      |
|                      |                                                                                              |                                    | *})\                                                               |
|                      |                                                                                              |                                    | \                                                                  |
|                      |                                                                                              |                                    | output\$dt_residvsactual\_ \<-\                                    |
|                      |                                                                                              |                                    | renderPlot({\                                                      |
|                      |                                                                                              |                                    | dt_residvsactual})                                                 |
+----------------------+----------------------------------------------------------------------------------------------+------------------------------------+--------------------------------------------------------------------+

: {tbl-colwidths="\[10,20,35,35\]"}

## 5.3 Statistical Model Evaluation

```{r}
dt_rmse <- RMSE(pred = predict_dt$Predicted, obs = predict_dt$Actual)
dt_rsq <- R2(pred = predict_dt$Predicted, obs = predict_dt$Actual)
dt_mae <- MAE(pred = predict_dt$Predicted, obs = predict_dt$Actual)

dt_rmse
dt_rsq
dt_mae
```

+---------------+--------------------------------------------------------------------------------------------------------------------+---------------------------------------------+-----------------------------------------------------------------+
| **Function**  | **Function**                                                                                                       | **UI**                                      | **Server**                                                      |
+---------------+--------------------------------------------------------------------------------------------------------------------+---------------------------------------------+-----------------------------------------------------------------+
| **predict()** | Test data results to be updated when response and explanatory variables are selected and 'Build Model' is clicked. |                                             | [Calculate RMSE]{.underline}                                    |
|               |                                                                                                                    |                                             |                                                                 |
|               |                                                                                                                    |                                             | predict_dt \<- eventReactive(\                                  |
|               |                                                                                                                    |                                             | input\$bm_action, {\                                            |
|               |                                                                                                                    |                                             | bind_cols(\                                                     |
|               |                                                                                                                    |                                             | Actual = stu_test_rf*()\$input\$bm_target*,\                    |
|               |                                                                                                                    |                                             | Predicted = predict(*stu_rf()*,\                                |
|               |                                                                                                                    |                                             | newdata = *stu_test_rf()*), Residuals = predict(*stu_rf()*,\    |
|               |                                                                                                                    |                                             | newdata = *stu_test_rf()* - *stu_test_rf()\$input\$bm_target*)\ |
|               |                                                                                                                    |                                             | })                                                              |
|               |                                                                                                                    |                                             |                                                                 |
|               |                                                                                                                    |                                             | predict_rf_rmse \<- eventReactive(\                             |
|               |                                                                                                                    |                                             | input\$mb_action, { caret::RMSE(\                               |
|               |                                                                                                                    |                                             | pred = *predict_dt()\$Predicted*,\                              |
|               |                                                                                                                    |                                             | obs = *predict_dt()\$Actual*)\                                  |
|               |                                                                                                                    |                                             | })                                                              |
+---------------+--------------------------------------------------------------------------------------------------------------------+---------------------------------------------+-----------------------------------------------------------------+
| **RMSE()**    | Metrics displayed to be updated when response and explanatory variables are selected and 'Build Model' is clicked. | Within mainPanel():                         | [Display results, eg RMSE]{.underline}                          |
|               |                                                                                                                    |                                             |                                                                 |
|               |                                                                                                                    | fluidRow( div(\                             | rf_display_RMSE = function(){\                                  |
|               |                                                                                                                    | ***valueBoxOutput***("dt_rmse", width = 3)) | output\$dt_rmse = ***renderValueBox***(\                        |
|               |                                                                                                                    |                                             | valueBox(\                                                      |
|               |                                                                                                                    |                                             | value = *predict_dt_rmse()*)\                                   |
|               |                                                                                                                    |                                             | )}                                                              |
|               |                                                                                                                    |                                             |                                                                 |
|               |                                                                                                                    |                                             | observeEvent(input\$mb_action, *dt_display_RMSE()*)             |
+---------------+--------------------------------------------------------------------------------------------------------------------+---------------------------------------------+-----------------------------------------------------------------+

## 5.4 Parameter Tuning

### 5.4.1 Complexity Parameter

Upon receiving the results of our initial decision tree model, user can further refine the model based on the complexity parameter plot. Diagnosis plots, tree visualisation, statistical results should be updated based on the revised model.

To prune a tree, we want the cp value (with a simpler tree) that minimises the xerror.

```{r}
dtmodel$bestTune
```

```{r}
dt_cp_plot <- plot(dtmodel)
dt_cp_plot
```

+-----------------+---------------------------------------------------------------------------------+----------------------------+-------------------------------+
| Function        | Feature                                                                         | UI                         | Server                        |
+=================+=================================================================================+============================+===============================+
| **rpart.plotO** | Show plots when selections are completed and 'Build Model' option is triggered. | plotOutput("dt_cp_plot\_") | dt_cp_plot\<- eventReactive(\ |
|                 |                                                                                 |                            | input\$mb_action, {\          |
|                 |                                                                                 |                            | *plot(dtmodel())\             |
|                 |                                                                                 |                            | *})\                          |
|                 |                                                                                 |                            | \                             |
|                 |                                                                                 |                            | output\$dt_cp_plot\_\<-\      |
|                 |                                                                                 |                            | renderPlot({\                 |
|                 |                                                                                 |                            | dt_cp_plot()\                 |
|                 |                                                                                 |                            | })                            |
+-----------------+---------------------------------------------------------------------------------+----------------------------+-------------------------------+

### 5.4.2 Refreshing Results

```{r}
set.seed(1234)

dtmodel_pruned <- train(Math ~ ., 
                 data = traindata,
                 method = "rpart",
                 tuneGrid = expand.grid(cp = seq(from = 0.01, to = 0.02, by = 0.001)), #input$dt_cp
                 trControl = dt_fitcontrol
)
```

```{r}
rpart.plot(dtmodel_pruned$finalModel,
           box.palette="GnBu",
           branch.lty=3, 
           shadow.col="gray", 
           nn=TRUE)

```

```{r}
predict_dtpruned <- bind_cols(
   Actual = testdata$Math, 
   Predicted = predict(dtmodel_pruned, newdata = testdata),
   Residuals = predict(dtmodel_pruned, newdata = testdata) - testdata$Math
)

dtpruned_rmse <- RMSE(pred = predict_dtpruned$Predicted, obs = predict_dtpruned$Actual)
dtpruned_rsq <- R2(pred = predict_dtpruned$Predicted, obs = predict_dtpruned$Actual)
dtpruned_mae <- MAE(pred = predict_dtpruned$Predicted, obs = predict_dtpruned$Actual)

dtpruned_rmse
dtpruned_rsq
dtpruned_mae
```

# 6 Random Forest

## 6.1 The Model

```{r}

## Specifying training choices ##

# Set seed
set.seed(1234)


# Resampling Options
rf_fitcontrol <- trainControl(method = "cv", # input$rf_resamplingmethod
                           number = 5, # input$rf_resamplecnt
                           repeats = NA)  # input$rf_repeats

```

This model has 3 tuning parameters:

-   `mtry`: Randomly Selected Predictors (type: integer)
-   `trees`: Trees (type: integer, default: 500L)
-   `min_n`: Minimal Node Size (type: integer)

```{r}

## Model Parameters ##

tgrid <- expand.grid(
  mtry = sqrt(ncol(traindata)),
  splitrule = "variance", # input$rf_splitrule: "variance", "extratrees", "maxstat" or "beta" with default "variance" for regression
  min.node.size = 5 # Default 5 for regression
)
```

```{r}
rfmodel <- train(form = Math ~ .,
                 data = traindata,
                 method = "ranger",
                 trControl = rf_fitcontrol,
                 num.trees = 50, # input$treenum
                 importance = "permutation", # input$rf_varimpmode: none, impurity, permutation
                 tuneGrid = tgrid
                 )


rfmodel
```

+--------------------+--------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
| Function           | Feature                                                | UI                                                                             | Server                                                                      |
+====================+========================================================+================================================================================+=============================================================================+
| **trainControl()** | Select resampling method, resampling count and repeat. | numericInput(inputId = "rf_cvkfold_number",\                                   | Within ***mainPanel***() \> tabsetPanel() \>                                |
|                    |                                                        | label = "K-fold:",\                                                            |                                                                             |
|                    |                                                        | min = 3,\                                                                      | [For Cross Validation]{.underline}\                                         |
|                    |                                                        | max = 50,\                                                                     | rf_resamplecv_kfoldnum \<- eventReactive(input\$mb_action, {\               |
|                    |                                                        | value = 10))),                                                                 | trainControl(\                                                              |
|                    |                                                        |                                                                                | method = "cv",\                                                             |
|                    |                                                        | numericInput(inputId = "rf_repeatkfold_number",\                               | number = input\$rf_cvkfold_number)\                                         |
|                    |                                                        | label = "K-fold:",\                                                            | })                                                                          |
|                    |                                                        | min = 3,\                                                                      |                                                                             |
|                    |                                                        | max = 50,\                                                                     | [For Repeated Cross Validation\                                             |
|                    |                                                        | value = 10))),                                                                 | ]{.underline}rf_resamplercv_kfoldnum \<- eventReactive(input\$mb_action, {\ |
|                    |                                                        |                                                                                | trainControl(\                                                              |
|                    |                                                        | numericInput(inputId = "rf_repeatkfold_repeat", label = "Number of Repeats:",\ | method = "cv",\                                                             |
|                    |                                                        | min = 3,\                                                                      | number = input\$rf_repeatkfold_number)\                                     |
|                    |                                                        | max = 10,\                                                                     | })                                                                          |
|                    |                                                        | value = 3))),                                                                  |                                                                             |
|                    |                                                        |                                                                                | rf_repeatnum \<- eventReactive(\                                            |
|                    |                                                        |                                                                                | input\$mb_action, {\                                                        |
|                    |                                                        |                                                                                | trainControl(\                                                              |
|                    |                                                        |                                                                                | method = "repeatedcv",\                                                     |
|                    |                                                        |                                                                                | number = input\$rf_repeatkfold_number,\                                     |
|                    |                                                        |                                                                                | repeats = input\$dt_repeatkfold_repeat)\                                    |
|                    |                                                        |                                                                                | })                                                                          |
+--------------------+--------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
| **expand.grid()**  | Select split rule                                      | selectInput(inputId = "rf_splitrule\_",\                                       | tgrid \<- eventReaction(input\$mb_action, {\                                |
|                    |                                                        | label = "Select Split Rule:",\                                                 | expand.grid(\                                                               |
|                    |                                                        | choices = c("Variance" = "variance",\                                          | mtry = sqrt(ncol(traindata)),\                                              |
|                    |                                                        | "Extra Trees" = "extratrees",\                                                 | splitrule = "variance".\                                                    |
|                    |                                                        | "Max Stat" = "maxstat")                                                        | min.node.size = 5)}                                                         |
+--------------------+--------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
| **train()**        | Select number of trees and variable importance         | sliderInput(inputId = "rf_tree_range\_",\                                      | rfmodel \<- eventReactive(\                                                 |
|                    |                                                        | label = "Range of Trees (keep range within 20):",\                             | input\$mb_action, {\                                                        |
|                    |                                                        | min = 5,\                                                                      | train(form = Math \~ .,\                                                    |
|                    |                                                        | max = 100,\                                                                    | data = traindata(),\                                                        |
|                    |                                                        | value = c(5,25)))                                                              | method = "ranger",\                                                         |
|                    |                                                        |                                                                                | trControl = fitcontrol(),\                                                  |
|                    |                                                        | radioButtons(inputId = "rf_varimpmode\_",\                                     | num.trees = *input\$rf_tree_range,*\                                        |
|                    |                                                        | label = "Feature Importance:",\                                                | importance =\                                                               |
|                    |                                                        | choices = c("Gini Importance" = "impurity",\                                   | *input\$rf_varimpmode*,\                                                    |
|                    |                                                        | "Permutation Importance" = "permutation"),selected = "impurity"))              | tuneGrid = *tgrid()*)\                                                      |
|                    |                                                        |                                                                                | })                                                                          |
+--------------------+--------------------------------------------------------+--------------------------------------------------------------------------------+-----------------------------------------------------------------------------+

## 6.2 Visual Model Diagnostic

```{r}
rfmodel$bestTune
```

```{r}
predict_rf <- bind_cols(
   Actual = testdata$Math, 
   Predicted = predict(rfmodel, newdata = testdata),
   Residuals = predict(rfmodel, newdata = testdata) - testdata$Math
)
```

```{r}
rf_predvsactual <- 
   ggplot(data = predict_rf,
          aes(x = Actual, y = Predicted)) +
   geom_point(alpha = 0.2, color = "grey40") +
   geom_smooth(method = "loess", formula = "y ~ x", color="#dfb2e9") +
   geom_abline(intercept = 0, slope = 1, linetype = 2, color = "#20948b", size = 0.8) +
   labs(title = "Predicted vs Actual") +
   theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))

rf_residvsactual <- 
   ggplot(data = predict_rf,
          aes(x = Actual, y = Residuals)) +
   geom_point(alpha = 0.2, color = "grey40") +
   geom_smooth(method = "loess", formula = "y ~ x", color="#dfb2e9") +
   geom_hline(yintercept = 0, linetype = 2, color = "#20948b", size = 0.8) +
   labs(title = "Residuals vs Predicted") +
   theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))

rf_predvsactual + rf_residvsactual +
  plot_layout(guides = "collect") +
  plot_layout(widths=c(1,1))
```

## 6.3 Statistical Model Evaluation

```{r}
rf_rmse <- RMSE(pred = predict_rf$Predicted, obs = predict_rf$Actual)
rf_rsq <- R2(pred = predict_rf$Predicted, obs = predict_rf$Actual)
rf_mae <- MAE(pred = predict_rf$Predicted, obs = predict_rf$Actual)

rf_rmse
rf_rsq
rf_mae
```

## 6.4 Variable Importance

```{r}
plot(varImp(rfmodel))
```

```{r}
#rf_varimp <- importance(rfmodel) %>% 
#  as.data.frame() %>% 
#  rownames_to_column() %>% 
#  rename("Variable" = rowname) 
```

```{r}
#bar_chart <- function(label, width = "100%", height = "1rem", fill = "#73b2c4", background = "#f5f5f5") {
#  bar <- div(style = list(background = fill, width = width, height = height))
#  chart <- div(style = list(flexGrow = 1, marginLeft = "0.5rem", background = "#f5f5f5"), bar)
#  div(style = list(display = "flex", alignItems = "center"), label, chart)
#}

#tab_varimp <- 
#  reactable(data = rf_varimp,
#         
#          columns = list(
#            `%IncMSE` = colDef(
#              name = "% Increase in Mean Square Error",
#              align = 'left',
#              cell = function (value) {
#                width <- paste0(value, "%")
#                bar_chart(round(value,2), width = width)
#              }),
#            IncNodePurity = colDef(
#              name = "Increase in Node Purity",
#              align = 'left',
#              cell = function (value) {
#                width <- paste0(value/ max(rf_varimp$IncNodePurity) *100, "%")
#                bar_chart(format(as.numeric(value), nsmall = 0, big.mark=","), width = width, fill = "#f27279", background = "#f5f5f5")
#              })            
#          ))

#tab_varimp
```

+----------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+-------------------------------+-----------------------------------------------+
| Function                                                       | Feature                                                                                                | UI                            | Server                                        |
+================================================================+========================================================================================================+===============================+===============================================+
| **rf_varimp & [reactable](https://glin.github.io/reactable/)** | Plots to be updated when response and explanatory variables are selected and 'Build Model' is clicked. | Within ***sidebarPanel***():  | rf_varimp \<- eventReactive(\                 |
|                                                                |                                                                                                        |                               | input\$rf_action\_, {\                        |
|                                                                |                                                                                                        | reactableOutput("tab_varimp") | importance(stu_rf) %\>% as.data.frame() %\>%\ |
|                                                                |                                                                                                        |                               | rownames_to_column() %\>%\                    |
|                                                                |                                                                                                        |                               | rename("Variable" = rowname)\                 |
|                                                                |                                                                                                        |                               | })                                            |
|                                                                |                                                                                                        |                               |                                               |
|                                                                |                                                                                                        |                               | output\$tab_varimp \<- renderReactable({\     |
|                                                                |                                                                                                        |                               | reactable(...)\                               |
|                                                                |                                                                                                        |                               | })                                            |
+----------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+-------------------------------+-----------------------------------------------+

: {tbl-colwidths="\[10,20,35,35\]"}

# 7 Gradient Boosting

## 7.1 The Model

```{r}
## Specifying training choices ##

# Resampling Options
gb_fitcontrol <- trainControl(method = "cv", # input$gb_resamplingmethod - 
                           number = 5, # input$gb_resamplecnt
                           repeats = NA) # input$gb_repeats

# Tuning Grid
gbm_grid = expand.grid(interaction.depth = c(1:3),
                       n.trees = (1:30) * 10,
                       shrinkage = c(0.01,0.05,0.1),
                       n.minobsinnode = 20)
```

`gbm` has the following tuneable hyperparameters:

-   `n.trees`: number of boosting iterations

-   `nteraction.depth`: maximum tree depth

-   `shrinkage`: the learning rate or shrinkage parameter - `n.minobsinnode`: minimum terminal node size

```{r}
set.seed(1234)

gbmodel <- train(Math ~ .,
                 data = traindata,
                 trControl = gb_fitcontrol,
                 method = "gbm",
                 tuneLength = 5,
                 verbose = FALSE,
                 tuneGrid = gbm_grid)

gbmodel                 
                 
```

## 7.2 Visual Model Diagnostic

```{r}
gbmodel$bestTune
```

```{r}
plot(gbmodel)
```

```{r}
predict_gb <- bind_cols(
  Actual = testdata$Math,
  Predicted = predict(gbmodel, newdata = testdata),
  Residuals = predict(gbmodel, newdata = testdata) - testdata$Math)

```

```{r}
gb_predvsactual <- 
   ggplot(data = predict_gb,
          aes(x = Actual, y = Predicted)) +
   geom_point(alpha = 0.2, color = "grey40") +
   geom_smooth(method = "loess", formula = "y ~ x", color="#dfb2e9") +
   geom_abline(intercept = 0, slope = 1, linetype = 2, color = "#20948b", size = 0.8) +
   labs(title = "Predicted vs Actual") +
   theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))

gb_residvsactual <- 
   ggplot(data = predict_gb,
          aes(x = Actual, y = Residuals)) +
   geom_point(alpha = 0.2, color = "grey40") +
   geom_smooth(method = "loess", formula = "y ~ x", color="#dfb2e9") +
   geom_hline(yintercept = 0, linetype = 2, color = "#20948b", size = 0.8) +
   labs(title = "Residuals vs Predicted") +
   theme(plot.background=element_rect(fill="#f5f5f5",colour="#f5f5f5"))

gb_predvsactual + gb_residvsactual + 
  plot_layout(guides = "collect") +
  plot_layout(widths=c(1,1))
```

## 7.3 Statistical Model Evaluation

```{r}
gb_rmse <- RMSE(pred = predict_gb$Predicted, obs = predict_gb$Actual)
gb_rsq <- R2(pred = predict_gb$Predicted, obs = predict_gb$Actual)
gb_mae <- MAE(pred = predict_gb$Predicted, obs = predict_gb$Actual)

gb_rmse
gb_rsq
gb_mae
```

## 7.4 Variable Importance

```{r}
plot(varImp(gbmodel))
```
